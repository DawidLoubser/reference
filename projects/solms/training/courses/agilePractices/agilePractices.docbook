<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<book xml:id="projects.solms.training.courses.ooad.ooad" 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
    <info>
        <title>Agile Practices</title>
        <author>
            <personname>
<!--                <honorific>Dr</honorific>  -->
                <firstname>Fritz</firstname>
                <surname>Solms</surname>
            </personname>
            <affiliation>
                <orgname>Solms TCD</orgname>
                <address>
                    <city>Johannesburg</city>
                    <street>113 Barry Hertzog Ave, Emmarentia</street>
                    <postcode>2195</postcode>
                    <country>South Africa</country>
                </address>
            </affiliation>
            <email>fritz@solms.co.za</email>
        </author>
    </info>
    <!-- 
    
    
    Course additions:
    ===========
    
    The agile manifesto
    
    Scoping: identifying user stories
    
    Estimating and prioritizing stories
    
    Requirements, contracts and tests
    
    Exploring technology domain and spiking
    
    Agile design
    
    Agile coding
    
    Refactoring
    
    URDAD in context of agile methodologies
    
    What about architecture
        - no clear differentiation between design & architecture
        - not sufficiently catered for, XP after architectural processes
    
    *************************************************************************
    
    * Meeting with customers to generate user stories
    * Estimating and prioritising user stories
    * Attending a spike session to learn new technology
    * Writing tests and code to bring user stories to life
    * Refactoring to remove code smells for elegant design
    * Removing hacks for easier maintenance using object-oriented coding principles
    * Implementing an adaptable architecture through design patterns
    * Delivering software in frequent iterations using XP or Scrum
    
    
    Planning an Agile Release
    Establishing the Agile project
    
    * Recognizing the structure of an Agile team
    * Programmers
    * Managers
    * Customers
    * Differentiating XP and Scrum
    
    Developing a foundation with user stories
    
    * Eliciting application requirements
    * Capturing user stories
    * Recognizing good user stories
    
    Estimating and "The Planning Game"
    
    * Distinguishing between release and iteration
    * Prioritizing and selecting user stories with the customer
    * Defining an estimation unit
    * Projecting team velocity for releases and iterations
    
    The Agile coding process
    
    * Prioritizing tasks for a cohesive design
    * Write test, write code, refactor
    * Allocating time for a spike
    
    Crafting Adaptive Software Through Test-Driven Development
    Driving the design process with automated testing
    
    * Writing a user acceptance test
    * Getting a test to compile
    * Running tests
    
    Integrating unit testing
    
    * Distinguishing between user tests and unit tests
    * Developing effective test suites
    * Achieving "green lights" through continuous testing
    
    Optimizing test-driven development
    
    * Drafting a unit test that is simple, isolated and fast
    * Isolating classes for effective testing
    * Creating mock objects for testing
    
    Refactoring for Elegant Design
    Recognizing code smells
    
    * Conditional logic
    * Code duplication
    * Code that needs comments
    
    Cleaning code with refactoring
    
    * Renaming fields and methods
    * Extracting methods and base classes
    * Programming by intention
    * Removing conditional logic
    
    Integrating Object-Oriented Programming Principles
    Adopting the best practices principles
    
    * Single Responsibility Principle (SRP)
    * Open/Closed Principle (OCP)
    * Dependency Inversion Principle (DIP)
    * Liskov Substitution Principle (LSP)
    
    Evolving design from the bottom up
    
    * Delegating class responsibilities
    * Achieving polymorphic behavior
    * Preferring composition over inheritance
    
    Simplifying Complex Architectural Problems Using Design Patterns
    Defining design patterns
    
    * Creational, Structural and Behavioral patterns
    * Guaranteeing the correctness of an adaptable design
    
    Integrating design patterns into the Agile process
    
    * Template Method, Adapter, Strategy, Singleton and Factory Method
    * Overriding behavior with virtual and abstract functions
    * Sharing functionality using static fields and methods
    
    Managing to the Agile Manifesto
    
    * Delivering the first iteration
    * Planning the next iteration
    * Adapting Agile to fit your development methodology
    
    
    -->
    
    <xi:include href="introduction/introduction.docbook"/>
    
    <xi:include href="../../../../../resources/information/methodology/agile/extremeProgramming/extremeProgrammingChapter.docbook"/>
    <!--
    <xi:include href="../../../../../resources/information/methodology/agile/scrum/scrum.docbook"/>
    -->
    <xi:include href="../../../../../resources/information/methodology/refactoring/refactoring.docbook"/>
    
    <xi:include href="../../../../../resources/information/responsibility/testing/unitTesting/unitTesting.docbook"/>
    
</book>
