<?xml version="1.0" encoding="UTF-8"?>

<article id="projects.solms.training.courses.ooad.exams.carRental"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <articleinfo>
    <title>Java Skills Upgrader</title>
    <subtitle>Competency exam</subtitle>
    <authorgroup>
      <author>
        <honorific>Dr</honorific>
        <firstname>Fritz</firstname>
        <surname>Solms</surname>
      </author>
      <author>
        <firstname>Dawid</firstname>
        <surname>Loubser</surname>
      </author>
      <author>
        <firstname>Mandy</firstname>
        <surname>Lingham</surname>
      </author>
    </authorgroup>  
    <date>August 2005</date>
  </articleinfo>

  <para>
    <orderedlist>
      <listitem>
        <para>
          Explain the benefits of using generics. Write a simple generic singleton store which holds
          and makes accessible a single instance of some class. The generic singleton store should
          receive an instance of the generic type as argument and have a generic
          <literal>getInstance</literal> service. 
        </para>
      </listitem>
      <listitem>
        <para>
          Define a <literal>FixIt</literal> annotation with a boolean attribute,
          <literal>critical</literal>. Specify that only methods may be annotated with this
          annotation and that it should survive at up to run-time. Have a QualityValidator class
          which could be used by a class loader to verify that any class loaded does not have any
          critical fixes. The validator should have one method, <literal>isStable</literal>, which
          gets a class as argument and returns true if there are no critical fixes and false
          otherwise. 
        </para>  
      </listitem>
      <listitem><para>
        The <emphasis>Fibonacci</emphasis> sequence of numbers is obtained by starting with <literal>0</literal> and <literal>1</literal>, each
        subsequent number being derived by adding the two preceding numbers together. The sequence thus follows:
        <programlisting>
          0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, ...
        </programlisting>
        <orderedlist>
          <listitem>
            <para>
              Write a class that can generate the first <literal>n</literal> numbers in the sequence. Using a 
              <emphasis>memory-mapped file</emphasis>, wrapped with an <emphasis>integer buffer</emphasis>, store
              the integers in the file. Write a program that creates a file, i.e.
              <programlisting><![CDATA[
java GenerateFibonacci <file> <n>
                ]]></programlisting>
              e.g.
              <programlisting>
                java GenerateFibonacci myFile.dat 20
              </programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              Write a separate program that, using channels and buffers, doubles the integers
              in the above mentioned file by processing through it only once. Make use of
              <literal>mark()</literal> and <literal>reset()</literal>.
            </para>
          </listitem>
        </orderedlist>
      </para></listitem>    
    </orderedlist>
  </para>
</article>
