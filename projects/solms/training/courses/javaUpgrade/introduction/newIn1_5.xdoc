<?xml version="1.0" encoding="UTF-8"?>
<!-- TODO: Move this component to resources/knowledge -->
<section id="projects.solms.training.courses.javaUpgrade.introduction.newIn1_5"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>New features in Java 5.0</title>
    <para>
        Although internally still versioned <literal>1.5</literal>, in September 2004 <emphasis>Java 5.0</emphasis>
        was released - the new versioning convention to some extent reflecting the large number
        of fundamental language changes introduced. Codenamed <quote>Tiger</quote>, the new release
        introduced many features which fundamentally simplify some aspects of writing Java code,
        whilst also introducing other powerful and complex features to solve particular problems.
    </para>
    <para>
        The following are the most important additions:
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Generics</title>
                    <para>Allows for a type or method to operate on objects of various types (such as the
                    data structures do in the Collections Framework), whilst providing compile-time
                    type-safety. Eliminates unnecessary casting of objects.</para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Enhanced for Loop</title>
                    <para>
                        Eliminates the necessity to work with <literal>iterators</literal> (Collection Framework) or 
                        <literal>index variables</literal> (Arrays) when iterating over collections of objects.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Autoboxing/Unboxing</title>
                    <para>
                        Eliminates the manual effort of converting between primitive types (such as <literal>int</literal>)
                        and their wrapper classes (such as <literal>java.lang.Integer</literal>). Java automatically performs
                        conversions, so the developer doesn't have to.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Typesafe Enumerations</title>
                    <para>
                        Allows for the creation of enumerations (or <quote>constants</quote>) in a flexible, object-oriented
                        way. This supersedes the traditional (error-prone) method of declaring <literal>public static final</literal>
                        fields to represent constant values.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Varargs (Variable-length message arguments)</title>
                    <para>
                        If a service can be invoked with various arguments, this facility eliminates the need to provide
                        several overriding implementations of the method, or to proide the arguments as an array of objects.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Metadata (Annotations)</title>
                    <para>
                        Allows for a <quote>declarative</quote> style of programming. The developer annotates code elements
                        with annotations, and metadata-aware tools and frameworks (such as server containers, compilers, etc)
                        can use these to generate code, or define run-time behaviour. This feature can eliminate the need to write <quote>boilerplate</quote> (also
                        called <quote>plumbing</quote>) code, as well as reduce or eliminate the need for <quote>side files</quote> such
                        as EJB Deployment Descriptors. Metadata is a very significant addition, with far-reaching possibilities.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Static Import</title>
                    <para>
                        In order to access the static members of classes (such as constants or methods), one has to prefix 
                        that member by the classname - for example, <literal>Math.cos(...)</literal>. In certain cases,
                        code can be made more readable by statically importing the members we use of, eliminating the need
                        to fully qualify them.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Formatted I/O</title>
                    <para>
                        Allows formatted output (and input) of text in C's <literal>printf</literal> style.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Improved Multi-Threading</title>
                    <para>
                        Java 5 adds improved low-level thread control, effective support for handling exceptions across 
                        threads, improved support for thread-safe collections and blocking queues, support for task 
                        scheduling, and improved synchronization.
                    </para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>
</section>