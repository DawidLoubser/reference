<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<book 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <info>
        <title>Java Server Faces for EJB</title>
        <subtitle>Maintainable presentation layers for Java EE systems</subtitle>
        <author>
            <personname>
                <firstname>Dawid</firstname>
                <surname>Loubser</surname>
            </personname>
            <affiliation>
                <orgname>Solms Training, Consulting and Development</orgname>
            </affiliation>
            <email>dawidl@solms.co.za</email>
        </author>
    </info>
    

    <chapter>
        <title>Background: Architecture and Design</title>
        <para>
            In order to consider Java Server Faces as a user interface
            for a Java EE system, the following topics will
            help the the developer gain a deeper conceptual understanding:
            <itemizedlist>
                <listitem>
                    <formalpara>
                        <title>Design by Contract</title>
                        <para>Contracts are the cornerstone of modular systems,
                        and they enable decoupling, testability, scoping/modularisation, as
                        well as a formal specification of use-cases (services). Design-by-contract
                        is an important methodology and conceptual framework upon which to
                        build any application.</para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>User Interfaces in the context of design-by-contract</title>
                        <para>
                            User interfaces need to adapt the well-specified behaviour of
                            a design-by-contract system to the expectations of users in
                            order to provide them with a productive and intuitive experience.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>The Command design pattern</title>
                        <para>
                            A design pattern used by Java Server Faces to completely
                            decouple the user interface (and its intricacies) from
                            application logic.
                        </para>
                    </formalpara>
                </listitem>
            </itemizedlist>
        </para>
        <xi:include href="../../../../../resources/information/technologies/java/lang/ooMappings/designByContract/designByContract.xdoc"/>
        <xi:include href="../../../../../resources/information/concepts/architecture/userInterface/userInterface.docbook"/>
        <xi:include href="../../../../../resources/information/concepts/design/patterns/classical/behavioral/command/command.docbook"/>
    </chapter>
        
    <chapter>
        <title>Overview of the Java EE Architecture</title>
        <xi:include href="../../../../../resources/information/concepts/architecture/referenceArchitectures/j2ee/architecture/architecture.xdoc"/>
        <xi:include href="../../../../../resources/information/concepts/architecture/referenceArchitectures/j2ee/j2eeAsMvc/j2eeAsMvc.xdoc"/>
        <!-- Applying MVC to Java EE -->
            <!-- EJB (Session Beans) as controllers -->
            <!-- Discussion: UI Controllers (e.g. JSF, Servlets, etc.) -->
    </chapter>
        
    
    <!-- Overview of Java EE Presentation Layer -->
    <xi:include href="../../../../../resources/information/technologies/java/j2ee/servlet/servlet.xdoc"/>
        <!-- Component Types -->
        <!-- Packaging and Deployment -->
            <!-- Tool independence (ant) -->
            <!-- 'API' of business module(s) for complete decoupling 
                and scoping [vs. EAR] -->
        <!-- Discussion of problems and productivity inhibitors -->
            <!-- Have to build full infrastructure (every time) to:
                - Construct objects necessary for use cases
                - Maintain user interface state (e.g. imagine
                a "step 1, step 2, step 3" scenario, with the user
                navigating these.
            -->
    
    <!-- Java Server Faces -->
    <xi:include href="../../../../../resources/information/technologies/java/javaEE/layers/presentation/jsf/jsf-chapter.docbook"/>
    
</book>