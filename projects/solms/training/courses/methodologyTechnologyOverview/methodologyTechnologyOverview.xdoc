<?xml version="1.0" encoding="UTF-8"?>
<book id="projects.solms.training.courses.methodologyTechnologyOverview.methodologyTechnologyOverview"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <bookinfo>
    <title>Methodology and Technology Overview</title>
    <author>
      <honorific>Dr</honorific>
      <firstname>Fritz</firstname>
      <surname>Solms</surname>
    </author>
        <xi:include href="../../../../../resources/information/solms/training/overview/contactDetails.xdoc" />
    <date>21 February 2005</date>
  </bookinfo>
  <xi:include href="../preface/preface.xdoc"/>

  <xi:include href="../businessAnalysis/introduction/introduction.xdoc" />
 
  <xi:include href="../../../../../resources/information/technologies/uml/summary/summary.xdoc" />
  
  <xi:include href="../../../../../resources/information/concepts/developmentProcess/urdad/urdad.xdoc"/>
  
  <xi:include href="../../../../../resources/information/concepts/architecture/organizational/qualityAttributeDrivenOrganizationalArchitecture.xdoc"/>
  
   <chapter>
     <title>Technologies Overview</title>
     
     <xi:include href="../../../../../resources/information/technologies/java/lang/introduction/coreLanguageFeatures/coreLanguageFeatures.xdoc"/>
     
     <xi:include href="../../../../../resources/information/technologies/java/j2ee/introduction/j2eeApis/j2eeApis.xdoc"/>
     <section>
       <title>Overview of XML</title>
       
       <section>
         <title>What is XML?</title>
         <para> XML, the Extensible Markup Language, is a tagged markup language for structured,
           self-describing data. As an extensible markup language it allows for the definition of
           new markup tags. This means that, instead of prescribing a specific vocabulary for
           <abbrev>e.g.</abbrev> Web Pages or Purchase Orders, it simply defines a standard for
           the markup language itself - anybody can thus create their own vocabulary (or tags)
           to describe anything.
         </para>
         <para> XML is a public standard developed and maintained by the World Wide Web Consortium
           (W3C). The W3C develops inter-operable technologies (specifications, guidelines,
           software and tools) to increase the potential of the Web as a forum for information,
           commerce, communication and collective understanding.
         </para>
       </section>
       
       <section>
         <title>The History of Markup Languages</title>
         <para> 
           A markup provides a way of supplying meta data - that is information describing the
           actual data. In music markup has been used to supply extra information about the way in
           which the notes should be played - in particular the tempo, the volume and the feeling/atmosphere.
         </para>
         <para>
           Similarly markup languages are used to supply information which describes the
           supplied information. The first formal markup language was the Generalized Markup
           Language (GML) developed by IBM in 1969. It was used to describe the structure of data sets.
         </para>
         <para>
           GML gradually evolved into the Standard Generalized Markup Language (SGML) which was
           adopted in 1986 by the International Standards Organization (ISO) as an international
           data storage and exchange standard. SGML is a very powerful markup language which has
           been used by Governments and large companies to exchange technical information. The SGML
           documents were often transformed into some readable form for publication. Note that the
           idea of separating content from presentation was already intrinsic to SGML.
         </para>
         <para>
           SGML is, however, quite complex and difficult to learn. Furthermore, the tools
           required to process SGML documents were complex and hence often expensive.
         </para>
         <para>
           In 1996 the Word Wide Web Consortium (W3C) started to work on a simplified SGML. Like
           SGML, it had to be extensible and should be used in a way where content is separated
           from presentation. It should, however, be much simpler than its predecessor and, in
           order to protect the investments in SGML tools, it was designed to be a subset of SGML.
         </para>
         <para>
           The first version of the XML specification, version 1.0, was released in early 1998.
         </para>
       </section>
       
       <section>
         <title>Uses of XML</title>
         <para>
           XML is a format for self-describing data and its uses revolve naturally around the
           definition, processing and communication of self-describing data.
         </para>
         <para>
           A very wide spectrum of domain-specific vocabularies have been (and will be) developed.
           These cover the exchange of scientific, legal and business information through to
           software setup information and the service request information in the case of
           distributed software systems.
         </para>
         <para>
           In this section will shall look at a few example applications of XML.
         </para>
         <section>
           <title>Scientific Applications</title>
           <para>
             One of the most widely used scientific applications is MathML. MathML provides a
             standard way to define and exchange mathematical expressions. Browsers and
             publication software packages can be used to set these mathematical expressions into
             visual form and different applications can exchange mathematical expressions via MathML.
           </para>
           <para> Standards for medical, biological and chemical information have also been defined
             in XML.</para>
         </section>
         
         <section>
           <title>e-Business Data Exchange</title>
           <para>
             Standards for electronic exchange of business data have been around for some
             time. The most notable ones are Electronic Data Interchange (EDI) which is used
             mainly in the USA and the United Nations/Electronic Data Exchange for
             Administration, Commerce and Transport (UN/EDIFACT).
           </para>
           <para>
             A range of XML-based standard for e-business data exchange have been developed
             recently. The Open Buying on the Internet Consortium (OBI) is working on such a
             standard. Furthermore, CommerceOne has released the Common Business Library (CBL)
             and Microsoft has released CommerceXML (cXML) and BizTalk.
           </para>
           <para>
             Another interesting organization developing XML-based standards for
             business-to-business data exchange is RosettaNet. It focuses on information exchange
             between businesses participating in a supply chain scenario. Finally, Interactive
             Financial Exchange (IFE) has been developed for the exchange of financial data.
           </para>
         </section>
         
         <section>
           <title>System Configuration</title>
           <para> 
             Many software systems can retrieve their configuration information from XML
             documents. For example, J2EE Application servers typically obtain their
             configuration information from XML documents. Individual Enterprise Java Beans
             (entity and session beans) obtain their deployment information from deployment
             descriptor files which are XML files.
           </para>
         </section>
         
         <section>
           <title>Document Definition via DocBook XML</title>
           <para>
             DocBook is an XML-vocabulary for general presentation-independent documentation
             definition. The idea is that you define the <emphasis>content</emphasis> of the 
             document <emphasis>independent from the presentation</emphasis>. In many ways this is similar to the 
             ideas behind <literal>LaTeX</literal>, historically the standard tool used to 
             produce scientific ( and in particular mathematical) documents. The final document 
             can then be rendered into various publication formats like XHTML, PDF or Postscript.
           </para>
           <para>
             In fact, the document you are reading now is authored in a customised subset of the 
             DocBook XML vocabulary!
           </para>
         </section>
         
         <section>
           <title>The XML Query Language (XQL)</title>
           <para>
             The XML Query Language is defined as a general query language for any XML data
             sources. It can be used to query XML documents, data bases or object repositories
             without being tightly coupled to the type of data source. This relates conceptually
             to SQL (The Structured Query Language) which is used to interact with relational
             databases in a standard way.
           </para>
         </section>
         
         <section>
           <title>Graphics Definition</title>
           <para>
             The Scalar Vector Graphics language (SVG) is an XML-based vocabulary used to
             define and exchange any type of graphics object. As opposed to storing every pixel's
             colour information (such as in JPEG images), vector paths are stored as mathematical 
             sequences in an XML format, thus making them resolution- and device independent.
           </para>
           <para>
             SVG can be used for a wide variety of purposes, such as drawing graphs, company
             logos, creating application user interfaces, and even animation (similar to the
             Macromedia Flash format). General support for SVG in applications is still somewhat
             lacking (but it is growing,) and has already reached the stage of being practical for 
             many purposes.
           </para>
         </section>
         
         <section>
           <title>IT-Related XML Vocabularies</title>
           <para> 
             Of course, XML is also useful for data definition and exchange for the IT
             industry itself. It is used, among others, for transmitting service requests between
             systems, supplying configuration and environmental information to systems and
             describing web site structures.
           </para>
           <section>
             <title>The Simple Object Access protocol (SOAP)</title>
             <para> 
               SOAP, like CORBA's Internet Inter-ORB Protocol (IIOP), is developed for
               sending remote service requests to objects. It was developed by Microsoft. While
               IIOP is a binary protocol put on top of TCP/IP, SOAP is a text-based protocol
               defined within XML over HTTP. As such it avoids many of the firewall tunneling
               difficulties often encountered in CORBA systems. Furthermore, being based on XML,
               it has the advantage that the information supplied with the service request is
               self-describing and that it does not rely on any support from an Object-Request
               Broker (ORB).</para>
           </section>
           
           <section>
             <title>The Channel Definition Format (CDF)</title>
             <para>
               This format, which was proposed by Microsoft, enables Web sites to feed
               information updates through channels. Anybody who is interested in obtaining the
               latest information from certain web sites can subscribe to such channels.
               Although CDF did comply to earlier XML standards it unfortunately does not fully
               comply to the latest XML standards. Furthermore, though used in Microsoft's 
               <quote>channel bar</quote> and <quote>channel screen saver</quote> in earlier versions of
               Windows, this standard has largely been replaced by <literal>RSS</literal> 
               (RDF Site Summary, also called Really Simple Syndication) feeds, which have 
               been adopted with great success by many web sites, especially after the recent explosion
               in personal Web Logs (<quote>Blogs</quote>).
             </para>
           </section>
           
           <section>
             <title>Structured Graph Format (SGF)</title>
             <para>
               SGF can be used to describe the structure of web sites (similar to the concept
               of a &quot;site map&quot;). It is based on structure graphs which are a product 
               of formal Mathematics.
             </para>
           </section>
         </section>
       </section>
       
       <section>
         <title>Main Features of XML</title>
         <para> Before delving into XML in detail, it is fruitful to obtain an overview of the XML
           features. This will put the subsequent chapters into context and will provide us with a
           framework for the course.</para>
         <section>
           <title>The XML syntax</title>
           <para> 
             XML is a simple tagged markup language which has a formal syntax specification.
             An XML document is only valid if it conforms to the specification and this can be
             checked using an XML parser. There are many XML parsers freely available and most
             XML editors parse an XML document automatically.</para>
           <para> Below we show an example of a valid XML document:</para>
           <figure>
             <title>XML Example</title>
             <programlisting>
               <![CDATA[
<?xml version="1.0"?>
  <course-list> 
    <course title="XML">
      <presenter>Fritz Solms</presenter>
      <duration>3 days</duration> 
    </course>
    <course title="Programming in Java">
      <presenter>Alexander Hartner</presenter>
      <duration>5 days</duration> 
    </course> 
    <course title="Practical Cooking">
      <presenter>Jamie Oliver</presenter>
      <duration>1 day</duration>
    </course>
</course-list>
               
               ]]>
               <xi:include href="example/firstExample.xml" parse="text"/></programlisting>
           </figure>
         </section>
         
         <section>
           <title>Document Type Definitions (DTDs)</title>
           <para> 
             XML enables us to define our own vocabulary of tags. However, if there is no
             agreement on the tags used, it is difficult for the recipient of the data to process
             the information by machine. We really need an agreement between the parties on the
             valid tags for a specific vocabulary.
           </para>
           <para> 
             But even that is not sufficient: For example, it makes sense to nest
             a <emphasis>duration</emphasis> tag within a <emphasis>course</emphasis> tag, but
             not vice versa.</para>
           <para> 
             Document Type Definitions (DTDs) enable one to specify ones domain vocabulary as
             well as the legal syntax for that vocabulary. DTD predates XML by many years,
             and have traditionally been used in both HTML and SGML. XML Schemas, a much more
             recent standard developed specifically for XML, is both significantly less complex
             and more powerful than DTDs, and it is not recommended that any new development
             be based on DTDs - they are largely in use today for legacy reasons.
           </para>
         </section>
         
         <section>
           <title>The Document Object Model (DOM)</title>
           <para> 
             The Document Object Model (DOM) is an API which provides an object-oriented
             tree-structured view onto the entire XML document. Such a view provides a convenient
             way to extract information from and manipulate and XML document.
           </para>
           <para>
             The DOM is specified and maintained by the W3C and is thus part of the formal XML
             standard specification. DOM has been implemented in several languages, such as Java,
             JavaScript and C/C++. This enables us to process XML information the same way in
             different languages, greatly reducing learning curves.
           </para>
         </section>
         
         <section>
           <title>The Simple API for XML (SAX)</title>
           <para> 
             SAX is simple API which facilitates serial processing of XML documents. As such
             it requires less resources than DOM (the entire XML document need not be viewed as a
             tree - the document can be processed in sequentially, a small chunk at a time.
           </para>
           <para>
             SAX processing is event driven. As tags are encountered, the SAX parser generates
             relevant notification events. The application processing the XML document will
             receive these events and can react accordingly.
           </para>
           <para>
             Unlike DOM, SAX is not specified by the W3C. It originated from a group of developers
             who needed resource-efficient processing of XML documents - and ever since this
             standard has acquired wide-spread popularity.
           </para>
         </section>
         
         <section>
           <title>Name Spaces</title>
           <para> 
             Vocabularies can become very large and very cumbersome to maintain (and to
             understand). Name spaces were introduced to break down huge vocabularies into
             smaller modules which can be used independently. They also make it possible to
             assemble a complex vocabulary from a collection of simpler ones.
           </para>
         </section>
         
         <section>
           <title>XML Schemas</title>
           <para> 
             Document Type Definitions (DTDs) have some important limitations: The W3C addressed
             these in an impressive manner by defining the <literal>XML Schema</literal> standard 
             to completely replace DTDs. Schemas allow for a much more precise and powerful definition
             of vocabulary, as well as bringing the power of Object-Orientation to XML.
           </para>
         </section>
         
         <section>
           <title>Linking</title>
           <para>
             The feature of HTML which most probably contributed more to its success than any
             other feature is its ability to link one HTML document with another (or even with
             non-HTML information) which is accessible through a Uniform Resource Locator (URL).
           </para>
           <para> 
             Though not initially part of the XML standard, XML linking (<literal>XLink</literal>) has 
             grown to be a powerful mechanism which far exceeds the capability of simple links in 
             web documents. The software support for this standard has, however, grown slowly - 
             not all tools support it yet.
           </para>
         </section>
         
         <section>
           <title>Querying</title>
           <para> 
             The W3C has also developed a query language, <literal>XQuery</literal> which can be used to
             formulate queries on XML documents which are independent of the source of the XML
             document, <abbrev>i.e.</abbrev> the type of repository (<abbrev>e.g.</abbrev> relational or object database, or file).
           </para>
         </section>
         
         <section>
           <title>XML Transformations</title>
           <para> 
             The ability to transform an XML document into another XML vocabulary or to
             another format altogether is important: In cases where there is no global
             standard (or where the global standard is not strictly adhered to), different
             companies could end up using a different vocabulary for the same data domain. In such
             cases one requires tools for transforming the one document type to the other. Such
             tools are specified and are available. They are called <literal>XSLT</literal> 
             (XSL Transformation).
           </para>
           <section>
             <title>XML Styling</title>
             <para> 
               A special case of XML transformation is that of styling, rendering or
               publishing. For example, we might want to publish XML information in a web page
               of our design. Once again we need to translate the XML document (or parts
               thereof) into an HTML document which has the desired look. The W3C has specified
               a language to this end, the Extensible Style Language for Formatting Objects (XSL-FO).
             </para>
           </section>
           
         </section>
         
       </section>
       
       <section>
         <title>Transmitting XML Documents</title>
         <para> 
           XML can be superimposed over a whole range of network transport protocols like HTTP, 
           SMTP (e-Mail) or FTP. Alternatively XML may be sent as data within CORBA, RMI or DCOM service requests.
         </para>
       </section>
       
       <section>
         <title>Tools for XML</title>
         <section>
           <title>Editors</title>
           <para>
             You can use any text editor to write XML documents. If you write a
             lot of XML, however, this will become quite tedious, as XML editors typically provide the
             following assistance:
             <itemizedlist>
               <listitem>
                 <para>Multiple views onto the XML document:
                   <itemizedlist>
                     <listitem>
                       <para>Normal text views. </para>
                     </listitem>
                     <listitem>
                       <para>Tree and/or table and/or nested box views. </para>
                     </listitem>
                     <listitem>
                       <para>Presentation views (e.g. browser views). </para>
                     </listitem>
                     <listitem>
                       <para>DTD and Schema views.</para>
                     </listitem>
                   </itemizedlist>
                 </para>
               </listitem>
               <listitem>
                 <para>
                   Easy element selection with automatic provision of end-tags (Auto-completion).
                 </para>
               </listitem>
               <listitem>
                 <para>
                   Parsing and syntax verification.
                 </para>
               </listitem>
             </itemizedlist>
           </para>
           <para> Free XML editors can be obtained from IBM, Microsoft and other sources.</para>
           <para> Examples of commercial XML editors are: oXygen XML (www.oxygenxml.com), XML Pro (www.vervet.com), 
             XML Authority (www.extensibility.com), XMetaL (www.xmetal.com) and Clip! XML Editor (www.t2000-usa.com).
           </para>
         </section>
         
         <section>
           <title>Browsers</title>
           <para>
             At the time of writing, XML support in various web browsers range from partial to
             excellent. Standards-compliant browsers such as Mozilla (Firefox), Opera and those based
             on the KHTML engine (Safari, Konqueror) tend to provide better support than the Microsoft 
             family of browsers, especially for recent standards such as Transformation and XLink. 
             Most modern browsers, however, do support the basic XML standards plus simple styling (through CSS).
           </para>
         </section>
         
         <section>
           <title>Parsers</title>
           <para> There is a myriad of free parsers available. IBM, Microsoft, Sun and many other
             (e.g. www.jimclark.com) have XML parsers - Many of them are written in Java, which
             means they run on all platforms with a Java Runtime Environment.
             These parsers typically implement one of the two standard APIs: 
             <literal>DOM</literal> or <literal>SAX</literal>.
           </para>
         </section>
       </section>
     </section>
     
     <section>
       <title>Overview of CVS</title>
       
       <xi:include href="../../../../../resources/information/technologies/tools/versionControl/_cvs/overview/history.xdoc" />
       
       <xi:include href="../../../../../resources/information/technologies/tools/versionControl/concepts/lockModifyUnlock.xdoc" />  
       
       <xi:include href="../../../../../resources/information/technologies/tools/versionControl/concepts/copyModifyMerge.xdoc" /> 
       
       <xi:include href="../../../../../resources/information/technologies/tools/versionControl/_cvs/overview/typicalWorkflow.xdoc" />
       
       <xi:include href="../../../../../resources/information/technologies/tools/versionControl/_cvs/overview/coreFeatures.xdoc" />
       
       <xi:include href="../../../../../resources/information/technologies/tools/versionControl/_cvs/overview/obtainingCvs.xdoc" />
       
     </section>       
   </chapter>  
     <!-- Web Services, SubVersion, Servlets, JSPs -->
  
  <xi:include href="../../../../../resources/information/concepts/architecture/referenceArchitectures/referenceArchitectures.xdoc" />
  
<!--  
  <xi:include href="../ooad/patterns/designPatterns.xdoc" />

  <xi:include href="../businessAnalysis/requirementsAnalysis/requirementsAnalysis.xdoc" />  
-->  
  <xi:include href="../../../../../resources/information/concepts/projectManagement/estimation/estimation.xdoc"/>

  <xi:include href="../../../../../resources/information/concepts/developmentProcess/developmentProcesses.xdoc" />
  
  <xi:include href="../../../../../resources/information/bibliography/bibliography.xdoc" />

</book>
