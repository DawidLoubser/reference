<?xml version="1.0" encoding="UTF-8"?>
<article xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      id="projects.solms.training.courses.advancedJava.exams.exam1.exam1">
    
    <articleinfo>
        <title>Examination: Advanced Java</title>
        <subtitle>Competency certification</subtitle>
    </articleinfo>
    
    <abstract>
        <para>
            This paper consists of both theoretical and practical questions. They may be answered using
            any method you are comfortable with. Use any of the technologies discussed in the course
            (<abbrev>e.g.</abbrev> generics, thread pools, locks, ...)
            where you feel that they would be beneficial.
        </para>
        <para>
          If you use one of our machines for practical work,
          please ensure to indicate to the examiner where the answer for each question may be found.
        </para>
    </abstract>
  
  <section>
    <title>OO concepts</title>
    
    <section>
      <title>OO relationships</title>
      <para>
        <orderedlist>
          <listitem><para>
            Explain the implications of association, aggregation, composition, specialization and
            realization relationships and discuss how you map these onto Java. <emphasis>(10 points)</emphasis>      
          </para></listitem>
          <listitem><para>
            Discuss the pros and cons of using interfaces versus using specialization.  
            <emphasis>(4 points)</emphasis>
          </para></listitem>
        </orderedlist>
      </para>
    </section> <!-- Total 14 points -->
    
    <section>
      <title>Design by contract</title>
      <para>
        <orderedlist>
          <listitem><para>
            Explain the concepts of pre- and post-conditions and invariance constraints. 
            <emphasis>(6 points)</emphasis>
          </para></listitem>
          <listitem><para>
            Explain how you would implement your functional (unit) tests and discuss
            interface/contract based testing versus class/implementation based testing.
            <emphasis>(6 points)</emphasis>
          </para></listitem>
        </orderedlist>
      </para>
    </section>
  </section>   <!-- Total 12 points -->
    
    <!-- XML and I/O -->
    <section>
        <title>I/O and Integration</title>
        <section>
            <title>Server</title>
            <para>
                Write a small TCP/IP server application that, upon startup, reads an XML file (indicated by 
                a command-line argument) of products.
            </para>
            <para>
                This products file may look as follows:
                <programlisting><![CDATA[
<products xmlns="http://my.company.com/retail">
    <product price="399.00">
        <name>iPod Wireless FM Transmitter</name>
        <code>235325</code>
    </product>
    <product price="599000.00">
        <name>TVR Tamora (Sports Car, second-hand)</name>
        <code>112314</code>
    </product>
    <product price="4.55">
        <name>Bread (milk excluded)</name>
        <code>996545</code>
    </product>
</products>
                    ]]></programlisting>
                Any client that connects to this server should receive a copy of this products list. Your server should
                be scalable (handle multiple connections simultaneously), and may use either Streaming IO, or New IO (<literal>NIO</literal>)
                to send the file.
                <orderedlist>
                    <listitem>
                        <para>
                            Explain your approach to implementing such a server, and which components 
                            and APIs you would optimally use <emphasis>(5 points)</emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Implement the server<emphasis>(25 points)</emphasis>
                        </para>
                    </listitem>
                  <listitem>
                    <para>
                      Enforce the pre-conditions via exceptions and the post conditions and
                      invariance constraints using assertions. <emphasis>(10 points)</emphasis>
                    </para>
                  </listitem>
                </orderedlist>
            </para>
        </section>
        
        <section>
            <title>Client</title>
            <para>
                Write a small client application, with a graphic user interface of your own choice (e.g. text-based / console, Swing, etc)
                to connect to your server, and receive the list of products. For any given list of products, the client should display
                to the user only the <emphasis>names</emphasis> of the <emphasis>cheapest</emphasis>, and the <emphasis>most expensive</emphasis>, product.
                <orderedlist>
                    <listitem>
                        <para>
                            Implement the client, making use of the XML API of your choice to
                          process the list of products. <emphasis>(18 points)</emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Explain why you chose the XML processing API you did, for the previous question <emphasis>(2 points)</emphasis>.
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </section>   <!-- Total 60 points -->
      
        <section>
            <title>Packaging</title>
            <para>
                Use <emphasis>Apache Ant</emphasis> to package both your client, and your server, in a single <literal>JAR</literal> file for easy
                distribution. You could either package them separately, or both in the same archive. Your ant project should contain targets to
                <emphasis>compile</emphasis>, <emphasis>package</emphasis> and <emphasis>clean</emphasis> (leaving only source) the application.
                <emphasis>(10 points)</emphasis>
            </para>
        </section>   <!-- Total 10 points -->
        
        <section>
            <title>Protocol design</title>
            <para>
                Discuss both the advantages, and the disadvantages, of using your own XML-based protocol (as per the product list
                implementation above) versus using Java's <emphasis>Remote Method Invocation</emphasis> (<literal>RMI</literal>)
                to implement the same system. <emphasis>(4 points)</emphasis>
            </para>
        </section>   <!-- Total 4 points -->
        
    </section>
    
</article>
