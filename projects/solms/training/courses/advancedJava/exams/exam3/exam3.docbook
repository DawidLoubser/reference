<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Competency Examination: Advanced Java</title>
        <subtitle>urn:za:co:solms:exams:java:advanced:004</subtitle>
    </info>
    
    
    <section>
        <title>Theory</title>
        
        <section>
            <title>Generics</title>
            <orderedlist>
                <listitem>
                    <para>
                        Explain in your own words the shortcomings of Java's implementation of generics, but yet why
                        it is still a significant and useful addition to the language.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        
        <section>
            <title>Annotations</title>
            <orderedlist>
                <listitem>
                    <para>
                        Explain how you would go about writing a framework to automatically display objects
                        in a graphical user interface (i.e. without having to hand-code Swing components
                        which manually requests and displays Javabean properties), and how Java annotations
                        could be of assistance.
                        </para>
                </listitem>
            </orderedlist>
        </section>
        
        
        <section>
            <title>Multi-threading in Java</title>
            <orderedlist>
                <listitem>
                    <para>
                        Explain how you would, if having to perform a large number of tasks (such as processing 10,000 files),
                        limit the application to performing only 10 of these tasks concurrently at a time.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        
    </section>
    
    <section>
        <title>Practical</title>
        
        <para>
            In an effort to curb the crime problem in a specific area, a neighborhood watch wishes to publish a free service
            through which residents may register themselves, and thereafter report incidents (to which the neighborhood watch will
            react, such as sending armed gaurds to assist the distressed). A simplistic (and incomplete) contract for the
            service looks as follows:
        </para>
        
        <mediaobject>
            <imageobject >
                <imagedata fileref="contract.png"/>
            </imageobject>
        </mediaobject>
        
        <section>
            <title>Contract Implementation</title>
            <para>
                Implement the above contract in Java (i.e. write the classes and interfaces necessary to express only the contract), 
                adhering to the formal principles of design-by-contract.
            </para>
        </section>
        
        <section>
            <title>Service Provider Implementation</title>
            <para>
                Create an implementation of the <literal>NeighborhoodWatch</literal> contract with Java, ensuring that all pre- and
                post-conditions are met for every service. Client information does not have to be persistently stored, i.e. it is
                acceptable to store them in-memory using the Java collections framework.
            </para>
            <para>
                Use assertions to, in the spirit of design-by-contract, ensure that the inner workings of your implementation
                adhere to your assumptions.
            </para>
        </section>
        
        <section>
            <title>Unit test</title>
            <para>
                Implement the contract in the context of test-driven development: Create one or more JUnit tests which fully tests the 
                behaviour of all the contractual services.
            </para>
        </section>
        
        <section>
            <title>Packaging</title>
            <para>
                Use apache ant (with suitably named build targets) to
                <itemizedlist>
                    <listitem>
                        <para>Compile your code</para>
                    </listitem>
                    <listitem>
                        <para>Produce a JAR file comtaining the NeighborhoodWatch contract and implementation, ready for use
                        by other applications</para>
                    </listitem>
                    <listitem>
                        <para>Find and run all unit tests in the project</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        
    </section>
    

</article>