<?xml version="1.0" encoding="UTF-8"?>
<article xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      id="projects.solms.training.courses.advancedJava.exams.exam1.exam1">
    
    <articleinfo>
        <title>Examination: Advanced Java</title>
        <subtitle>Competency certification</subtitle>
    </articleinfo>
    
    <abstract>
        <para>
            This paper consists of both theoretical and practical questions. They may be answered using
            any method you are comfortable with. Use any of the technologies discussed in the course
            (<abbrev>e.g.</abbrev> generics, thread pools, locks, ...)
            where you feel that they would be beneficial.
        </para>
        <para>
          If you use one of our machines for practical work,
          please ensure to indicate to the examiner where the answer for each question may be found.
        </para>
    </abstract>
  
  <section>
    <title>Theory</title>
    
    <section>
      <title>Object-Oriented (UML) relationships</title>
      <para>
        <orderedlist>
          <listitem><para>
            Discuss the differences in how you would write a class that has a relationship to another class
            via <emphasis>Aggregation</emphasis>, versus <emphasis>Composition</emphasis>. Keep in mind the services
              inherited from <literal>java.lang.Object</literal>.
              <emphasis>(6 points)</emphasis>
          </para></listitem>
          <listitem><para>
            Discuss the advantages and disadvantages of using Specialisation (superclasses) versus
            Realisation (interfaces).
              <emphasis>(4 points)</emphasis>
          </para></listitem>
            <listitem><para>
                Consider the technique of exposing an object through multiple different interfaces: apart from
                the classical example of mutable/immutable views, think of another scenario where this technique
                would make sense, and discuss.
                <emphasis>(2 points)</emphasis>
            </para></listitem>
        </orderedlist>
      </para>
    </section>
    
    <section>
      <title>Design by contract</title>
      <para>
        <orderedlist>
          <listitem><para>
            Explain the three fundamental Java Exception types (<literal>java.lang.Error</literal>, <literal>java.lang.RuntimeException</literal>
              and subclasses of <literal>java.lang.Exception</literal>) and how they relate to the concepts of design-by-contract
              (preconditions, postconditions and invariance constraints).
              <emphasis>(6 points)</emphasis>
          </para></listitem>
        </orderedlist>
      </para>
    </section>
      
      <section>
          <title>NIO</title>
          <para>
              <orderedlist>
                  <listitem><para>
                      If you were to write an image editing application (such as Adobe Photoshop) discuss the advantages 
                      of making use of <literal>java.nio</literal>, and where you could use it.
                      <emphasis>(4 points)</emphasis>
                  </para></listitem>
              </orderedlist>
          </para>
      </section>
  </section>
    
    <!-- XML and I/O -->
    <section>
        <title>Practical</title>
        
        
        <section>
            <title>Compression program</title>
            <para>
                Write a small program that takes one or more command-line arguments, each of which represents
                a file. The program should produce a GZipped version of each of these files, and store it in
                the same location as the original file, but with a <literal>.gz</literal> file extension.
            </para>
            <para>
                The program should produce these compressed files concurrently, up to 3 at a time. Use an executor service
                with a fixed thread pool to accomplish this. The program does not need a graphical user interface, but
                should it should keep the user informed of all activity (using e.g. the standard output stream). 
                [Have a look at <literal>java.util.zip.GZIPOutputStream</literal> for the compression.] 
                <emphasis>(20 points)</emphasis>
            </para>
        </section>
        
        
        <section>
            <title>Mapping OO relationships to Java</title>
            <para>
                Consider a <literal>PlayList</literal>, a data structure which could be used by a media player
                (such as VLC or Windows Media player) to play media. If this were modelled in an interface-driven
                manner, with mutable/immutable views, it could be represented as follows (with some services not
                shown, for brevity):
            </para>
            <figure>
                <title>Contract for a Media PlayList</title>
                <graphic fileref="mediaPlaylist.jpg"/>
            </figure>
            <para>
                A PlayList can contain tracks, specialisations of which are either audio or video tracks. It can also calculate
                the complete duration based on the individual durations of the tracks it contains.
                <itemizedlist>
                    <listitem>
                        <para>Write all 4 interfaces, as well as their 4 mutable specialisations</para>
                    </listitem>
                    <listitem>
                        <para>Write an implementing class for each interface, taking care to correctly
                        map the UML relationships (and expected behaviour).</para>
                    </listitem>
                    <listitem>
                        <para>Discuss (in detail) the simplest approach to put a persistence layer in place,
                        in order to be able to load playlists from, and save to, Schema-driven XML.</para>
                    </listitem>
                </itemizedlist>
                <emphasis>(20 points)</emphasis>
            </para>
        </section>
        
    </section>
    
</article>
