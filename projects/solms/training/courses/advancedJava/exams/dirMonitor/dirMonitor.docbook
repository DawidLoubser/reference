<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Competency Examination: Advanced Java</title>
        <subtitle>urn:za:co:solms:exams:java:advanced:003</subtitle>
    </info>
    
    
    <section>
        <title>Theory</title>
        
        <section>
            <title>Annotations</title>
            <orderedlist>
                <listitem>
                    <para>
                        Explain in your own words the significance of the introduction of <emphasis>Annotations</emphasis>
                        in Java 5.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Think of two innovative uses of Java annotations, and briefly explain how you see it being used.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        
        
        <section>
            <title>Test-driven development</title>
            <orderedlist>
                <listitem>
                    <para>
                        Explain test-driven development in your own words.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        How would you justify the initial time and cost overhead of putting unit tests in place (which
                        could easily increase the time spent on initial coding by 50% or more).
                    </para>
                </listitem>
            </orderedlist>
        </section>
        
    </section>
    
    <section>
        <title>Practical</title>
        
        <para>
            Imagine a highly simplified search engine / monitoring service, which allows the user to register <quote>alerts</quote>
            on a particular directory, in order to be notified when a file containing certain keywords are found.
        </para>
        <para>
            The contract for this service provider offers services to start/stop monitoring a directory for files containing certain keywords,
            as well as registering clients in order to have them receive events as and when matching files are found. This service must continually run,
            i.e. if a new file (with sought-after keywords) is placed in a directory being monitored, clients should receive an event indicating this
            within a reasonable time frame.
        </para>
        
        <mediaobject>
            <imageobject >
                <imagedata fileref="monitoringContract.jpg" width="450"/>
            </imageobject>
        </mediaobject>
        
        <section>
            <title>Contract Implementation</title>
            <para>
                Implement the above contract in Java (i.e. write the classes and interfaces necessary to express only the contract), 
                adhering to the formal principles of design-by-contract.
            </para>
        </section>
        
        <section>
            <title>Service Provider Implementation</title>
            <para>
                Create an implementation of the <literal>DirectoryMonitor</literal> contract with Java, ensuring that all pre- and
                post-conditions are met. Any mechanism may be used for examining the files (keeping in mind the potential performance
                benefits of using Java NIO together with regular expressions). 
            </para>
            <para>
                In order to continually scan each directory (and to do so concurrently for multiple directories being monitored) the multi-threading 
                facilities of Java would need to be used. The implementor may choose between traditional threading features or the Java 5 Concurrency
                framework.
            </para>
            <para>
                The implementation should be implemented in a test-driven manner, in order to allow for the functionality to be verified in an
                automatable and repeatable manner.
            </para>
            <para>
                Apache Ant must be used to manage the deliverable and tasks around the project.
            </para>
        </section>
        
        <section>
            <title>Simplistic application client</title>
            <para>
                In as simple a manner as possible, write a small Java application which takes command-line arguments regarding
                a directory to be monitored, and the keywords which must be searched for. It must use the components built in the previous
                section to then 
                
                <itemizedlist>
                    <listitem>
                        <para>monitor the requested directory for files containing the given keywords, and</para>
                    </listitem>
                    <listitem>
                        <para>notify the user continually as such files appear in the directory (either graphically, or on the text console).</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                The app does not require the functionality to register multiple monitoring tasks, cancel tasks, or exit gracefully
                (CTRL+C will suffice).
            </para>
        </section>
        
    </section>
    

</article>