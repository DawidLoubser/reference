<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--
    @course Programming in Java
    @relativeDifficulty Medium
    @author Fritz Solms, Dawid Loubser
-->

<article xmlns="http://docbook.org/ns/docbook" 
      xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Examination: Programming in Java</title>
    <subtitle>Word counter</subtitle>
    
    <!-- section>
        <title>Theory</title>
        <para>
            Explain the differences between <emphasis>subclassing</emphasis> and 
            <emphasis>implementing interface</emphasis>s, and discuss the advantages 
            (and rationale) of each approach.
        </para>
        <para>
            <literal>(20 points)</literal>
        </para>
    </section -->
    
    <section>
        <title>Practical</title>
        <para>
            Write an application which reads in a text file, counts the number of occurrences 
            of each word, and writes a new text file containing each word found in the original text file 
            on a separate line, with the number of occurrences shown next to the word. The words 
            in the resulting text file should be ordered alphabetically. For example, the output may 
            look like:
            <programlisting><![CDATA[
a 432 
apple 8 
an 189 
... 
zombie 2 
zone 7 
            ]]></programlisting>
        </para>
        <para>
            The application must have a Swing Graphical User Interface (<abbrev>GUI</abbrev>), with 
            two text fields to specify the input and output files. Each text field should have
            a <quote>Choose</quote> button next to it, to select input and output files.
        </para>
        <para>
            Important aspects to keep in mind:
            <itemizedlist>
                <listitem>
                    <formalpara>
                        <title>Responsibility Localisation</title>
                        <para>
                            Each class should have a single responsibility - your solution should
                            consist of several classes. Introduce interfaces (contracts) 
                            where it seems necessary.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Use existing components</title>
                        <para>
                            Several classes in the Java Standard Edition API could assist you:
                            <literal>BufferedReader</literal>, <literal>String.split(...)</literal>, 
                            <literal>SortedMap</literal>, <literal>JFileChooser</literal>, <literal>JOptionPane</literal>
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <para>
                        Remember to use the JavaDoc API documentation!
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <!-- para>
            Marks will be allocated for:
            <itemizedlist>
                <listitem>
                    <formalpara>
                        <title>Compilation and Successful Execution of tasks</title>
                        <para>30 points</para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>General Design / Responsibility Localisation</title>
                        <para>40 points</para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Code style and documentation (comments)</title>
                        <para>10 points</para>
                    </formalpara>
                </listitem>
            </itemizedlist>
            <literal>(80 points)</literal>
        </para -->
    </section>
</article>
