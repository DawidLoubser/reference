<!-- Converted by db4-upgrade version 1.0 -->
<article xmlns="http://docbook.org/ns/docbook"
    version="5.0"
    xml:id="projects.solms.training.courses.java.exams.wordCounter.wordCounter">

    <info>
        <title>Examination: Programming in Java</title>
        <subtitle>Scriptogram</subtitle>


        <author>
            <personname>
                <firstname>Dawid</firstname>
                <surname>Loubser</surname>
            </personname>
            <email>dawidl@solms.co.za</email>
        </author>
        <date>January 26, </date>
    </info>


    <section>
        <info>
            <title>General Theory</title>
        </info>

        <para>
            <orderedlist>
                <listitem>
                    <para> Explain the differences between <emphasis>subclassing</emphasis> and
                            <emphasis>implementing interface</emphasis>s, and discuss the advantages
                        (and rationale) of each approach. </para>
                </listitem>
                <listitem>
                    <para> Explain (in detail) what would be involved - from a developer's point of
                        view - to maintain a <literal>java.util.Set</literal> of instances of a
                        class <literal>Client</literal>, that is both <emphasis>unique</emphasis>
                        (no duplicates), as well as <emphasis>maintained in sorted order</emphasis>
                        (sorted by the client's surname). </para>
                </listitem>
            </orderedlist>
        </para>
    </section>

    <section>
        <info>
            <title>Practical</title>
        </info>


        <section>
            <info>
                <title>Scenario</title>
            </info>


            <para> Consider the popular word game <emphasis>Scriptogram</emphasis>, in which a
                number of cubes with alphabetical letters on each face are shuffled, and poured out
                onto a table. Each player must, within an allocated time, form as many english words
                as he or she can from the letters visible on the table. </para>
            <para> For a given round, each player's score is calculated by examining the letters of
                each word the player wrote down, and allocating a per-letter score. The following
                table indicates the score for each letter: </para>

            <figure>
                <info>
                    <title>Scritogram</title>
                </info>

                <mediaobject>
                    <imageobject>
                        <imagedata fileref="scriptoGram.jpg" align="center"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <table>
                <title>Letter-Score Allocation</title>
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>
                                <para>a = 1</para>
                            </entry>
                            <entry>
                                <para>b = 4</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>c = 4</para>
                            </entry>
                            <entry>
                                <para>d = 3</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>e = 1</para>
                            </entry>
                            <entry>
                                <para>f = 4</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>g = 4</para>
                            </entry>
                            <entry>
                                <para>h = 3</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>i = 2</para>
                            </entry>
                            <entry>
                                <para>j = 6</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>k = 5</para>
                            </entry>
                            <entry>
                                <para>l = 2</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>m = 3</para>
                            </entry>
                            <entry>
                                <para>n = 2</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>o = 1</para>
                            </entry>
                            <entry>
                                <para>p = 4</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>q = 8</para>
                            </entry>
                            <entry>
                                <para>r = 2</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>s = 2</para>
                            </entry>
                            <entry>
                                <para>t = 2</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>u = 3</para>
                            </entry>
                            <entry>
                                <para>v = 4</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>w = 4</para>
                            </entry>
                            <entry>
                                <para>x = 8</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>y = 4</para>
                            </entry>
                            <entry>
                                <para>z = 10</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para> Manually calculating the scores for each player in a fast-paced game is tedious
                and time-consuming, and a small Java application is needed to assist in this regard.
                The publisher, <emphasis>Jumbo Entertainment</emphasis>, would like to bundle this
                small application with the game (in exchange for vast amounts of money paid to you,
                the developer, of course). </para>
        </section>


        <section>
            <info>
                <title>Questions</title>
            </info>


            <section>
                <info>
                    <title>Theory</title>
                </info>

                <para> Describe, in your own words, <emphasis>two</emphasis> reasons why it would
                    make sense to develop this program in Java (versus in a language such as C++ or
                    Visual Basic). </para>
            </section>

            <section>
                <info>
                    <title>Practical</title>
                </info>

                <para> Version 0.1 of the software does not require full gameplay and score
                    management, but merely a small utility to obtain the score for a given word. <orderedlist>
                        <listitem>
                            <para> Write an interface called <literal>ScoreCounter</literal>, which
                                specifies a single service to compute the score for a given word:
                                <programlisting>
public int getScore( String word );
</programlisting>
                                This is an unconditional service - there are no preconditions (i.e.
                                declared exceptions). All characters not specified in the above
                                table simply receive a score of zero. </para>
                        </listitem>
                        <listitem>
                            <para> Write a class that implements the <literal>ScoreCounter</literal>
                                contract. The table of score allocations for each letter should not
                                be hard-coded, <emphasis>but must be read from an external
                                file</emphasis>. Any I/O facility may be used for this. A simple way
                                may be to use a <literal>java.util.Properties</literal>, which reads
                                a text file placed in the classpath. A stream to this file can
                                easily be opened by making use of the service
                                    <literal>MyScoreCounter.getClass().getClassLoader().getResourceAsStream(...)</literal>.
                                Alternatively, normal <literal>FileInputStream</literal> could be
                                used. </para>
                        </listitem>
                        <listitem>
                            <para> Write a small command-line (text-based) application that
                                interfaces between the user, and your
                                <literal>ScoreCounter</literal> implementation. Every time a word is
                                typed in (and ENTER pressed), the corresponding score must be
                                displayed. When an empty line is entered, the application exits.
                            </para>
                        </listitem>
                        <listitem>
                            <para> Write a small Graphical User Interface (using Swing) with a
                                single input field for a word. After entering a word, and pressing a
                                button or hitting ENTER, the score should be displayed, and the GUI
                                should be ready to accept input of a new word. </para>
                        </listitem>
                    </orderedlist>
                </para>
                <figure>
                    <info>
                        <title>Expectation of the application GUI</title>
                    </info>

                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="simpleGui.jpg" align="center" scale="50"/>
                        </imageobject>
                    </mediaobject>
                </figure>
                <para> Important considerations throughout this exam are: <itemizedlist>
                        <listitem>
                            <para>Compilation and Successful Execution of tasks</para>
                        </listitem>
                        <listitem>
                            <para>General Design / Responsibility Localisation, and decoupling
                                through interfaces</para>
                        </listitem>
                        <listitem>
                            <para>Code style and documentation (comments)</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <note>
                    <para> Theoretical questions may be answered either on paper, or electronically.
                        When you are done, please ensure that the examiner receives, or knows the
                        location of, a ZIP file containing your practical code, as well as your
                        theory answers. </para>
                    <para> To ZIP a directory on the unix command line, simply use the
                        <literal>zip</literal> program as follows:
                        <programlisting>
zip -r zipFileToCreate.zip directoryToZip
                         </programlisting>
                    </para>
                </note>
            </section>
        </section>
    </section>
</article>
