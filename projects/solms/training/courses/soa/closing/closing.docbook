<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">


    <title>Synopsis and closing</title>
    

    <section>
        <title>Alternatives to the typical SOA infrastructure</title>
        <indexterm>
            <primary>SOA</primary>
            <secondary>alternatives</secondary>
        </indexterm>
        <para>
            The traditional definition of SOA usually implies an infrastructure that incorporates
            mediated message exchange via an Enterprise Services Bus (ESB). However, a number of
            other standards and approaches exist which would allow the construction of a solution which could easily
            also be called a Services-Oriented solution (but without the ESB):
        </para>
        
        <xi:include href="../../../../../../resources/information/technologies/soa/sca/sca.docbook"/>
        <xi:include href="../../../../../../resources/information/technologies/java/jini/jini.docbook"/>
        
    </section>
    
    
    <section>
        <title>Criticism of current JBI technologies</title>
        <!-- TODO: Move to JBI section -->
        
        <section>
            <title>Trading off technical complexity against vendor lock-in</title>
            <indexterm>
                <primary>vendor lock-in</primary>
            </indexterm>
            <para>
                For practical purposes, most JBI-based development require the developer to either
                <itemizedlist>
                    <listitem>
                        <para>use low-level, vendor-neutral tool sets such as Apache Maven, together with a high degree of technical skill
                            to configure composite integration assemblies by hand - and often brittle and error-prone task, or
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            lock into vendor tools that allow for graphical and wizard-driven construction of composite assemblies,
                            relying on the tool to generate the numerous configuration artifacts which likely lock the developer
                            into a particular ESB as well.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        
        <section>
            <title>Centralisation</title>
            <indexterm>
                <primary>Jini</primary>
            </indexterm>
            <indexterm>
                <primary>Rio</primary>
            </indexterm>
            <indexterm>
                <primary>cloud computing</primary>
            </indexterm>
            <para>
                Though several particular implementations of JBI-based ESBs can be federated or clustered across multiple machines,
                the ESB is still an inherently centralised infrastructure. If the Normalised Message Router ceases to function correctly,
                services will typically no longer be able to communicate with one another.
            </para>
            <para>
                Certain approaches like Jini are inherently decentralised, with services discovering one another and forming spontaneous
                peer-to-peer networks. Together with an infrastructure like Rio for service provisioning and management, it represents
                an altogether more flexible and potentially more reliable infrastructure, in the spirit of <quote>cloud computing</quote>.
            </para>
        </section>
        
        <section>
            <title>Java-only</title>
            <para>
                The JBI API caters only for ESB implementations written in the Java programming language. This is usually not a practical problem,
                as JBI service units accepts service units written in a very wide variety of technologies, and Java itself is cross-platform.
            </para>
        </section>
        
    </section>


    <section>
        <title>Anticipated future developments</title>
        
        <indexterm>
            <primary>SOA</primary>
            <secondary>future development</secondary>
            <tertiary>anticipated</tertiary>
        </indexterm>
        
        <section>
            <title>Standardisation of SOA infrastructure</title>
            <para>
                It is expected that the current <quote>competition</quote> between several standards (JBI, SCA, OSGi, perhaps even Jini/Rio) 
                will settle. Instead of one of these technologies claiming the prize of ultimate standard, an approach
                such as the Eclipse Swordfish platform may in fact combine many of them into one runtime environment,
                with each technology finding its niche in contributing to the whole.
            </para>
        </section>
        
        <section>
            <title>Maturation of tools</title>
            <para>
                Most SOA tools still require large amounts of work to be usable by developers with weaker technical
                skills. Current toolkits seem to either <emphasis>expose too many</emphasis>, or <emphasis>hide too many</emphasis>
                of the technicalities/control of a JBI project.
            </para>
        </section>
        
        <section>
            <title>Entrenchment of practical Model-Driven development</title>
            <indexterm>
                <primary>model-driven development</primary>
            </indexterm>
            <indexterm>
                <primary>URDAD</primary>
            </indexterm>
            <para>
                Working in many ways against the goal of maturing the SOA tools, the process of Model-Driven Development
                will ultimately involve generating all code artifacts (static and dynamic aspects) from a Plaform-Independent
                model (PIM), such as an URDAD-compliant UML model.
            </para>
            <para>
                Once the necessary transformation are in place to generate all SOA artifacts from a PIM, maintainability / ease of use will
                no longer be a strong factor in the selection of the implementation technology for an SOA service.
            </para>
        </section>
        
        <section>
            <title>Adoption of semantic technologies</title>
            <indexterm>
                <primary>semantic web</primary>
            </indexterm>
            <indexterm>
                <primary>RDF</primary>
            </indexterm>
            <para>
                As SOA continues to show that any attempts at standardising the functional aspects of a service (service interface, exchanged value objects)
                between different clients are futile, more and more adaptors will be built to absorb different client requirements. Using semantic
                technologies (RDF/OWL) to represent information - first internally, stored in the database to flexibly cater for all client needs, and later
                externally as exchanged value objects - will free clients and services from the burden of representing all information in rigid class structures.
                We will instead by able to rely on meaningful semantic descriptions of information.
            </para>
            <para>
                RDF, which represents information as graphs of statements, much more accurately enables business context-specific information to be added to
                continuously-growing knowledge repositories, and for use cases to evolve in unexpected ways without having to require that technical experts put
                representations for all possible scenarios in place in the form of the rigid little boxes that we call classes and interfaces.
            </para>
        </section>
        
    </section>


</chapter>
