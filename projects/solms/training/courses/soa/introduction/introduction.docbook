<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Introduction</title>
    <section>
        <title>The Context of this course</title>
        <para>
            The current technology landscape finds itself in a rather precarious position: 
            There has hardly ever been a time of greater technological diversity within our 
            systems. While the support for public standards (on all fronts, such as network and
            messaging protocols, component models, handling of security and transactions, etc) is 
            very strong, different systems exist to satisfy different stakeholder requirements; and
            thus continue to be built in isolation using different implementation technologies.
        </para>
        <para>
            Furthermore, almost all attempts to standardise the functional aspects of systems 
            (and by this, we mean the structure of stored / exchanged data, and the nature of the services provided by the system) 
            have proven to be futile, and rightly so: Different stakeholders within (our outside of) the organisation require 
            different services.
        </para>
        <para>
            In this complex and non-standardised environment, we need to be able to integrate and orchestrate different
            systems. The aim of this course, is to illustrate how SOA (Services-Oriented Architecture) provides
            a compelling solution to these problems. When it comes to SOA technologies and middleware, we feel that it is
            especially important to stick to public standards, to avoid vendor lock-in in terms of tools and infrastructure
            (one of the core risks of SOA). Unfortunately, this means that we often forgo the luxury of all-in-one (often
            graphical) toolkits, having to often delve deeper to understand what really happens. The positive side of this
            situation is that we believe the material covered in this course will be valuable, both theoretically and
            practically, regardless of the ultimate SOA technology solution chosen by the candidate.
        </para>
        <para>
            We promote a Model-Driven systems development process (as per the URDAD methodology) where the business
            analyst models the solution to a problem domain completely (across all levels of granularity) in a technology-neutral
            manner, which is subsequently <emphasis>mapped</emphasis> to a particular implementation domain. Parts of the
            solution may be mapped to systems, and parts may be mapped to humans.
        </para>
    </section>
    <section>
        <title>Target audience</title>
        <para>
            This course is targeted at developers who are tasked with the implementation of an SOA-based
            solution. In addition to covering the most important technologies to realise this goal, we also
            assist the developer in mapping a URDAD/UML-based design to common SOA technologies.
        </para>
        <para>
            Though many of the abstract SOA technologies and concepts are not associated with any particular programming 
            language or software framework, this course promotes Java-based implementations of both the SOA
            frameworks as a whole (via standards such as JBI) as well as individual business-logic components
            (via standards such as EJB and JAX-WS). Java is thus favoured for the places where we require an imperative
            programming language.
        </para>
    </section>
</chapter>
