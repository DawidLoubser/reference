% This file was created with JabRef 2.6.
% Encoding: UTF-8

@MISC{w3c:wsPolicy,
  author = {Don Box Dave Chappell Francisco Curbera {et al. {Siddharth Bajaj}}},
  title = {{Web Services Policy 1.2 - Framework}},
  howpublished = {http://www.w3.org/Submission/WS-Policy/}
}

@INPROCEEDINGS{vanRooyen_1995:MaxEntOfInterUserInterference,
  author = {P. vanRooyen and F. Solms},
  title = {Maximum entropy investigation of the inter user interference distribution
	in a DS/SSMA system},
  booktitle = {Personal, Indoor and Mobile Radio Communications, 1995. PIMRC'95.
	'Wireless: Merging onto the Information Superhighway'., Sixth IEEE
	International Symposium on},
  year = {1995},
  volume = {3},
  pages = {1308--},
  month = {Sep},
  comment = {A collaboration between Applied Maths and Engineering at Johannesburg
	University.},
  doi = {10.1109/PIMRC.1995.477374},
  keywords = {Gaussian assumption, Gaussian distribution, Gaussian processes, Nakagami-m
	distribution, Nakagami-m faded channel, direct sequence spread spectrum
	multiple access, discrimination information, equal second moments,
	fading, interuser interference distribution, maximum entropy method,
	maximum entropy methods, multi-access systems, probability density
	function, pseudonoise codes, radiofrequency interference, relative
	entropy, spread spectrum communicationDS/SSMA system}
}

@INPROCEEDINGS{abrahamsson:extremeProgrammingEmpiricalStudy,
  author = {P. Abrahamsson and J. Koskela},
  title = {Extreme programming: a survey of empirical data from a controlled
	case study},
  booktitle = {Empirical Software Engineering, 2004. ISESE '04. Proceedings. 2004
	International Symposium on},
  year = {2004},
  pages = { 73--82},
  month = {Aug.},
  abstract = { Extreme programming (XP) is a well known agile software development
	method. While a number of experience reports have been published
	in recent years, agile software development in general and XP in
	particular have strongly been criticized for the lack of empirical
	data. This paper reports a survey of the empirical data obtained
	from a controlled case study on extreme programming in practical
	settings. Thus, no hypotheses were set a priori. Four software engineers
	were acquired to implement a Web-based system (7698 Locs, 820 hours)
	for data management in a delivery schedule of eight weeks. Development
	environment was close to the agile home ground. Collected empirical
	data is grounded on three basic data points: time, size and defects.
	Data is organized around five system releases, each which were tested
	by 17 customer testers. System release defect-density was 1.43 defects/KLOC,
	team overall productivity 16.90 Locs/hour and rework costs were 9.8%
	of the total development effort. The implications of this study are
	discussed.},
  doi = {10.1109/ISESE.2004.1334895},
  issn = { },
  keywords = { productivity, software engineering Web-based system, agile home ground,
	agile software development, customer testers, data management, delivery
	schedule, development environment, extreme programming, system release
	defect-density, team overall productivity}
}

@INPROCEEDINGS{abrahamsson_2003:newDirectionsInAgileMethods,
  author = {Pekka Abrahamsson and Juhani Warsta and Mikko T. Siponen and Jussi
	Ronkainen},
  title = {New directions on agile methods: a comparative analysis},
  booktitle = {ICSE '03: Proceedings of the 25th International Conference on Software
	Engineering},
  year = {2003},
  pages = {244--254},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  isbn = {0-7695-1877-X},
  location = {Portland, Oregon}
}

@ARTICLE{aizenbud-reshef:modelTraceability,
  author = {Netta Aizenbud-Reshef and Brian T. Nolan and Julia Rubin and Yael
	Shaham-Garifi},
  title = {Model traceability},
  journal = {{IBM} Systems Journal},
  year = {2006},
  volume = {45},
  pages = {515--526},
  number = {3}
}

@BOOK{Allison:aPracticalIntroductionToDenotionalSemantics,
  title = {A Practical Introduction to Denotational Semantics},
  publisher = {Cambridge University Press},
  year = {1987},
  author = {L. Allison}
}

@INPROCEEDINGS{alsharif_2004:complexityOfSoftwareArchitectures,
  author = {Mohsen AlSharif and Walter P. Bond and Turky Al-Otaiby},
  title = {Assessing the complexity of software architecture},
  booktitle = {ACM-SE 42: Proceedings of the 42nd annual Southeast regional conference},
  year = {2004},
  pages = {98--103},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/986537.986562},
  isbn = {1-58113-870-9},
  location = {Huntsville, Alabama}
}

@TECHREPORT{artus:soaRealization,
  author = {David J.N. Artus},
  title = {{SOA} realization: Service design principles},
  institution = {IBM},
  year = {2006},
  month = {February},
  publication = {Developer Works}
}

@BOOK{avison_1988:informationSystemsDevelopment,
  title = {Information System Development: Methodologies, Techniques and Tools},
  publisher = {Blackwell Scientific Publications},
  year = {1988},
  author = {D. E. Avison and G. Fitzgerald},
  address = {Oxford, UK}
}

@BOOK{bass:softwareArchitecture,
  title = {Software Architecture in Practice, Second Edition},
  publisher = {Addison-Wesley Professional},
  year = {2003},
  author = {Len Bass and Paul Clements and Rick Kazman},
  month = {April}
}

@BOOK{beck:extremeProgrammingExplained2,
  title = {Extreme Programming Explained},
  publisher = {Addison-Wesley Professional},
  year = {2004},
  author = {Kent Beck and Cynthia Andres},
  edition = {second}
}

@MISC{agileManifesto,
  author = {Kent Beck and Martin Fowler and Robert C. Martin and others},
  title = {The agile manifesto},
  howpublished = {http://agilemanifesto.org/},
  year = {2001},
  url = {http://agilemanifesto.org/}
}

@INPROCEEDINGS{hakim_2008:automatedTests,
  author = {Hakim Belhaouari and Frederic Peschanski},
  title = {Automated Generation of Test Cases from Contract-Oriented Specifications:
	A CSP-Based Approach},
  booktitle = {HASE '08: Proceedings of the 2008 11th IEEE High Assurance Systems
	Engineering Symposium},
  year = {2008},
  pages = {219--228},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/HASE.2008.15},
  isbn = {978-0-7695-3482-4}
}

@ARTICLE{ben-abdallah:umlFrameworkDesign,
  author = {Hanene Ben-Abdallah and Nadia Bouassida and Faiez Gargouri and Abdelmajid
	Ben-Hamadou},
  title = {A {UML} Based Framework Design Method},
  journal = {Journal of Object Technology},
  year = {2004},
  volume = {3},
  pages = {97--119},
  number = {8},
  month = {September/October}
}

@TECHREPORT{berard:whatIsMethodology,
  author = {Edward V. Berard},
  title = {What Is a Methodology?},
  institution = {The Object Agency},
  year = {1995},
  type = {White paper}
}

@INPROCEEDINGS{bercovici:businessArchitectureToSoa,
  author = {Avivit Bercovici and Fabiana Fournier and Alan J. Wecke},
  title = {From Business Architecture to SOA Realization Using MDD},
  booktitle = { Lecture Notes in Computer Science},
  year = {2008},
  pages = {381--392},
  month = {June},
  publisher = {Springer Berlin}
}

@ARTICLE{berenbach:evaluationOfLargeComplexUmlAnalysisAndDesignModels,
  author = {Brian Berenbach},
  title = {The Evaluation of Large, Complex UML Analysis and Design Models},
  journal = {Proceedings of the 26'th International Conference on Software Engineering},
  year = {2004},
  volume = {??},
  pages = {??},
  number = {??}
}

@ARTICLE{black-etAl:formalVersusAgile,
  author = {Sue Black and Paul P. Boca and Jonathan P. Bowen and Jason Gorman
	and Mike Hinchey},
  title = {Formal Versus Agile: Survival of the Fittest},
  journal = {Computer},
  year = {2009},
  volume = {42},
  pages = {37--45},
  number = {9},
  month = {Sept. },
  abstract = {The potential for combining agile and formal methods holds promise.
	Although it might not always be an easy partnership, it will succeed
	if it can foster a fruitful interchange of expertise between the
	two communities.},
  doi = {10.1109/MC.2009.284},
  issn = {0018-9162}
}

@ARTICLE{booch_2008:measuringArchitecturalComplexity,
  author = {Grady Booch},
  title = {Measuring Architectural Complexity},
  journal = {IEEE Softw.},
  year = {2008},
  volume = {25},
  pages = {14--15},
  number = {4},
  address = {Los Alamitos, CA, USA},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/MS.2008.91},
  issn = {0740-7459},
  publisher = {IEEE Computer Society Press}
}

@INPROCEEDINGS{braek:modelDrivenServiceEngineering,
  author = {Rolv Braek and Geir Melby},
  title = {Model-Driven Service Engineering},
  booktitle = {Model-Driven Software Development},
  year = {2005},
  pages = {385--401},
  publisher = {Springer Verlag}
}

@ARTICLE{Briand:investigationOfFormalityInUmlBaedDevelopment,
  author = {L.C. Briand and Y. Labiche and M. {Di Penta} and H. Yan-Bondoc},
  title = {An experimental investigation of formality in UML-based development},
  journal = {Software Engineering, IEEE Transactions on},
  year = {2005},
  volume = {31},
  pages = { 833--849},
  number = {10},
  month = {Oct.},
  abstract = { The object constraint language (OCL) was introduced as part of the
	Unified Modeling Language (UML). Its main purpose is to make UML
	models more precise and unambiguous by providing a constraint language
	describing constraints that the UML diagrams alone do not convey,
	including class invariants, operation contracts, and statechart guard
	conditions. There is an ongoing debate regarding the usefulness of
	using OCL in UML-based development, questioning whether the additional
	effort and formality is worth the benefit. It is argued that natural
	language may be sufficient, and using OCL may not bring any tangible
	benefits. This debate is in fact similar to the discussion about
	the effectiveness of formal methods in software engineering, but
	in a much more specific context. This paper presents the results
	of two controlled experiments that investigate the impact of using
	OCL on three software engineering activities using UML analysis models:
	detection of model defects through inspections, comprehension of
	the system logic and functionality, and impact analysis of changes.
	The results show that, once past an initial learning curve, significant
	benefits can be obtained by using OCL in combination with UML analysis
	diagrams to form a precise UML analysis model. But, this result is
	however conditioned on providing substantial, thorough training to
	the experiment participants.},
  doi = {10.1109/TSE.2005.105},
  issn = {0098-5589},
  keywords = { Unified Modeling Language, constraint handling, formal specification,
	formal verification, natural languages, object-oriented languages,
	object-oriented programming UML analysis model, UML-based development,
	Unified Modeling Language, object constraint language, statechart
	guard condition, system functionality, system logic}
}

@ARTICLE{brooks_1987:noSilverBullet,
  author = {F. Brooks},
  title = {No silver bullet: Essence and accidents in software engineering},
  journal = {IEEE Computer},
  year = {1987},
  volume = {20},
  pages = {10--19},
  number = {4}
}

@INPROCEEDINGS{cardei:ModelBasedRequirementsSpecificationAndValidationForComponentArchitectures,
  author = {I. Cardei and M. Fonoage and R. Shankar},
  title = {Model Based Requirements Specification and Validation for Component
	Architectures},
  booktitle = {Systems Conference, 2008 2nd Annual IEEE},
  year = {2008},
  pages = {1--8},
  month = {April},
  abstract = {Requirements specification is a major component of the system development
	cycle. Mistakes and omissions in requirements documents lead to ambiguous
	or wrong interpretation by engineers and, in turn, cause errors that
	trickle down in design and implementation with consequences on the
	overall development cost. In this paper we describe a methodology
	for requirements specification that aims to alleviate the above issues
	and that produces models for functional requirements that can be
	automatically validated for completeness and consistency. This methodology
	is part of the Requirements Driven Design Automation framework (RDDA)
	that we develop for component-based system development. The RDDA
	framework uses an ontology-based language for semantic description
	of functional product requirements, UM- L/SysML structure diagrams,
	component constraints, and Quality of Service. The front end method
	for requirements specification is the SysML editor in Rhapsody. A
	requirements model in OWL is converted from SysML XMI representation.
	The specification is validated for completeness and consistency with
	a ruled-based system implemented in Prolog. With our methodology,
	omissions and several types of consistency errors present in the
	requirements specification are detected early on, before the design
	stage.},
  doi = {10.1109/SYSTEMS.2008.4519001},
  keywords = {Unified Modeling Language, formal specification, knowledge based systems,
	object-oriented programming, ontologies (artificial intelligence),
	quality of service, systems analysisOWL, Prolog, SysML XMI representation,
	UML/SysML structure diagrams, component architectures, component-based
	system development, functional requirements, model based requirements
	specification, model based requirements validation, ontology-based
	language, quality of service, requirements driven design automation,
	ruled-based system, system development cycle}
}

@INPROCEEDINGS{choi_2008:qualityModelForEvaluatingReusabilityOfServices,
  author = {Si Won Choi and Soo Dong Kim},
  title = {A Quality Model for Evaluating Reusability of Services in SOA},
  booktitle = {CECANDEEE '08: Proceedings of the 2008 10th IEEE Conference on E-Commerce
	Technology and the Fifth IEEE Conference on Enterprise Computing,
	E-Commerce and E-Services},
  year = {2008},
  pages = {293--298},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/CECandEEE.2008.134},
  isbn = {978-0-7695-3340-7}
}

@INPROCEEDINGS{wang_2008:componentOrientedDevelopmentApproachToEbusinessApplications,
  author = {Wang Chu and Depei Qian},
  title = {A Component-Oriented Development Approach to E-Business Applications},
  booktitle = {ICEBE '08: Proceedings of the 2008 IEEE International Conference
	on e-Business Engineering},
  year = {2008},
  pages = {45--52},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ICEBE.2008.23},
  isbn = {978-0-7695-3395-7}
}

@INPROCEEDINGS{coram_2005:impactOfAgileMethodsOnProjectManagement,
  author = {Michael Coram and Shawn Bohner},
  title = {The Impact of Agile Methods on Software Project Management},
  booktitle = {ECBS '05: Proceedings of the 12th IEEE International Conference and
	Workshops on Engineering of Computer-Based Systems},
  year = {2005},
  pages = {363--370},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ECBS.2005.68},
  isbn = {0-7695-2308-0}
}

@ARTICLE{counsell_2006:cohesionMetrics,
  author = {Steve Counsell and Stephen Swift and Jason Crampton},
  title = {The interpretation and utility of three cohesion metrics for object-oriented
	design},
  journal = {ACM Trans. Softw. Eng. Methodol.},
  year = {2006},
  volume = {15},
  pages = {123--149},
  number = {2},
  address = {New York, NY, USA},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1131421.1131422},
  issn = {1049-331X},
  publisher = {ACM}
}

@BOOK{demarco:structuredAnalysis,
  title = {Structured Analysis and System Specification},
  publisher = {Yourdon Press},
  year = {1979},
  author = {Tom DeMarco}
}

@ARTICLE{dick_2005:designTraceability,
  author = {Jeremy Dick},
  title = {Design traceability},
  journal = {Software, IEEE},
  year = {2005},
  volume = {22},
  pages = { 14--16},
  number = {6},
  month = {Nov.-Dec.},
  abstract = { Traceability is about documenting the relationships between layers
	of information, for instance, between system requirements and software
	design. Many software development tools manage design relationships,
	for instance, between modeling elements (such as classes) and source
	code, or between tasks and source code files. Whatever development
	scale we engage in, we systematically apply information traceability.
	It's a vehicle for thinking about the way the software meets its
	requirements; it captures design rationale to help others understand
	and review; and it gives us far greater confidence in managing future
	changes.},
  doi = {10.1109/MS.2005.150},
  issn = {0740-7459},
  keywords = { formal specification, formal verification, systems analysis design
	traceability, information traceability, software design, software
	development tools, source code, system requirements engineering}
}

@BOOK{erl:soa,
  title = {Service-Oriented Architecture (SOA): Concepts, Technology, and Design},
  publisher = {Prentice Hall PTRs},
  year = {2005},
  author = {Thomas Erl},
  month = {August}
}

@ARTICLE{Manso_2009:empiricalValidationOfMeasuresForUmlClassDiagrams,
  author = {M. {Esperanza Manso} and Jos{\'e} A. Cruz-Lemus and Marcela Genero
	and Mario Piattini},
  title = {Empirical Validation of Measures for UML Class Diagrams: A Meta-Analysis
	Study},
  year = {2009},
  pages = {303--313},
  address = {Berlin, Heidelberg},
  book = {Models in Software Engineering: Workshops and Symposia at MODELS 2008,
	Toulouse, France, September 28 - October 3, 2008. Reports and Revised
	Selected Papers},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1007/978-3-642-01648-6_32},
  isbn = {978-3-642-01647-9},
  publisher = {Springer-Verlag}
}

@INPROCEEDINGS{feuerlicht_2007:determinantsOfServiceReusability,
  author = {George Feuerlicht and Amalka Wijayaweera},
  title = {Determinants of Service Reusability},
  booktitle = {Proceeding of the 2007 conference on New Trends in Software Methodologies,
	Tools and Techniques},
  year = {2007},
  pages = {467--474},
  address = {Amsterdam, The Netherlands, The Netherlands},
  publisher = {IOS Press},
  isbn = {978-1-58603-794-9}
}

@BOOK{frankel_2003:enterpriseMDA,
  title = {Model Driven Architecture: Applying MDA to enterprise computing},
  publisher = {John Wiley \& Sons},
  year = {2003},
  author = {David S. Frankel},
  address = {New York}
}

@INPROCEEDINGS{genero_2004:earlyIndicatorsOfUnderstandabilityAndModifiability,
  author = {Marcela Genero and Mario Piatini and Esperanza Manso},
  title = {Finding ``Early'' Indicators of UML Class Diagrams Understandability
	and Modifiability},
  booktitle = {ISESE '04: Proceedings of the 2004 International Symposium on Empirical
	Software Engineering},
  year = {2004},
  pages = {207--216},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ISESE.2004.20},
  isbn = {0-7695-2165-7}
}

@MISC{sun:soaWithJavaee,
  author = {Binod P.G. Keith Babo {Gopalan Suresh Raj} and Rick Palkovic},
  title = {{Implementing SOA with the Java EE 5 SDK}},
  howpublished = {http://java.sun.com/developer/technicalArticles/WebServices/soa3/}
}

@TECHREPORT{omg:qvt,
  author = {The Object Management Group},
  title = {Query/View/Transformation},
  institution = {Object Management Group (OMG)},
  type = {Specification},
  howpublished = {http://www.omg.org/spec/QVT/},
  version = {1.0}
}

@TECHREPORT{omg:umlProfileQos,
  author = {The Object Management Group},
  title = {UML Profile for Modeling Quality of Service and Fault Tolerance Characteristics
	and Mechanisms},
  institution = {Object Management Group (OMG)},
  type = {Specification},
  howpublished = {http://www.omg.org/technology/documents/formal/QoS_FT.htm},
  version = {1.1}
}

@INPROCEEDINGS{hall:formalMethodsInRealAirTraffic,
  author = {A. Hall and D. Isaac},
  title = {Software in Air Traffic Control Systems},
  booktitle = {The Future, IEE Colloquium on},
  year = {1992},
  pages = {7/1--7/4},
  month = {Jun},
  abstract = {The Civil Aviation Authority is introducing a major new development
	into the London Air Traffic Control Centre. The central control function
	(CCF) is based on changes to the sectorisation of airspace to improve
	traffic throughput by introducing the so-called `tunnels-in-the-sky'.
	In support of CCF a number of computerised systems are being upgraded
	and new ones introduced. One of the new systems is the CCF display
	information system (CDIS). CDIS is a distributed real-time system
	running on a network of dualled computers communicating over a dual
	token ring local area network (LAN). The authors describe the use
	of formal methods in the development of CDIS}
}

@ARTICLE{895118,
  author = {Harel, D.},
  title = {From play-in scenarios to code: an achievable dream},
  journal = {Computer},
  year = {2001},
  volume = {34},
  pages = {53 -60},
  number = {1},
  month = {jan},
  abstract = {The article presents a general, rather sweeping development scheme
	for complex reactive systems, combining ideas that have been known
	for a long time with more recent ones. The scheme makes it possible
	to go from a high-level user-friendly requirements capture method,
	which is called play-in scenarios, via a rich language for describing
	message sequencing to a full model of the system, and from there
	to final implementation. A cyclic process of verifying the system
	against requirements and synthesizing system parts from the requirements
	is central to the proposal. The article puts special emphasis on
	the languages, methods, and computerized tools that allow smooth
	but rigorous transitions between the various stages of the scheme.
	In contrast to database systems, the article focuses on systems that
	have a dominant reactive, event-driven facet. For these systems,
	modeling and analyzing behavior is the most crucial and problematic
	issue},
  doi = {10.1109/2.895118},
  issn = {0018-9162},
  keywords = {behavior analysis;complex reactive systems;computerized tools;cyclic
	process;database systems;dominant reactive event-driven facet;high-level
	user-friendly requirements capture method;message sequencing;play-in
	scenarios;rich language;rigorous transitions;sweeping development
	scheme;system parts;formal specification;high level languages;systems
	analysis;}
}

@ARTICLE{hinchey:softwareEngineeringAndFormalMethods,
  author = {Mike Hinchey and Michael Jackson and Patrick Cousot and Byron Cook
	and Jonathan P. Bowen and Tiziana Margaria},
  title = {Software engineering and formal methods},
  journal = {Commun. ACM},
  year = {2008},
  volume = {51},
  pages = {54--59},
  number = {9},
  address = {New York, NY, USA},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1378727.1378742},
  issn = {0001-0782},
  publisher = {ACM}
}

@INPROCEEDINGS{hordijk:maintainabilityFactors,
  author = {Wiebe Hordijk and Roel Wieringa},
  title = {Surveying the factors that influence maintainability: research design},
  booktitle = {Proceedings of the 10th European software engineering conference
	held jointly with 13th ACM SIGSOFT international symposium on Foundations
	of software engineering},
  year = {2005},
  series = {Foundations of Software Engineering},
  pages = {385--388},
  publisher = {ACM}
}

@INPROCEEDINGS{hua:axiomaticSemanticsOfHardwareSpecificationLanguage,
  author = {Xin Hua and Hantao Zhang},
  title = {Axiomatic semantics of a hardware specification language},
  booktitle = {VLSI, 1992., Proceedings of the Second Great Lakes Symposium on},
  year = {1992},
  pages = {183--190},
  month = {Feb},
  abstract = {Formal hardware design verification is to examine whether a structural
	specification of a circuit meets its behavioral specification. Despite
	the progress in formal verification, there is a big gap between hardware
	designers and verifiers, partially because there are no common specification
	languages for them to use. The authors show that formal semantics
	could bridge such a gap. By providing an axiomatic semantics to an
	existing hardware design language called the Iowa logic specification
	language (ILSL), the authors show that a circuit description in ILSL
	can be automatically converted into a set of first-order formulas
	which is the semantic description of the circuit and is acceptable
	by an existing theorem prover called the rewrite rule laboratory
	(RRL). In particular, they show how iterative statements of ILSL
	are converted into recursive functions of RLL. Their work thus results
	in a uniform specification language in which both hardware design
	and automatic verification can be done},
  doi = {10.1109/GLSV.1992.218347},
  keywords = { formal specification, specification languages, theorem proving ILSL,
	automatic verification, axiomatic semantics, first-order formulas,
	formal semantics, formal verification, hardware design, hardware
	specification language, rewrite rule laboratory, theorem prover}
}

@ARTICLE{hussain_2007:applyingFuzzyLogicToMeasureCompleteness,
  author = {Tauqeer Hussain and Mian M. Awais and Shafay Shamail},
  title = {Applying fuzzy logic to measure completeness of a conceptual model},
  journal = {Applied Mathematics and Computation},
  year = {2007},
  volume = {185},
  pages = {1078--1086},
  number = {2},
  note = {Special Issue on Intelligent Computing Theory and Methodology},
  abstract = { In a computing environment, the success of an information system
	depends upon the quality of its conceptual model. The importance
	of measuring quality of a conceptual model in quantitative terms
	has been emphasized in the research but still the quantitative measures
	are very scarce in the literature. A new Fuzzy Completeness Index
	(FCI) is introduced in this paper as a quantitative measure for the
	quality of a conceptual model. It takes into account completeness
	of a conceptual model based upon the concept of functional dependencies.
	For a given conceptual model the incorporation of functional dependencies
	is mapped onto a TAS Graph and is then measured using the fuzzy membership
	values and fuzzy hedges. The FCI has been calculated for different
	conceptual models. It has been illustrated that the quality in terms
	of completeness can effectively be measured through the FCI based
	approach. The higher the value of FCI the closer is the conceptual
	model to the real world in representing functional constraints.},
  doi = {DOI: 10.1016/j.amc.2006.07.053},
  issn = {0096-3003},
  keywords = {Fuzzy logic},
  url = {http://www.sciencedirect.com/science/article/B6TY8-4KVXHFY-2/2/3e6e91f91e80fa83e428f1409adbf84e}
}

@INBOOK{kirshin:umlGenericModelExecutionEngine,
  pages = {324--6},
  title = {A UML Simulator Based on a Generic Model Execution Engine },
  publisher = {Springer},
  year = {2007},
  author = {Andrei Kirshin and Dolev Dotan and Alan Hartman},
  volume = {4364/2007},
  series = {Lecture Notes in Computer Science},
  address = {Berlin / Heidelberg},
  isbn = { 978-3-540-69488-5}
}

@INPROCEEDINGS{klopper:compareSoftwareMethodologies,
  author = {Riaan Klopper and Stefan Gruner and Derrick Kourie},
  title = {Assessment of a framework to compare software development methodologies},
  booktitle = {Proceedings of the 2007 annual research conference of the South African
	institute of computer scientists and information technologists on
	IT research in developing countries},
  year = {2007},
  volume = {226},
  series = {ACM International Conference Proceeding Series},
  pages = {56--65},
  publisher = {ACM Press}
}

@BOOK{kruchten:rup,
  title = {The Rational Unified Process: An Introduction},
  publisher = {Addison Wesley},
  year = {2000},
  author = {Philip Kruchten}
}

@INPROCEEDINGS{lange_2005:managingModelQuality,
  author = {C.F.J. Lange and M.R.V. Chaudron},
  title = {Managing Model Quality in UML-Based Software Development},
  booktitle = {Software Technology and Engineering Practice, 2005. 13th IEEE International
	Workshop on},
  year = {2005},
  pages = {7--16},
  month = {0-0 },
  abstract = {With the advent of UML and MDA, models play an increasingly important
	role in software development. Hence, the management of the quality
	of models is of key importance for completing projects succesfully.
	However, existing approaches towards software quality focus on the
	implementation and execution of systems. These existing quality models
	cannot be straightforwardly mapped to the domain of UML models as
	source code and models differ in several essential ways (level of
	abstraction, precision, completeness and consistency). In this paper
	we present a quality model for managing UML-based software development.
	This model enables identifying the need for actions for quality improvement
	already in early stages of the life-cycle. Early actions for quality
	improvement are less resource intensive and, hence, less cost intensive
	than later actions. We discuss our experiences in applying the quality
	model to several industrial case studies. Finally we present a tool
	that visualizes our quality model. This tool helps in relating management
	level quality data to detailed data about specific quality subcharacteristics},
  doi = {10.1109/STEP.2005.16},
  keywords = {Unified Modeling Language, formal specification, model quality management,
	quality improvement, quality management, software management, software
	quality, software qualityUML-based software development}
}

@ARTICLE{lange_2006:inPractice,
  author = {C.F.J. Lange and M.R.V. Chaudron and J. Muskens},
  title = {In practice: UML software architecture and design description},
  journal = {Software, IEEE},
  year = {2006},
  volume = {23},
  pages = { 40--46},
  number = {2},
  month = {March-April},
  abstract = { The Unified Modeling Language has attracted many organizations and
	practitioners. UML is now the de facto modeling language for software
	development. Several features account for its popularity: it's a
	standardized notation, rich in expressivity; UML 2.0 provides 13
	diagram types that enable modeling several different views and abstraction
	levels. Furthermore, UML supports domain-specific extensions using
	stereotypes and tagged values. Finally, several case tools integrate
	UML modeling with other tasks such as generating code and reverse-engineering
	models from code. Our study focused on UML use and model quality
	in actual projects rather than on its adequacy as a notation or language.},
  doi = {10.1109/MS.2006.50},
  issn = {0740-7459},
  keywords = { Unified Modeling Language, Unified Modeling Language, domain-specific
	modelling, formal specification, software architecture, software
	design description, software development, software metrics UML}
}

@ARTICLE{lange_2006:improvingTheQualityOfUmlModelsInPractice,
  author = {Christian F.J. Lange},
  title = {Improving the Quality of UML Models in Practice},
  journal = {ICSE'06},
  year = {2006},
  volume = {??},
  pages = {993--996},
  number = {??}
}

@INPROCEEDINGS{lange_2004:anEmpiricalAssessmentOfCompletenessInUmlDesign,
  author = {Christian F.J. Lange and Michel R.V. Chaudron},
  title = {An Empirical Assessment of Completeness in UML Design},
  booktitle = {Proceedings of EASE -- International Conference on Empirical Assessment
	in Software Engineering},
  year = {2004},
  pages = {111--121},
  publisher = {nstitution of Electrical Engineers (IEE) Press}
}

@ARTICLE{larson:modelDrivenReuse,
  author = {Grant Larson},
  title = {Model-driven development: Assets and reuse},
  journal = {IBM Systems Journal},
  year = {2006},
  volume = {45},
  pages = {541--554},
  number = {3}
}

@INPROCEEDINGS{lazar:agileMdaForSoa,
  author = {I. Lazar and B. Parv and S. Motogna and I.-G. Czibula and C.-L. Lazar},
  title = {An Agile MDA Approach for the Development of Service-Oriented Component-Based
	Applications},
  booktitle = {CANS '08: Proceedings of the 2008 First International Conference
	on Complexity and Intelligence of the Artificial and Natural Complex
	Systems. Medical Applications of the Complex Systems. Biomedical
	Computing},
  year = {2008},
  pages = {38--44},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/CANS.2008.12},
  isbn = {978-0-7695-3621-7}
}

@ARTICLE{lenz:softwareReuse,
  author = {Manfred Lenz and Hans A. Schmid and Peter F. Wolf},
  title = {Software Reuse Through Building-Blocks},
  journal = {IEEE Software},
  year = {1987},
  volume = {4},
  pages = {32--42},
  number = {4}
}

@INPROCEEDINGS{5305990,
  author = {Zhiyi Ma and Xiao He and Lianghuan Kang},
  title = {A Model Driven Development Platform for Service-Oriented Applications},
  booktitle = {Services - II, 2009. SERVICES-2 '09. World Conference on},
  year = {2009},
  pages = {17--24},
  month = {Sept.},
  abstract = {A great deal of the achievement on model driven development and service-oriented
	architecture has been gained, but there are few tools for systematically
	supporting model driven development for service-oriented applications.
	This paper presents a model driven development platform for service-oriented
	applications. The paper first sets forth the architecture of the
	platform, and then discusses the infrastructure and implementation
	technologies of the platform in detail. On the basis of above work,
	the paper expatiates on a set of tools that constitute the platform
	and the relations between tools.},
  doi = {10.1109/SERVICES-2.2009.14},
  keywords = {software architecturemodel driven architecture, model driven development
	platform, service-oriented applications, service-oriented architecture}
}

@INPROCEEDINGS{marinescu_1999:measurementOfReuseByInheritance,
  author = {Radu Marinescu},
  title = {A Multi-Layered System of Metrics for the Measurement of Reuse by
	Inheritance},
  booktitle = {TOOLS '99: Proceedings of the 31st International Conference on Technology
	of Object-Oriented Language and Systems},
  year = {1999},
  pages = {146},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  isbn = {0-7695-0393-4}
}

@BOOK{martin:structureTechniques,
  title = {Structured techniques for computing},
  publisher = {Prentice-Hall},
  year = {1985},
  author = {James Martin and Carma McClure}
}

@BOOK{martin:agileSoftwareDevelopment,
  title = {Agile Software Development, Principles, Patterns, and Practices},
  publisher = {Prentice-Hall},
  year = {2002},
  author = {Robert C. Martin}
}

@INPROCEEDINGS{919116,
  author = {W.E. McUmber and B.H.C. Cheng},
  title = {A general framework for formalizing UML with formal languages},
  booktitle = {Software Engineering, 2001. ICSE 2001. Proceedings of the 23rd International
	Conference on},
  year = {2001},
  pages = { 433--442},
  month = {May},
  abstract = { Informal and graphical modeling techniques enable developers to construct
	abstract representations of systems. Object-oriented modeling techniques
	further facilitate the development process. The Unified Modeling
	Language (UML), an object-oriented modeling approach, could be broad
	enough in scope to represent a variety of domains and gain widespread
	use. Currently, UML comprises several different notations with no
	formal semantics attached to the individual diagrams. Therefore,
	it is not possible to apply rigorous automated analysis or to execute
	a UML model in order to test its behavior: short of writing code
	and performing exhaustive testing. We introduce a general framework
	for formalizing a subset of UML diagrams in terms of different formal
	languages based on a homomorphic mapping between meta models describing
	UML and the formal language. This framework enables the construction
	of a consistent set of rules for transforming UML models into specifications
	in the formal language. The resulting specifications derived from
	UML diagrams enable either execution through simulation or analysis
	through model checking, using existing tools. This paper describes
	the use of this framework for formalisms UML to model and analyze
	embedded systems. A prototype system for generating the formal specifications
	and results from an industrial case study are also described.},
  doi = {10.1109/ICSE.2001.919116},
  issn = {0270-5257 },
  keywords = { formal languages, formal specification, object-oriented methods,
	specification languages UML, Unified Modeling Language, abstract
	representations, embedded systems, formal languages, formal semantics,
	formal specifications, homomorphic mapping, industrial case study,
	meta models, model checking, object-oriented modeling, rigorous automated
	analysis, specifications}
}

@ARTICLE{meyer_1992:designByContract,
  author = {Bertrand Meyer},
  title = {Applying Design by Contract},
  journal = {Computer (IEEE)},
  year = {1992},
  volume = {25},
  pages = {40--51},
  number = {10}
}

@ARTICLE{meyer:programsThatTestThemselves,
  author = {Bertrand Meyer and Arno Fiva and Ilinca Ciupa and Andreas Leitner
	and Yi Wei and Emmanuel Stapf},
  title = {Programs That Test Themselves},
  journal = {Computer},
  year = {2009},
  volume = {42},
  pages = {46--55},
  number = {9},
  month = {Sept. },
  abstract = {The AutoTest framework automates the software testing process by relying
	on programs that contain the instruments of their own verification,
	in the form of contract-oriented specifications of classes and their
	individual routines.},
  doi = {10.1109/MC.2009.296},
  issn = {0018-9162}
}

@ARTICLE{misra:drivingMaintainableDesign,
  author = {Subhas C. Misra},
  title = {Modeling Design/Coding Factors That Drive Maintainability Of Software
	Systems},
  journal = {Software Quality Journal},
  year = {2005},
  volume = {13},
  pages = {297--320},
  number = {3}
}

@INPROCEEDINGS{mohagheghi_2007:evaluatingQualityInModelDrivenEngineering,
  author = {Parastoo Mohagheghi and Jan Aagedal},
  title = {Evaluating Quality in Model-Driven Engineering},
  booktitle = {MISE '07: Proceedings of the International Workshop on Modeling in
	Software Engineering},
  year = {2007},
  pages = {6},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://dx.doi.org/10.1109/MISE.2007.6},
  isbn = {0-7695-2953-4}
}

@INCOLLECTION{mohagheghi_2008:developinQualityFramework,
  author = {Parastoo Mohagheghi and Vegard Dehlen},
  title = {Developing a Quality Framework for Model-Driven Engineering},
  year = {2008},
  pages = {275--286},
  abstract = {This paper presents some related work on quality frameworks and requirements
	for evaluating them. It also discusses characteristics of model-driven
	engineering that are important when building a quality framework,
	such as its use of models in several stages of development and maintenance,
	generation of other artifacts from models and its multi-abstraction
	level approach that requires consistency and traceability. We present
	a 7-step process on how to define a quality framework that is adapted
	to model-driven engineering, and which integrates quality engineering
	with quality evaluation. As an example, the framework is applied
	on transformation quality. We maintain that the transformation process
	and transformation mapping should be discussed separately, as they
	require different approaches, and suggest quality goals, quality-carrying
	properties to achieve the quality goals and methods for evaluating
	these properties.},
  citeulike-article-id = {4159080},
  citeulike-linkout-0 = {http://dx.doi.org/10.1007/978-3-540-69073-3_29},
  citeulike-linkout-1 = {http://www.springerlink.com/content/53462x7424210157},
  citeulike-linkout-2 = {http://www.springerlink.com/content/53462x7424210157/fulltext.pdf},
  doi = {10.1007/978-3-540-69073-3_29},
  journal = {Models in Software Engineering},
  keywords = {mda},
  posted-at = {2009-07-28 21:30:29},
  priority = {2},
  url = {http://dx.doi.org/10.1007/978-3-540-69073-3_29}
}

@ARTICLE{mohagheghi_2008:overviewOfQualityFrameworks,
  author = {Parastoo Mohagheghi and Vegard Dehlen},
  title = {An Overview of Quality Frameworks in Model-Driven Engineering and
	Observations on Transformation Quality},
  year = {2008},
  abstract = {Abstract. Quality is often defined as fitness for purpose which is
	the key property to determine when evaluating quality. This paper
	presents some general requirements for evaluating quality frameworks.
	It also discusses characteristics of MDE that are important when
	building a quality framework, such as its use of models in several
	stages of development and maintenance, and its multi-abstraction
	level approach that requires consistency and traceability. MDE should
	strive for engineering of quality into software. As a step in extending
	quality frameworks for this purpose, we discuss integrating quality
	evaluation with quality engineering using MDE approaches. Applying
	it on transformations, we discuss both the transformability of models
	and the quality of transformations themselves. While completeness
	and precision of models are quality criteria for transformability
	of them, transformations should monitor and preserve model quality,
	be reusable, simple and efficient. We further discuss quality means
	and evaluation methods and propose future work. Keywords: Model-driven
	engineering, quality, transformation, metrics 1},
  institution = {CiteSeerX - Scientific Literature Digital Library and Search Engine
	[http://citeseerx.ist.psu.edu/oai2] (United States)},
  location = {http://www.scientificcommons.org/43596416},
  url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.96.8653}
}

@BOOK{Monin:understandingFormalMethods,
  title = {Understanding formal methods},
  publisher = {Springer},
  year = {2003},
  author = {Jean Fran?ois Monin AND Michael Gerard Hinchey}
}

@INPROCEEDINGS{5070632,
  author = {S. Moosavi and M.A. Seyyedi and N. Moghadam},
  title = {A Method for Service Oriented Design},
  booktitle = {Information Technology: New Generations, 2009. ITNG '09. Sixth International
	Conference on},
  year = {2009},
  pages = {290--295},
  month = {April},
  abstract = {Development methodology based on service has critical role in description,
	establishment, refining and adaptation (verification) of highly volatile
	business processes. However, there has not been a suitable and consolidated
	method for the development of high quality service oriented business
	applications. This article tries to present a method for service-
	oriented design. We use techniques and current issues in SOA in consolidated
	form and propose a method for service oriented design. The focus
	of this paper is on design process.},
  doi = {10.1109/ITNG.2009.323},
  keywords = {Web services, business data processing, software architecturebusiness
	processes, high quality service-oriented business, service-oriented
	design}
}

@INPROCEEDINGS{morton_1999:enhancedSoftwareDesignReusability,
  author = {S.D. Morton},
  title = {Enhanced software design reusability in safety-critical embedded
	applications using automated structural test generation},
  booktitle = {AUTOTESTCON '99. IEEE Systems Readiness Technology Conference, 1999.
	IEEE},
  year = {1999},
  pages = {755--767},
  abstract = {Software reuse is an increasingly important goal of many software
	development strategies in the safety-critical embedded controls industry.
	Adaptive reuse is a commonly selected methodology to achieve this
	goal. As automated structural testing technology matures, it will
	become an essential component in many successful adaptive reuse techniques.
	This paper explores some of the facets of automated structural test
	design and examines ifs relationship to software reusability},
  doi = {10.1109/AUTEST.1999.800451},
  keywords = {automatic test software, embedded systems, industrial control, safety-critical
	software, software development management, software reusability,
	systems analysisadaptive reuse, automated structural test generation,
	graphical design language, numerical coverage, safety-critical embedded
	applications, safety-critical embedded controls industry, software
	design reusability, software development, software reusability, structured
	path coverage}
}

@INPROCEEDINGS{mukkamala_2004:reusability,
  author = {R. Mukkamala and R. Ramesh and N. Agarwal and M. Bandagadde and S.
	Myadam},
  title = {Reusability: a technique for the design of HUMS architectures},
  booktitle = {Digital Avionics Systems Conference, 2004. DASC 04. The 23rd},
  year = {2004},
  volume = {2},
  pages = { 7.E.2--71--10 Vol.2},
  month = {Oct.},
  abstract = { In most engineering disciplines, systems are designed by reusing
	existing components that have been used in other systems. It is certainly
	worthwhile to make use of existing architectures available as a whole
	or in part in the large space of designs instead of rebuilding the
	whole architecture. In collaboration with NASA Langley Research Center,
	we have been developing methods to reuse existing architectures for
	health and usage monitoring (HUMS) of aerospace structures. We discuss
	some of the key reuse techniques, which can be used to reuse existing
	available architectures in the design space. The primary contribution
	of This work is an iterative process model for employing reuse technique
	in a complex engineering system.},
  keywords = { aerospace computing, large-scale systems, program diagnostics, software
	architecture, software prototyping, software reusability NASA Langley
	Research Center, aerospace structures, complex engineering system,
	health and usage monitoring system architecture design, iterative
	process model, reusability techniques}
}

@INPROCEEDINGS{muskens_2004:applyingMetricsToMultiViewArchitectureModels,
  author = {J. Muskens and M. Chaudron and C. Lange},
  title = {Investigations in applying metrics to multi-view architecture models},
  booktitle = {Euromicro Conference, 2004. Proceedings. 30th},
  year = {2004},
  pages = { 372--379},
  month = {Aug.-3 Sept.},
  abstract = { The goal of our research is to develop industry-proof software architecture
	and design metrics. We identify a number of problems that arise in
	computing software architecture and design metrics in industrial
	settings that were not encountered in computing source-code metrics.
	These problems include the absence of a single, unifying representation
	for architectures and they arise from the fact that architecture
	diagrams are used in an informal manner. We describe our approach
	towards defining metrics for architectures and designs which are
	represented in the 4+1 views paradigm using UML. We report our experiences
	with architectural metrics in industrial settings.},
  doi = {10.1109/EURMIC.2004.1333392},
  issn = {1089-6503 },
  keywords = { Unified Modeling Language, object-oriented programming, software
	architecture, software development management, software metrics UML
	design pattern, industrial settings, industry-proof software architecture,
	source-code metrics}
}

@ARTICLE{nebut_2006:automaticTestGeneration,
  author = {Clementine Nebut and Franck Fleurey},
  title = {Automatic Test Generation: A Use Case Driven Approach},
  journal = {IEEE Trans. Softw. Eng.},
  year = {2006},
  volume = {32},
  pages = {140--155},
  number = {3},
  note = {Member-Le Traon, Yves and Member-Jezequel, Jean-Marc},
  address = {Piscataway, NJ, USA},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/TSE.2006.22},
  issn = {0098-5589},
  publisher = {IEEE Press}
}

@INPROCEEDINGS{nebut_2003:requirementsByContractsAutomateTests,
  author = {Cl{\'e}mentine Nebut and Franck Fleurey and Yves Le Traon and Jean-Marc
	J{\'e}z{\'e}quel},
  title = {Requirements by Contracts allow Automated System Testing},
  booktitle = {ISSRE '03: Proceedings of the 14th International Symposium on Software
	Reliability Engineering},
  year = {2003},
  pages = {85},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  isbn = {0-7695-2007-3}
}

@MISC{w3c:cdl,
  author = {{David Burdett} {Gregory Ritzinger} {Tony Fletcher} {Yves Lafon}
	{Charlton Barreto} {Nickolas Kavantzas}},
  title = {{Web Services Choreography Description Language Version 1.0}},
  howpublished = {http://www.w3.org/TR/ws-cdl-10/}
}

@INPROCEEDINGS{noll_2007:traceabilityUsingOntologies,
  author = {Rodrigo Perozzo Noll and Marcelo Blois Ribeiro},
  title = {Enhancing traceability using ontologies},
  booktitle = {SAC '07: Proceedings of the 2007 ACM symposium on Applied computing},
  year = {2007},
  pages = {1496--1497},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1244002.1244322},
  isbn = {1-59593-480-4},
  location = {Seoul, Korea}
}

@TECHREPORT{oasis:bpel,
  author = {{OASIS Web Services Business Process Execution Language (WSBPEL)
	TC}},
  title = {{Web Services Business Process Execution Language Version 2.0}},
  institution = {Organization for the Advancement of Structured Information Standards
	(OASIS)},
  year = {2007},
  type = {Specification},
  month = {April},
  howpublished = {http://docs.oasis-open.org/wsbpel/2.0/OS/wsbpel-v2.0-OS.html},
  version = {2.0}
}

@INPROCEEDINGS{olderog:CompletenessInFormalSpecificationLanguageDesign,
  author = {E.-R. Olderog and A. P. Ravn},
  title = {Completeness in formal specification language design for process-control
	systems},
  booktitle = {FMSP '00: Proceedings of the third workshop on Formal methods in
	software practice},
  year = {2000},
  pages = {89--100},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/349360.351142},
  isbn = {1-58113-262-X},
  location = {Portland, Oregon, United States}
}

@ARTICLE{oquendo:modelDrivenFormalMethod,
  author = {Flavio Oquendo},
  title = {PI-Method: a model-driven formal method for architecture-centric
	software engineering},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2006},
  volume = {31},
  pages = {1--13},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1127878.1127885},
  issn = {0163-5948},
  publisher = {ACM}
}

@INPROCEEDINGS{4026920,
  author = {Orriens, B. and Jian Yang},
  title = {A Rule Driven Approach for Developing Adaptive Service Oriented Business
	Collaboration},
  year = {2006},
  pages = {182 -189},
  month = {sept.},
  abstract = {Current composite Web service development and management solutions,
	e.g. BPEL, do not cater for flexible and adaptive business collaborations
	due to their pre-defined and inflexible nature that precludes them
	accommodating business dynamics. In this paper we propose a rule
	driven approach for adaptive business collaboration development in
	which rules drive and govern the development process. We firstly
	introduce the business collaboration context framework (BCCF), which
	provides enterprises with the context required for business collaboration.
	We then explain our model driven approach with which enterprises
	can capture this context in business collaboration models. Subsequently
	we demonstrate how we utilize rules to drive the development and
	management of such models, as such facilitating flexible and adaptive
	business collaboration},
  doi = {10.1109/SCC.2006.14},
  journal = {Services Computing, 2006. SCC '06. IEEE International Conference
	on},
  keywords = {adaptive business collaboration development;adaptive service oriented
	business collaboration;business collaboration context framework;rule
	driven approach;business data processing;groupware;}
}

@BOOK{pastor:mdaInPractice,
  title = {Model-Driven Architecture in Practice},
  publisher = {Springer},
  year = {2007},
  author = {Oscar Pastor and Juan Carlos Molina},
  subtitle = {A Software Production Environment Based on Conceptual Modeling}
}

@BOOK{penker:businessModelingWithUml,
  title = {Business Modeling with {UML}},
  publisher = {John Wiley \& Sons},
  year = {2000},
  author = {Magnus Penker and Hans-Erik Eriksson},
  subtitle = {Business Patterns at Work}
}

@ARTICLE{platzer:verificationOfCyberphysicalTransportationSystems,
  author = {A. Platzer},
  title = {Verification of Cyberphysical Transportation Systems},
  journal = {Intelligent Systems, IEEE},
  year = {2009},
  volume = {24},
  pages = {10--13},
  number = {4},
  month = {July-Aug. },
  abstract = {Next-generation transportation systems in air traffic, railway, and
	car control will leverage advanced computing and sensing capabilities
	to improve safety and throughput to meet increasing transportation
	demands. It combines cyber aspects (such as wireless communication
	and computer control) with physical aspects (such as movement in
	space and real-time interfacing with the physical environment, including
	sensing and actuation), thus forming cyberphysical systems (CPSs).'ith
	the increasing complexity of modern transportation technology, the
	need for analysis techniques that help find and fix errors in system
	design is rising quickly. Testing and debugging the control software
	in transportation systems is becoming more expensive; the resulting
	cost is already well above 50 percent of the total development cost
	in most cases. Because correct design is difficult to establish with
	ad hoc debugging, upcoming standards in the aviation and car industries
	will encourage and require formal methods. With the emergent cyberphysical
	transportation field, exciting challenges lie ahead in making the
	vision of robust and reliable system design a reality.},
  doi = {10.1109/MIS.2009.81},
  issn = {1541-1672},
  keywords = {air traffic control, automated highways, control engineering computing,
	program debugging, program testing, railways, road trafficad hoc
	debugging, air traffic control, car control, control software debugging,
	control software testing, cyber aspects, cyberphysical systems, cyberphysical
	transportation field, cyberphysical transportation systems, formal
	methods, formal verification, intelligent transportation systems,
	next-generation transportation systems, physical aspects, railway
	control, system design, transportation technology}
}

@BOOK{podeswa:umlForItBas,
  title = {{UML} for the {IT} Business Analyst},
  publisher = {Thomson Course Technology},
  year = {2005},
  author = {Howard Podeswa}
}

@INPROCEEDINGS{poels_2001:inheritenceAndModifiability,
  author = {Geert Poels and Guido Dedene},
  title = {Evaluating the Effect of Inheritance on the Modifiability of Object-Oriented
	Business Domain Models},
  booktitle = {CSMR '01: Proceedings of the Fifth European Conference on Software
	Maintenance and Reengineering},
  year = {2001},
  pages = {20},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  isbn = {0-7695-1028-0}
}

@INPROCEEDINGS{1035169,
  author = {Dick Quartel and Remco Dijkman and Marten {van Sinderen}},
  title = {Methodological support for service-oriented design with ISDL},
  booktitle = {ICSOC '04: Proceedings of the 2nd international conference on Service
	oriented computing},
  year = {2004},
  pages = {1--10},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1035167.1035169},
  isbn = {1-58113-871-7},
  location = {New York, NY, USA}
}

@ARTICLE{ramachandran_2005:softwareReuseGuidelines,
  author = {Muthu Ramachandran},
  title = {Software reuse guidelines},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {20054076959},
  volume = {30},
  pages = {1--8},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1061874.1061889},
  issn = {0163-5948},
  publisher = {ACM}
}

@INPROCEEDINGS{raskovsky:denotionalSemanticsAsSpecificationOfCodeGenerators,
  author = {Martin R. Raskovsky},
  title = {Denotational semantics as a specification of code generators},
  booktitle = {SIGPLAN '82: Proceedings of the 1982 SIGPLAN symposium on Compiler
	construction},
  year = {1982},
  pages = {230--244},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/800230.806998},
  isbn = {0-89791-074-5},
  location = {Boston, Massachusetts, United States}
}

@INPROCEEDINGS{reyesJuarez:aMethodologyForUseCaseModeling,
  author = {J. {Reyes Juarez} and K.C. Barraza and G. Licea and A. Cristobal-Salas},
  title = {A Methodology for Use Cases Modeling Based on Sequence Diagrams Quantification},
  booktitle = {Software Engineering Education and Training Workshops, 2006. CSEETW
	'06. 19th Conference on},
  year = {2006},
  pages = { 6--6},
  month = {April},
  abstract = { In this paper we describe a methodology to model a use case using
	sequence diagrams quantification. Our methodology consists in a set
	of metrics to define the amount of scenarios, and it determines the
	use case goal accomplishment based on the occurrence, sequence order,
	and the flow of data involved in. It also helps to obtain a robust
	design because all possible flows are considered; by this way, software
	quality could be achieved in quantitative terms. This approach can
	be used in two ways: to define a complete set of scenarios before
	entering in the design phase, and to measure design quality in terms
	of completeness and functionality attributes. Our methodology follows
	the main recommendations to apply a solid mathematical basis for
	engineering careers, and informatics and computing programs.},
  doi = {10.1109/CSEETW.2006.1},
  keywords = {null design completeness., scenarios, sequences quantification, tree
	diagram}
}

@ARTICLE{reynoso_2006:effectOfCouplingOnOclExpressions,
  author = {L. Reynoso and M. Genero and M. Piattini and E. Manso},
  title = {The Effect of Coupling on Understanding and Modifying OCL Expressions:
	An Experimental Analysis},
  journal = {Latin America Transactions, IEEE (Revista IEEE America Latina)},
  year = {2006},
  volume = {4},
  pages = {130--135},
  number = {2},
  month = {April },
  abstract = {Not all the model constraints can be defined using only UML graphical
	features due to the limited expressiveness of diagram-based UML notation.
	To solve this problem, the OCL language was defined as a textual
	add-on to the UML diagrams, allowing the specification of a wide
	range of constraints of objects. Aware of the lack of metrics to
	capture the quality aspects of UML/OCL models and the importance
	of models in recent initiatives of model-Driven software engineering
	(such as Model-Driven Development and Model-Driven Architecture),
	we define a set of metrics for measuring the structural properties
	of OCL constraints in UML/OCL models. Many of these metrics are defined
	in terms of navigations, a core concept of OCL that defines coupling
	between objects. This paper carefully describes a family of experiments
	we have conducted to ascertain whether any relationship exists between
	object coupling (defined through metrics related to navigations and
	collection operations) and two maintainability subcharacteristics:
	understandability and modifiability of OCL expressions. Empirical
	evidence that such a relationship exists is shown in the obtained
	results, however they must be considered as preliminaries results.
	Further validation is needed to strengthen the conclusions and external
	validity.},
  doi = {10.1109/TLA.2006.1642461},
  issn = {1548-0992},
  keywords = {nullSoftware metrics, coupling, data models, modeling, software quality,
	student experiment}
}

@INPROCEEDINGS{reynoso_2005:impactOfCouplingOnUnderstandabilityAndModifiability,
  author = {L. Reynoso and M. Genero and M. Piattini and E. Manso},
  title = {Assessing the impact of coupling on the understandability and modifiability
	of OCL expressions within UML/OCL combined models},
  booktitle = {Software Metrics, 2005. 11th IEEE International Symposium},
  year = {2005},
  pages = {10 pp.--14},
  month = {Sept.},
  abstract = {Diagram-based UML notation is limited in its expressiveness thus producing
	a model that would be severely underspecified. The flaws in the limitation
	of the UML diagrams are solved by specifying UML/OCL combined models,
	OCL being an essential add-on to the UML diagrams. Aware of the importance
	of building precise models, the main goal of this paper is to carefully
	describe a family of experiments we have undertaken to ascertain
	whether any relationship exists between object coupling (defined
	through metrics related to navigations and collection operations)
	and two maintainability sub-characteristics: understandability and
	modifiability of OCL expressions. If such a relationship exists,
	we will have found early indicators of the understandability and
	modifiability of OCL expressions. Even though the results obtained
	show empirical evidence that such a relationship exists, they must
	be considered as preliminaries. Further validation is needed to be
	performed to strengthen the conclusions and external validity},
  doi = {10.1109/METRICS.2005.12},
  issn = {1530-1435},
  keywords = {Unified Modeling Language, formal specification, object-oriented languages,
	object-oriented programming, software maintenance, software metricsOCL
	expression modifiability, OCL expression understandability, UML model,
	diagram-based UML notation, object coupling, software metrics}
}

@ARTICLE{france:mddUsingUml2,
  author = {Sudipto Ghosh Trung Dinh-Trong {Robert B. France} and Arnor Solberg},
  title = {Model-Driven Development Using {UML}-2: Promises and Pitfalls},
  journal = {Computer},
  year = {2006},
  volume = {39},
  pages = {59--66},
  number = {2},
  month = {February}
}

@BOOK{rosenberg:useCaseDrivenObjectModeling,
  title = {Use Case Driven Object Modeling with {UML}: A Practical Approach},
  publisher = {Addison-Wesley Professional},
  year = {1999},
  author = {Doug Rosenberg and Kendall Scott}
}

@BOOK{rumbaugh:umlReference,
  title = {Unified Modeling Language Reference Manual, 2nd Edition},
  publisher = {Addison-Wesley Professional},
  year = {2004},
  author = {James Runbaugh and Ivar Jacobson and Grady Booch},
  month = {July}
}

@ARTICLE{salasin_2007:metricsForSoa,
  author = {John Salasin and Azad M. Madni},
  title = {Metrics For Service-Oriented Architecture (SOA) Systems: What Developers
	Should Know},
  journal = {J. Integr. Des. Process Sci.},
  year = {2007},
  volume = {11},
  pages = {55--71},
  number = {2},
  address = {Amsterdam, The Netherlands, The Netherlands},
  issn = {1092-0617},
  publisher = {IOS Press}
}

@ARTICLE{schmidt:modelDrivenEngineering,
  author = {Douglas C. Schmidt},
  title = {Model Driven Engineering},
  journal = {IEEE Computer},
  year = {2006},
  volume = {39},
  pages = {25--31},
  number = {2},
  month = {February}
}

@ARTICLE{selic:pragmaticsOfModelDrivenDevelopment,
  author = {Bran Selic},
  title = {The Pragmatics of Model Driven Development},
  journal = {IEEE Software},
  year = {2003},
  volume = {20},
  pages = {19--25},
  number = {5},
  month = {September/October}
}

@INPROCEEDINGS{shinkawa_2006:interModelConsistency,
  author = {Y. Shinkawa},
  title = {Inter-Model Consistency in UML Based on CPN Formalism},
  booktitle = {Software Engineering Conference, 2006. APSEC 2006. 13th Asia Pacific},
  year = {2006},
  pages = {411--418},
  month = {Dec.},
  abstract = {The Unified Modeling Language (UML) is one of the most widely used
	industry-standard modeling tools in object orientation. It provides
	us with variety of diagrams with rigorous syntax and semantics to
	build precise analysis models, design models, and implementation
	models for software development. Whereas this variety helps us to
	model the problem domain from various viewpoints, it makes it difficult
	to keep consistency between the models presented by different diagrams.
	This paper proposes a complementary modeling process to UML modeling,
	which makes it easy to keep consistency between heterogeneous UML
	models. The process is based on the use case driven approach and
	colored Petri net (CPN) formalism. The consistency is defined along
	the use case driven modeling process, using CPN formalism. The paper
	focuses on four major UML diagrams, among which the consistency is
	kept and assured. At the end of the process, we obtain four kinds
	of UML compatible CPN models, which can easily converted to the corresponding
	UML diagrams for further software development.},
  doi = {10.1109/APSEC.2006.41},
  issn = {1530-1362},
  keywords = {Petri nets, Unified Modeling Language, software engineeringCPN, UML,
	Unified Modeling Language, case driven approach, colored Petri net,
	intermodel consistency, software development}
}

@TECHREPORT{siegel_2001:developingInMDA,
  author = {Jon Siegel},
  title = {Developing in {OMG}'s {M}odel-{D}riven {A}rchitecture},
  institution = {Object Management Group},
  year = {2001},
  type = {White paper},
  month = {November}
}

@ARTICLE{snelting_1998:pauFeyerabendUndDieSoftwareTechnologie,
  author = {Gregor Snelting},
  title = {Paul feyerabend und die softwaretechnologie (zur diskussion gestellt)},
  journal = {Informatik Spektrum},
  year = {1998},
  volume = {21},
  pages = {273--276},
  number = {5}
}

@INPROCEEDINGS{solms_2007:technologyNeutralBpdUsingUrdad,
  author = {Fritz Solms},
  title = {Technology Neutral Business Process Design using URDAD},
  booktitle = {Proceeding of the 2007 conference on New Trends in Software Methodologies,
	Tools and Techniques},
  year = {2007},
  pages = {52--70},
  address = {Amsterdam, The Netherlands, The Netherlands},
  publisher = {IOS Press},
  isbn = {978-1-58603-794-9}
}

@INPROCEEDINGS{solms_1994:maxEntAvgErrorRates,
  author = {F. Solms and P. {van Rooyen} and J. Kunicki},
  title = {Maximum entropy and average error rates in digital communication
	systems},
  booktitle = {Communications and Signal Processing, 1994. COMSIG-94., Proceedings
	of the 1994 IEEE South African Symposium on},
  year = {1994},
  pages = {11--15},
  month = {Oct},
  abstract = {In digital communication systems, the criteria of merit of system
	performance is usually average probability of error as function of
	signal-to-noise ratio. The Gauss quadrature rule (GQR) formulation
	and the maximum entropy method (MEM) have been proposed in the literature
	to determine and calculate an unknown distribution and average error
	rate from moments. We compare the accuracy of these two methods when
	a distribution is estimated and the average error rate is calculated.
	It is shown that the MEM needs significantly less moments when the
	distribution is estimated from its moments than the GQR formulation,
	and that the GQR formulation fails under certain conditions when
	average error rate is calculated. Specifically, the latter is encountered
	at high signal-to-noise ratios, where the MEM still delivers reliable
	results},
  doi = {10.1109/COMSIG.1994.512353},
  keywords = { digital communication, MEM, SNR, average error rate, average error
	rates, average probability, digital communication systems, distribution,
	error statistics, high signal-to-noise ratios, maximum entropy method,
	maximum entropy methods, maximum entropy rates, moments, signal-to-noise
	ratio, statistical analysis Gauss quadrature rule, system performance}
}

@ARTICLE{solms_2010:urdadAsSemiFormalApproach,
  author = {Fritz Solms and Dawid Loubser},
  title = {URDAD as a semi-formal approach to analysis and design},
  journal = {Innovations in Systems and Software Engineering},
  year = {2010},
  volume = {6},
  pages = {155-162},
  number = {1-2},
  month = {January},
  abstract = {The Use Case, Responsibility Driven Analysis and Design (URDAD) methodology
	is a methodology for technology neutral design generating the Platform
	Independent Model of the Object Management Group’s Model Driven Architecture.
	It requires the core modeling to be done in the problem space by
	domain specialists and not in the solution space by technology specialists.
	URDAD allows for formal elements to be added by different role players
	at different stages of the model refinement, whilst aiming to preserve
	agility of the outputs and low cost of the process generating the
	outputs. This paper discusses the semi-formal aspects of URDAD which
	facilitate model validation and testing, documentation generation
	and automated implementation mapping as well as aspects which promote
	agility and low cost.},
  keywords = {URDAD method, Formal methods, Agile processes}
}

@ARTICLE{solms_2009:generatingMdasPimUsingUrdad,
  author = {Fritz Solms and Dawid Loubser},
  title = {Generating MDA's platform independent model using URDAD},
  journal = {Knowledge-Based Systems},
  year = {2009},
  volume = {22},
  pages = {174--185}
}

@BOOK{stahl:mdsd,
  title = {Model-Driven Software Development},
  publisher = {John Wiley \& Sons},
  year = {2004},
  author = {Thomas Stahl and Markus Voelter}
}

@MISC{sun:javaee,
  author = {{Sun Microsystems corporation}},
  title = {{Java EE at a Glance}},
  howpublished = {http://java.sun.com/javaee/}
}

@INPROCEEDINGS{usman_2008:surveyOfUmlConsistencyCheckingTechniques,
  author = {M. Usman and A. Nadeem and Tai-hoon Kim and Eun-suk Cho},
  title = {A Survey of Consistency Checking Techniques for UML Models},
  booktitle = {Advanced Software Engineering and Its Applications, 2008. ASEA 2008},
  year = {2008},
  pages = {57--62},
  month = {Dec.},
  abstract = {UML is the de-facto industry standard to design object-oriented software.
	UML provides a set of diagrams to model every aspect of an object-oriented
	application design in sufficient detail, but lacks any mechanism
	to rigorously check consistency between the models. Today, most of
	the effort is applied on creating accurate and consistent UML models
	rather than implementing the design. Automatic code generation from
	UML models has emerged as a promising area in recent years. The accuracy
	of generated code in some ways depends on UML models consistency.
	In this paper, we present a survey of UML consistency checking techniques.
	To analyze existing techniques, we identify some analysis parameters
	and construct an analysis table. The analysis table helps us to evaluate
	existing consistency checking techniques. We conclude that most of
	the approaches validates intra and inter level consistencies between
	UML models by using monitoring strategy. UML class, sequence, and
	statechart diagrams are used in most of the existing consistency
	checking techniques.},
  doi = {10.1109/ASEA.2008.40},
  keywords = {Unified Modeling Language, object-oriented programming, program compilers,
	program diagnostics, program verificationUML class, UML consistency
	checking technique, UML sequence, Unified Modeling Language, analysis
	table, automatic code generation, monitoring strategy, object-oriented
	software design, statechart diagram}
}

@ARTICLE{verelst_2005:abstractionAndEvolvibility,
  author = {Jan Verelst},
  title = {The Influence of the Level of Abstraction on the Evolvability of
	Conceptual Models of Information Systems},
  journal = {Empirical Softw. Engg.},
  year = {2005},
  volume = {10},
  pages = {467--494},
  number = {4},
  address = {Hingham, MA, USA},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1007/s10664-005-3863-0},
  issn = {1382-3256},
  publisher = {Kluwer Academic Publishers}
}

@ARTICLE{voas:softwareTestability,
  author = {Jeffrey M. Voas and Keith W. Miller},
  title = {Software Testability: The New Verification},
  journal = {IEEE Software},
  year = {1995},
  volume = {12},
  pages = {17--28},
  number = {3},
  month = {MAY}
}

@INPROCEEDINGS{4076959,
  author = {Manuel Wimmer and Michael Strommer and Horst Kargl and Gerhard Kramler},
  title = {Towards Model Transformation Generation By-Example},
  year = {2007},
  pages = {285b -285b},
  month = {jan. },
  abstract = {With the advent of model-driven engineering (MDE) several model transformation
	approaches and languages have been developed in the previous 5 years.
	Most of these existing approaches are metamodel-based with metamodels
	representing both an abstract syntax of the corresponding modeling
	language and also a data structure for storing models. However, this
	implementation specific focus makes it difficult for modelers to
	develop model transformations, because metamodels do not necessarily
	define all language concepts explicitly which are available for notation
	purposes. Therefore, we propose a by-example approach for defining
	inter-model mappings representing semantic correspondences between
	concrete domain models, which is more user-friendly, then directly
	specifying model transformation rules or mappings based on the abstract
	syntax. The inter-model mappings between domain models can be used
	to generate model transformation rules, by-example, taking into account
	the already defined mapping between abstract and concrete syntax
	elements. With this approach the user's knowledge about the notation
	of the modeling language is sufficient for the definition of model
	transformations regarding semantic correspondences. Hence, no detailed
	knowledge about the metamodel and the model transformation language
	is required},
  doi = {10.1109/HICSS.2007.572},
  issn = {1530-1605},
  journal = {System Sciences, 2007. HICSS 2007. 40th Annual Hawaii International
	Conference on},
  keywords = {by-example approach;data structure;inter-model mappings;model transformation
	rules;model-driven engineering;modeling language;automatic programming;data
	structures;formal specification;programming language semantics;software
	tools;specification languages;}
}

@ARTICLE{wirfs-brock:designSimplicity,
  author = {Rebecca J. Wirfs-Brock},
  title = {Toward Design Simplicity},
  journal = {IEEE Software},
  year = {2007},
  volume = {24},
  pages = {9--11},
  number = {2},
  month = {March/April}
}

@ARTICLE{wirfsBrock_2007:towardsDesignSimplicity,
  author = {Rebecca J. Wirfs-Brock},
  title = {Toward Design Simplicity},
  journal = {IEEE Softw.},
  year = {2007},
  volume = {24},
  pages = {9--11},
  number = {2},
  address = {Los Alamitos, CA, USA},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/MS.2007.57},
  issn = {0740-7459},
  publisher = {IEEE Computer Society Press}
}

@BOOK{wirfs-brock:objectDesign,
  title = {Object Design: Roles, Responsibilities and Collaboration},
  publisher = {Addison-Wesley Professional},
  year = {2002},
  author = {Rebecca J. Wirfs-Brock and Alan McKean},
  address = {New York}
}

@INPROCEEDINGS{wirfs-brock:responsibilityDrivenApproach,
  author = {Rebecca J. Wirfs-Brock and Brian Wilkerson},
  title = {Object-Oriented Design: A Responsibility-Driven Approach},
  booktitle = {OOPSLA '89 Proceedings},
  year = {1989},
  pages = {71--75},
  month = {October},
  organization = {TeX Users Group}
}

@ARTICLE{wirth:stepWiseRefinement,
  author = {Niklaus Wirth},
  title = {Program Development by Stepwise Refinement},
  journal = {Communications of the ACM},
  year = {1971},
  volume = {14},
  pages = {221--227},
  number = {4},
  month = {April}
}

@INPROCEEDINGS{Zheng_2008:testByContract,
  author = {Weiqun Zheng and G. Bundell},
  title = {Test by Contract for UML-Based Software Component Testing},
  booktitle = {Computer Science and its Applications, 2008. CSA '08. International
	Symposium on},
  year = {2008},
  pages = {377--382},
  month = {Oct.},
  abstract = {This paper presents a new contract-based software component testing
	(SCT) technique, test by contract (TbC), which extends the design
	by contract concept to the SCT domain, and leverages it with UML-based
	testing at the modeling level to design model-level test contracts
	for UML-based SCT. We introduce a new concept of contract for testability
	as the principal TbC goal, and develop a set of important contract-oriented
	concepts (e.g. test contract, effectual contract scope, internal/external
	test contract), and useful test criteria for effective model-based
	testability improvement. A practical step-wise TbC working process
	is developed to show how to put the TbC technique into practice for
	contract-based testing activities to undertake UML-based SCT with
	a case study.},
  doi = {10.1109/CSA.2008.66},
  keywords = {Unified Modeling Language, program testingUML, software component
	testing, test by contract}
}

@INPROCEEDINGS{zhu_2007:umlProfileForDesignDecisions,
  author = {Liming Zhu and Ian Gorton},
  title = {UML Profiles for Design Decisions and Non-Functional Requirements},
  booktitle = {ICSEW '07: Proceedings of the 29th International Conference on Software
	Engineering Workshops},
  year = {2007},
  pages = {41},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ICSEW.2007.222},
  isbn = {0-7695-2830-9}
}

@INPROCEEDINGS{5231998,
  author = {Ziadi, T. and Blanc, X. and Raji, A.},
  title = {From Requirements to Code Revisited},
  year = {2009},
  pages = {228 -235},
  month = {march},
  abstract = {In this article paper entitled "From Play-In Scenarios to Code: An
	Achievable Dream",David Harel presented a development schema that
	makes it possible to go from high-level user-friendly requirements
	to a full system model, and from there to the final implementation.
	Even if Harel's schema represents a real contribution to filing the
	gap between user requirements and final implementations, there is
	few work on its feasibility and none within UML2.This paper addresses
	this lack. First we use UML2 sequence diagram as a formalism for
	requirement specification. Then an approach that synthesizes state
	machines from UML2 sequence diagrams is presented. From the obtained
	state machines, we implement a transformation to code. The AIBO platform
	(one of several typesof robotic pets designed and manufactured by
	Sony) is used as a case study toillustrate our implementation.},
  doi = {10.1109/ISORC.2009.29},
  issn = {1555-0885},
  journal = {Object/Component/Service-Oriented Real-Time Distributed Computing,
	2009. ISORC '09. IEEE International Symposium on},
  keywords = {UML 2 sequence diagram;code transformation;high-level user-friendly
	requirement;requirement specification;state machine synthesis;Unified
	Modeling Language;formal specification;}
}

@ARTICLE{zowghi_2003:completenessConsistencyCorrectnessOfRequirements,
  author = {Didar Zowghi and Vincenzo Gervasi},
  title = {On the interplay between consistency, completeness, and correctness
	in requirements evolution},
  journal = {Information and Software Technology},
  year = {2003},
  volume = {45},
  pages = {993--1009},
  number = {14},
  note = {Eighth International Workshop on Requirements Engineering: Foundation
	for Software Quality},
  abstract = { The initial expression of requirements for a computer-based system
	is often informal and possibly vague. Requirements engineers need
	to examine this often incomplete and inconsistent brief expression
	of needs. Based on the available knowledge and expertise, assumptions
	are made and conclusions are deduced to transform this [`]rough sketch'
	into more complete, consistent, and hence correct requirements. This
	paper addresses the question of how to characterize these properties
	in an evolutionary framework, and what relationships link these properties
	to a customer's view of correctness. Moreover, we describe in rigorous
	terms the different kinds of validation checks that must be performed
	on different parts of a requirements specification in order to ensure
	that errors (i.e. cases of inconsistency and incompleteness) are
	detected and marked as such, leading to better quality requirements.},
  doi = {DOI: 10.1016/S0950-5849(03)00100-9},
  issn = {0950-5849},
  keywords = {Software requirements},
  url = {http://www.sciencedirect.com/science/article/B6V0B-492W03S-2/2/e78a8f88512c8927d98a3cb042b4eebb}
}

@article{2833986320071101,
Abstract = {Selecting an appropriate process modeling language forms an important task for organizations engaging in business process management initiatives. A plethora of process modeling languages has been developed over the last decades, leading to a need for rigorous theory to assist in the evaluation and comparison of the capabilities of these languages. While substantial academic progress in the area of process modeling language evaluation has been made in at least two areas, using an ontology-based theory of representation or the framework of workflow patterns, it remains unclear how these frameworks relate to each other. We use a generic framework for language evaluation to establish similarities and differences between these acknowledged reference frameworks and discuss how and to what extent they corroborate each other. Our line of investigation follows the case of the popular BPMN modeling language, whose evaluation from the perspectives of representation theory and workflow patterns i},
Author = {Recker, Jan and Rosemann, Michael and Krogstie, John},
ISSN = {15293181},
Journal = {Communications of AIS},
Keywords = {ENTERPRISE resource planning, KNOWLEDGE management, MATHEMATICAL models, WORKFLOW, INFORMATION services -- Management, RESEARCH, Bunge-Wand-Weber representation model, model quality, process modeling, SEQUAL, workflow patterns},
Number = {20},
Pages = {774 - 799},
Title = {ONTOLOGY- VERSUS PATTERN-BASED EVALUATION OF PROCESS MODELING LANGUAGES: A COMPARISON.},
Volume = {2007},
URL = {http://0-search.ebscohost.com.innopac.up.ac.za/login.aspx?direct=true&db=buh&AN=28339863&site=ehost-live&scope=site},
Year = {2007},
}