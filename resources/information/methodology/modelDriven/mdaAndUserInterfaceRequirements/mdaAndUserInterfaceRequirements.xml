<para>
  The requirements for a new system are frequently expressed as one
  technology-specific document (&quot;Business Requirements
  Specification&quot;), describing, for example, the development of a
  web-based portal or mobile device app.
</para>
<para>
  When we follow a model-driven development process, the requirements
  for such a project are ultimately interpreted in two independent
  &quot;layers&quot;:
</para>
<orderedlist numeration="arabic" spacing="compact">
  <listitem>
    <para>
      <emphasis>Functional requirements</emphasis>, which make no
      reference to any technology whatsoever. A technology-neutral
      analysis and design methodology like URDAD is followed, producing
      a PIM (Platform-Independent Model) that satisfies the
      requirements. Omitting technology from this process makes
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          it easy to reason about the core requirements,
        </para>
      </listitem>
      <listitem>
        <para>
          increases the likelihood for business process innovation, and
        </para>
      </listitem>
      <listitem>
        <para>
          builds a business asset that survives any technology changes.
        </para>
      </listitem>
    </itemizedlist>
  </listitem>
  <listitem>
    <para>
      <emphasis>Quality requirements</emphasis> that are orthogonal to
      the functional requirements. These include usability,
      auditability, maintainability, scalability, performance,
      accessibility, and so on. These qualities are not (and should not
      be) provided by the PIM. Instead, they are provided by the
      infrastructure within which the processes are deployed. For
      software systems, this may include the technologies that the
      processes are mapped to, and the container within which they are
      deployed. Aspects of the infrastructure may be provided &quot;off
      the shelf&quot;, or built for the project in question.
    </para>
  </listitem>
</orderedlist>
<para>
  In the context of a provided Business Requirements Specification, this
  process may at first seem to introduce unnecessary complexity into the
  process - after all, &quot;why don't you <emphasis>just build
  it</emphasis> ?&quot;
</para>
<para>
  Experience has, however, shown that this separation - which is a key
  aspect of <emphasis>model-driven development</emphasis>
</para>
<itemizedlist spacing="compact">
  <listitem>
    <para>
      fundamentally simplifies the process,
    </para>
  </listitem>
  <listitem>
    <para>
      limits project risk all around, and
    </para>
  </listitem>
  <listitem>
    <para>
      allows for a high degree of concurrency (simultaneous design or
      construction) from early on in the process.
    </para>
  </listitem>
</itemizedlist>
<sect1 id="where-does-the-user-interface-fit-into-all-of-this">
  <title>Where does the User Interface fit into all of this?</title>
  <para>
    While the user interface is arguably the most important aspect for
    most users of a system - and hence enjoys a great deal of emphasis
    in business requirements documentation - it may seem
    counter-intuitive that no mention of the user interface is made in
    the PIM, or in the functional requirements.
  </para>
  <para>
    When we perform technology-neutral analysis and design, it the
    entire system could functionally be realised by almost any
    technology - albeit with different <emphasis>qualities</emphasis>.
    During this phase, it helps to imagine that we are living a couple
    of hundred years in the past, with nothing but people, and
    paper-based forms.
  </para>
  <programlisting>
Where is the user interface now?
</programlisting>
  <para>
    If Victorian-era systems aren't your thing, imagine deploying your
    system a couple of hundred years into the
    <emphasis>future</emphasis> - where every component could be
    realised by a software component entirely, leaving us humans to get
    on doing things that we enjoy doing. When we do need to interact
    with the system, we may be able to directly communicate with it by
    thought.
  </para>
  <programlisting>
Again, where is the user interface now?
</programlisting>
  <para>
    When we design business processes independent of technology,
    <emphasis>we mean it</emphasis>. The User Interface is simply an
    adaptor between a human and a software component. Furthermore, we
    often need different adaptors depending on the direction of the
    service request, for example:
  </para>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        A web-based interface, when a person requests a service from a
        software component, and
      </para>
    </listitem>
    <listitem>
      <para>
        Dispatching an e-mail to a person, when a software component
        requests a service from a person.
      </para>
    </listitem>
  </itemizedlist>
</sect1>
<sect1 id="example-cancelling-a-subscription">
  <title>Example: Cancelling a subscription</title>
  <para>
    Consider a service offered by a component in a magazine distribution
    company to cancel a subscriber's subscription. The stakeholders have
    the following functional requirements:
  </para>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="Use_Case_Diagram__cancelSubscription__functionalRequirements.png" />
</imageobject>
</inlinemediaobject>
 After completing an URDAD analysis and design cycle (detail not shown here), the result might be the following responsibility allocation:</literallayout>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="Use_Case_Diagram__cancelSubscription__responsibilityAllocation.png" />
</imageobject>
</inlinemediaobject>
 And finally the following service contract:</literallayout>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="Class_Diagram__cancelSubscription__serviceContract.png" />
</imageobject>
</inlinemediaobject>
 If both the <emphasis>Administrator</emphasis> and the <emphasis>Subscriptions</emphasis> roles are played by human beings, no adaptor would be required between them. All that would be required is for a message path to be established (either by making a telephone call, or by walking to the appropriate desk) and requesting the service by voice:</literallayout>
  <programlisting>
&quot;Hi. Please cancel the subscrition for John Deere - subscription 
 number 46234 - effective next month. This is because of non-payment.&quot;
</programlisting>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="Component_Diagram__uiAdaptor__noAdaptorRequired.png" />
</imageobject>
</inlinemediaobject>
 The Administrator is verbally constructing and submitting a <emphasis>CancelSubscriptionRequest</emphasis>.</literallayout>
  <para>
    If the <emphasis>Administrator</emphasis> is a human being, and is
    interacting with a software implementation of
    <emphasis>Subscriptions</emphasis>, an <emphasis>adaptor</emphasis>
    is required. Typical application server environments allow us to
    host that adaptor together with the software system:
  </para>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="Component_Diagram__uiAdaptor__uiAdaptor.png" />
</imageobject>
</inlinemediaobject>
 The role played by this adaptor is still simply to let the user construct and submit a <emphasis>CancelSubscriptionRequest</emphasis>, albeit with certain qualities:</literallayout>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Efficiency: How much energy must the user expend to request the
        service?
      </para>
    </listitem>
    <listitem>
      <para>
        Usability: How easy is it for a user with minimal or no training
        to request the service?
      </para>
    </listitem>
    <listitem>
      <para>
        Security: How do we establish the identity of the user
        requesting the service?
      </para>
    </listitem>
  </itemizedlist>
</sect1>
<sect1 id="user-interface-features-as-determined-by-quality-requirements">
  <title>User Interface Features as determined by quality
  requirements</title>
  <para>
    Quality requirements such as <emphasis>usability</emphasis> dictate
    the use of certain strategies, and these dramatically impact the
    details of the user interface.
  </para>
  <para>
    In the case of canceling a subscription, the Administrator has to
    provide a <emphasis>reference</emphasis> (UML Association) to the
    subscriber in question. This implies an object reference, or a
    shared identifier, that the administrator needs to provide to the
    Subscriptions service.
  </para>
  <para>
    A user interface with <emphasis>low usability</emphasis> might leave
    the responsibility of identifying the subscriber, or entering the
    date correctly, entirely in the hands of the user:
  </para>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="lowUsability.png" />
</imageobject>
</inlinemediaobject>
 A user interface with <emphasis>high usability</emphasis> might make it much easier for the administrator to pick the subsciber whose subscription to cancel, employing multiple strategies: Name-based, as-you-type searching, and recalling recently-used information:</literallayout>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="highUsability.png" />
</imageobject>
</inlinemediaobject>
 The user interface with greater usability introduces the need for several finer-grained services. These are often not in the scope of a technology-neutral functional requirements, and are introduced only to support certain quality requirements of technology adaptors, like user interfaces. There are at least three such use-cases here:</literallayout>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Find subscriber by name
      </para>
    </listitem>
    <listitem>
      <para>
        Find recently-viewed subscribers (a service that is only
        possible for the user-interface to provide!), and
      </para>
    </listitem>
    <listitem>
      <para>
        Viewing, and probably maintainance of, the payment history of a
        subscriber
      </para>
    </listitem>
  </itemizedlist>
  <para>
    The same holds true for various pieces of infrastructure that make
    other qualities available, for example: having to &quot;log in&quot;
    before using the user interface, to support auditability and access
    control.
  </para>
</sect1>
<sect1 id="adators-to-other-technologies">
  <title>Adators to other technologies</title>
  <para>
    Of course, <emphasis>accessibility</emphasis> (through various
    channels) is a common quality requirement, and typical application
    deployment environments (such as Java EE) provide the ability to
    host various other adaptors - either to facilitate different user
    interface technology, or for systems integration:
  </para>
<literallayout><inlinemediaobject>
<imageobject>
<imagedata fileref="Component_Diagram__uiAdaptor__servicesAdaptor.png" />
</imageobject>
</inlinemediaobject>
 When we treat our user interface as simply an adaptor, we are usually ready for any other kind of adaptor to be rapidly applied, since the core service was designed without user interface (or any other technology-specific) concerns.</literallayout>
</sect1>
<sect1 id="summary">
  <title>Summary</title>
  <para>
    A <emphasis>Use-case</emphasis> is defined as a &quot;service of
    value&quot;. This is often translated into &quot;a reason for using
    the system&quot;. Logging in, or viewing a list of recently-accessed
    records, are not a &quot;reason to use a system&quot; -
    <emphasis>they only support certain quality requirements of other
    use-cases</emphasis>.
  </para>
  <para>
    If we don't separate the core technology-neutral analysis and design
    from the quality requirements of a particular adaptor like a user
    interface, the business analysis process can quickly become
    bogged-down in technology-specific complexity. Furthermore, business
    analysts can no longer fully model the business problem - it
    requires the involvement of technical specialists.
  </para>
  <para>
    Only once the core business processes are analysed and designed, the
    requirements of technology-specific adaptors - such as user
    interfaces - are analysed (we can't ignore them, after all!). This
    is now a much simpler, well-defined task, usually resulting in
    greater quality, consistency, and re-use.
  </para>
  <para>
    Separate design and technical implementation teams can, from an
    early stage of the project, start addressing both the functional and
    non-functional requirements concurrently, in the spirit of
    Model-Driven Development.
  </para>
</sect1>
