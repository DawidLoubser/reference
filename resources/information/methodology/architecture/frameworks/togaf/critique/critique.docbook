<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-06-02 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Potential criticisms of TOGAF</title>
    <para>
        <orderedlist>
            <listitem><formalpara>
                <title>No clear separation of architecture and design</title>
                <para>
                    Business functionality and processes are not treated as orthogonal to architecture.
                    In that context no notion of technology neutral business processes which are deployed across
                    the enterprise architecture. Whilst we would agree that it is worth designing a data or knowledge 
                    architecture independently from the architecture which hosts and executes the business
                    processes, we would feel that neither the application nor the data/knowledge architecture
                    should be use case specific or require use case or business process analysis or design
                    beyond the high level scoping. Similarly we would not want to define a data model using class
                    diagrams (or worse, entity relationship diagrams) as the data model should be evolve
                    incrementally as new use cases are deployed within the architecture and as change requests
                    are handled. The architecture should be able to absorb this evolution gracefully.
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>No notion of levels of granularity</title>
                <para>
                    Whilst TOGAF forces enterprise architects to think and work on different levels of granularity
                    like business architecture and applications architecture, it does not introduce the notion of
                    levels of granularity nor the concepts of performing architectural work at different levels of 
                    granularity. For example, the high level business architecture, enterprise systems architecture
                    (e.g. ESB based), and the architecture of a particular system within the organization which
                    is integrated within the enterprise ESB architecture (the architecture of a particular COBOL
                    or Java EE system) can be seen as architectures at different levels of granularity. Hence no
                    consistent framework of integrating lower levels of granularity within higher levels of granularity
                    and no consistent inclusion of enterprise architecture which encompasses the infrastructure within which
                    manual processes are executed.
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>Very time bound</title>
                <para>
                    Refers to specific tecnologies of today and specific approaches. Whilst referring in some detail to
                    different data approaches, there is no mentioning of knowledge, infrastructures for
                    auto-orchestrating processes, ....
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>Lack or orthogonalization of architecture domain</title>
                <para>
                    We would prefer to treat architecture design across levels of granularity orthogonal with concepts like migration
                    planning and implementation governance and would like to see the processes across these orthogonal domains
                    evolve independently.
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>No explicit step of high-level responsibility distribution across infrastructure components</title>
                <para>
                    This includes also the lack of explicitly distributing responsibilities across manual execution
                    environments, systems and external service providers.
                </para>
            </formalpara></listitem>
        </orderedlist>
    </para>
</section>    
        