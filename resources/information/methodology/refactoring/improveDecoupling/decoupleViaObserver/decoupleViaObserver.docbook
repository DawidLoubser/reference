<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-4-16 -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Decouple via observer</title>
    <para>
        <indexterm><primary>pattern</primary><secondary>observer</secondary></indexterm>
        <indexterm><primary>observer</primary><secondary>pattern</secondary>
        <see><indexterm><primary>pattern</primary><secondary>observer</secondary></indexterm></see></indexterm>
        <indexterm><primary>decoupling</primary><secondary>via observer</secondary></indexterm>
        This approach is particularly useful to remove direct dependencies of lower level classes on higher level classes. 
        A lower level class should not even be aware of the existence of higher level. Furthermore, removing such dependencies
        reduces significantly the impact of changes to classes and the need to recompile large code domains on making 
        changes to higher level classes.
    </para>
    <para>
        Thus, instead of a lower level class having a direct handle to a higher level class in order to directly request services
        from such class, the lower level class simply issues events. The higher level class can register to receive these events,
        <indexterm><primary>events</primary></indexterm>
        but the lower level class has no knowledge about the class which processes the events it generates.
    </para>
</section>    