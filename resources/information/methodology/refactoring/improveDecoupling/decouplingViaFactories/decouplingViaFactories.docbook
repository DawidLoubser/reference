<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-4-16 -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Decoupling via factories</title>
    <para>
        <indexterm><primary>decoupling</primary><secondary>via factories</secondary></indexterm>
        <indexterm><primary>decoupling</primary><secondary>from implementation classes</secondary></indexterm>
        <indexterm><primary>constructor</primary></indexterm>
        Constructors make it difficult to decouple fully from implementation classes as one cannot put them into an interface. 
        This is partially because
        constructors are a combination
        <indexterm><primary>static</primary></indexterm>
        of a static (class) instance creator together with an instance initializer. In order to fully decouple from classes one creates, one
        often uses factories.
    </para>
    <para>
        <indexterm><primary>factory</primary><secondary>object</secondary></indexterm>
        Factories have the added benefit like that of being able to pool objects, decouple the client from whether a class is a singleton or not,
        and many more. Furthermore, they improve responsibility localization (in the context of the single responsibility principle)
        by factoring out the responsibility of creating objects form the object behaviours themselves.
    </para>
</section>    