<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-3-20 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>RUP in context of Business Driven Development</title>
    <para>
        The Rational Unified Process claims to be based on a set of six key principles for business-driven development:
        <orderedlist>
            <listitem><para>Adapt the process.</para></listitem>
            <listitem><para>Balance stakeholder priorities.</para></listitem>
            <listitem><para>Collaborate across teams.</para></listitem>
            <listitem><para>Demonstrate value iteratively.</para></listitem>
            <listitem><para>Elevate level of abstraction.</para></listitem>
            <listitem><para>Continuous focus on quality.</para></listitem>
        </orderedlist>
      These six key principles are often abbreviated as the <literal>ABCDEF</literal> principles of RUP.
    </para>
    
    <section>
        <title>Adapt the process</title>
        <para>
            RUP follows the ideas of CMM in that it defines a base framework/template for a softeware development process
            which is then adapted to the complexities of the indidual projects and the maturity of the performing
            organization.
        </para>
        <para>
            For example, governance, size of the project, regulations, risk profile of project, client expectations, etc, 
            drive the degree of formality used in a project.
        </para>
        <para>
            RUP provides pre-configured 
            process templates for small, medium and large projects, which can be used for easier adoption. 
            The ceremony of the process should reflect the goals of the RUP phases. Adapting a process also encourages 
            the continuous improvement of a process in an organization.
        </para>
    </section>
    
    <section>
        <title>Balance stakeholder priorities</title>
        <para>
            This principle refers to trade-off processes which trade competing or conflicting requirements and expectations
            against each other.
        </para>
    </section>
    
    <section>
        <title>Collaborate across teams</title>
        <para>
            Projects are often realized across teams. Furthermore, projects may be part of larger programs with dependencies
            between the projects. This requires 
            <itemizedlist>
                <listitem><para>collaboration,</para></listitem>
                <listitem><para>synchronization of efforts, and</para></listitem>
                <listitem><para>sharing of resources</para></listitem>
            </itemizedlist>
            across teams.
        </para>
        <para>
            Cross-team collaboration is particularly important in the context of increasing demand for globally distributed development.
            Global organizations have teams at various locations which contribute to the services and business processes which are
            available to the global organization as a whole. These various teams thus need to collaborate to evolve the organization's business
            processes.
        </para>
        <para>
            The collaboration is not limited to requirements, but includes exchange of metrics, test results, release management 
            and project plans. That is especially true for RUP projects which are executed in an iterative-incremental approach.        
        </para>
    </section>
    
     <section>
         <title>Demonstrate value iteratively</title>
         <para>
             Testable functionality which generates value for the client has to be delivered to the client in short and
             regular intervals. This provides a framework for regular client feedback and enables the team to
             <itemizedlist>
                 <listitem><para>
                     address issues early,
                 </para></listitem>
                 <listitem><para>
                     continuously evolve their understanding of the requirements,
                 </para></listitem>
                 <listitem><para>
                     adjust the project to incorporate changes to the requirements,
                 </para></listitem>
                 <listitem><para>
                     effectively update the project risk factors based on feedback obtained around delivered value, and
                 </para></listitem>
                 <listitem><para>
                     maintain a solid understanding of the project status.
                 </para></listitem>
             </itemizedlist>
         </para>
     </section>  
    
    <section>
        <title>Elevate level of abstraction</title>
        <para>
            This key principle motivates the use of reusable assets such as software pattern, 4GL or Framework to name a few. 
            This prevents software engineers going directly from the requirements to custom-made software code. 
            A higher level of abstraction also allows discussions on different architectural levels. 
            These can be accompanied by visual representations of the architecture and design, for example using UML.
            <note><para>
                While RUP aims to abstract from the actual software code, 
                <emphasis>Model Driven Development</emphasis> (MDD) takes the level of abstraction a level further in that
                it requires technology and architecture neutral business process design which is completely decoupled from the
                systems architectures and implementation technologies used. Thus, while RUP design elements are typically
                technology specific, the design elements in MDD are technology neutral.
            </para></note>
        </para>
    </section>
    
    <section>
        <title>Continuous focus on quality</title>
        <para>
            Quality checks are not only at the end of each iteration but a continuous ongoing activity in the software engineering project, 
            often performed in a daily rhythm supported by the entire team. Automating test scenarios (scripts) helps in dealing with the 
            increasing amount of tests due to iterative development.
            
        </para>
    </section>
</section>