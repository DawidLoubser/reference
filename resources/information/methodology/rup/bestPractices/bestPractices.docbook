<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-3-20 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Best practices basis for the RUP</title>


    <para> The Rational Unified Process aims to enforce the following six best practices: <orderedlist>
            <listitem>
                <para>Iterative development.</para>
            </listitem>
            <listitem>
                <para>Requirements management.</para>
            </listitem>
            <listitem>
                <para>Component based architectures.</para>
            </listitem>
            <listitem>
                <para>Visual modeling of software.</para>
            </listitem>
            <listitem>
                <para>Software quality verification.</para>
            </listitem>
            <listitem>
                <para>Change control.</para>
            </listitem>
        </orderedlist>
    </para>

    <section>
        <title>Iterative development</title>
        <para> The Rational Unified Process supports an iterative approach to development that
            addresses the highest risk items at every stage in the lifecycle. This aims to
            significantly reducing a project's risk profile. </para>
        <para> The RUP aims to assit with managing software risk through demonstrable progress,
            frequent, executable releases that enable continuous end user involvement and feedback.
            Each iteration has to produce an executable release which is either a prototype or a
            subset of the final product. Through this RUP hopes ensure that the development team
            stays focused on producing results. Frequent status checks aim to ensure that the
            project stays on schedule. </para>
        <para> The iterative approach taken by the RUP also makes it easier to accommodate tactical
            changes in requirements, features or schedule. </para>
    </section>

    <section>
        <title>Requirements management</title>
        <para> The Rational Unified Process describes how to elicit, organize, and document required
            functionality and constraints, track and document tradeoffs and decisions, and capture
            and communicate business requirements. </para>
        <para> Functional requirements are captured via <emphasis>use cases</emphasis>. RUP drives
            the design, implementation and testing of software from use cases. Through this they aim
            to increase the likelihood that the final system fulfills the end user needs. </para>
    </section>

    <section>
        <title>Component based architectures</title>
        <para> The RUP focuses on early development and baselining of an executable architecture,
            prior to committing resources for full-scale development. RUP claims to describe an
            architecture that is flexible, accommodates change, is intuitively understandable, and
            promotes effective software reuse. <note>
                <para> Baselining refers to comparing performance to a historic metric or
                    "baseline". </para>
            </note>
        </para>
        <para> The Rational Unified Process supports component-based software development.
            Components are defined as non-trivial modules, subsystems that fulfill a clear function.
            The Rational Unified Process provides a systematic approach to defining an architecture
            using new and existing components. </para>
        <para> The components are assembled to define what RUP calls the architecture. The
            integration between these components can be facilitated through custom integration
            approached or via standard integration infrastructures like CORBA and web services.
        </para>
    </section>

    <section>
        <title>Visual modeling of software</title>
        <para> The RUP enforces UML based software modeling, treating the UML model as the primary
            source of information. </para>
    </section>

    <section>
        <title>Software quality verification</title>
        <para> The Rational Unified Process aims to provide assitence with the planning, design,
            implementation, execution, and evaluation tests. RUP requires tests for functionality,
            reliability, application and system performance. </para>
        <para> Quality assessment is claimed to be built into the process, in all activities,
            involving all participants, Testing is thus not not treated as an afterthought or a
            separate activity performed by a separate group. </para>
    </section>

    <section>
        <title>Change control</title>
        <para> The RUP describes how to control, track and monitor changes to enable successful
            iterative development. RUP aims to establish secure workspaces for each developer by
            providing isolation from changes made in other workspaces. </para>
        <para> RUP enforces change control across all software artifacts (<abbrev>e.g.</abbrev>
            models, code, build scripts, documents, <abbrev>etc.</abbrev>). </para>
        <para> In addition RUP aims to automate integration and build management. </para>
    </section>
</section>
