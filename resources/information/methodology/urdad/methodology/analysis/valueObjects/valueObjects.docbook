<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-2-18 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Stake holder requirements for exchanged value objects</title>
    <para>
        <indexterm><primary>value object</primary></indexterm>
        <indexterm><primary>data object</primary><seealso><indexterm><primary>value object</primary></indexterm></seealso></indexterm>
        Part of the analysis phase is the elicitation and specification of the stake holder requirements around the exchanged value object. For each service request there may be objects 
        (<abbrev>e.g.</abbrev> information) which the client needs to provide to the service provider upon service request as well
        as objects which the service provider returns to the client (either as return value or as output or input/output parameter).
    </para>
    <para>
        The details of the data structures are further refined as one goes through the design process, <abbrev>i.e.</abbrev> as one identifies that one requires further
        information, this information requirement is added to the data structure specifications of the exchanged value objects.
    </para>
    
    
    <figure xml:id="methodology.urdad.methodology.analysis.valueObjects.claimSettlementReport_fig">
        <title>Stake holder requirements for the claim settlement report.</title>
        <mediaobject><imageobject>
            <imagedata  contentwidth="150mm" scalefit="1" fileref="ClaimSettlementReport.jpg"/>
        </imageobject></mediaobject>
    </figure>
    
    
    <para>
        The structure of these objects is generally defined in a technology neutral way using UML class diagrams. 
        But the detailed requirements for the data structures of these value objects may only become apparent as
        one goes through the lower level analysis and design phases. The classes for these exchanged value objects
        are thus introduced, but the details around the data structures are often filled in only at a later stage.
    </para>
    <para>
        Note that the UML class diagrams specify the conceptual data structure in a technology neutral way. The data
        structure for, for example, a claim can be mapped onto various technology realizations like, a paper based claim
        form, a web based claim form, an XML data structure for the claim, a Java object, ...
    </para>
</section>    



