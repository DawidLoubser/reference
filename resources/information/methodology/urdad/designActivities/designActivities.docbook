<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-2-18 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Analysis and design principles supporting design qualities</title>
    <para>
        Using guidelines provided for methodologies in general as well as the widely accepted design principles,
        we have identified a list of design activities which assist in enforcing these design principles.
        The following table shows the attributes that we desire, and the design activities that promote them:
    </para>


    <table xml:id="table_designActivities">
        <title>Analysis and design principles supporting model qualities</title>
        <tgroup cols="10">
            <thead>
                <row>
                    <entry namest="shFirst" nameend="shLast" align="center">Design qualities</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry></entry>
                    <entry>Complete</entry>
                    <entry>Consistent</entry>
                    <entry>Simple</entry>
                    <entry>Modifiable</entry>
                    <entry>Cohesive</entry>
                    <entry>Testable</entry>
                    <entry>Traceable</entry>
                    <entry>Re-usable</entry>
                    <entry>Technology neutral</entry>
                </row>
                <row>
                    <entry>Single responsibility principle</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                </row>
                <row>
                    <entry>Clean layers of granularity</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                </row>
                <row>
                    <entry>Decouple via contracts</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                </row>
                <row>
                    <entry>Controller per use-case</entry>
                    <!-- Was: Controller assemble process across service providers -->
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                </row>
                <row>
                    <entry>Connect layers of granularity</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                </row>
                <row>
                    <entry>Structure from process</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                </row>
                <row>
                    <entry>Well defined PIM elements</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                </row>
                <row>
                    <entry>Diagrams as views onto model</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                </row>
                <row>
                    <entry>Standard modeling language</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center"></entry>
                    <entry align="center">x</entry>
                </row>
            </tbody>
        </tgroup>
    </table>


    <!-- ============================================== -->

    <section>
        <title>Enforce the single responsibility principle</title>
        <para>
            <indexterm>
                <primary>single responsibility principle</primary>
            </indexterm>
            <indexterm>
                <primary>responsibility localization</primary>
                <see>
                    <indexterm>
                        <primary>single responsibility principle</primary>
                    </indexterm>
                </see>
            </indexterm>
            <indexterm>
                <primary>cohesion</primary>
                <see>
                    <indexterm>
                        <primary>single responsibility principle</primary>
                    </indexterm>
                </see>
            </indexterm>
            The single responsibility principle and thus a high level of cohesion is enforced by grouping functional
            requirements into responsibility
            domains and assigning each responsibility domain to a separate services contract. Any system or
            organizational
            component as well as any external service provider realizing the full contract would be pluggable. Enforcing
            the single responsibility principle directly drives pluggability and reusability.
        </para>
        <para>
            In addition, it makes each
            object more understandable through being able to understand the contract(s) it realizes without having to
            understand the way in which the services specified in the contract are implemented.
        </para>
        <para>
            Finally, enforcing the single responsibility principle also facilitates simpler maintainability as
            <itemizedlist>
                <listitem>
                    <para>
                        maintenance is often required around a particular responsibility (enforcing the single
                        responsibility
                        principle leads to localized maintenance), and
                    </para>
                </listitem>
                <listitem>
                    <para>
                        one can verify whether, after maintenance work, the contractual obligations are still met.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <!-- ============================================== -->

    <section>
        <title>Fix the levels of granularity</title>
        <para>
            <indexterm>
                <primary>granularity</primary>
                <secondary>levels of</secondary>
            </indexterm>
            In the context of a work break down structure, one is automatically led to define different levels of
            granularity
            <citation>DM_1979_SASS</citation>.
            In order to generate clean layers of granularity, URDAD starts by identifying the first
            level responsibilities and assigns them to contracts. The business process
            and ultimately the service provider contracts are specified for this level of granularity before going,
            in a structured way, to the next lower level of granularity.
        </para>
        <para>
            This improves the maintainability of the design as changes to a business process often only need to be
            applied to the
            controller of a particular level of granularity.
        </para>
        <para>
            Fixing the levels of granularity also improves the understandability and usability. It facilitates
            incremental understanding of
            a design, enabling one to look at a high level business process before specifying how each of the individual
            high level
            work flow steps are realized through lower level business processes. Furthermore, a particular role player
            often only
            needs to work at a specific level of granularity without there being a need to understand either the higher
            or lower levels
            of granularity.
        </para>
    </section>

    <!-- ============================================== -->

    <section>
        <title>Decoupling via services contracts</title>
        <para>
            <indexterm>
                <primary>decoupling</primary>
            </indexterm>
            <indexterm>
                <primary>contracts</primary>
                <secondary>services</secondary>
            </indexterm>
            For each responsibility domain one assigns a separate services contract.
            The business process is designed to be realized across abstract service providers realizing these contracts.
            Design by contract rules are enforced ensuring the pluggability of service providers realizing the contract
            as well as the pluggability of specializations. This results in a loosely coupled design.
        </para>
        <para>
            Enforcing that service providers realize services contracts increases the reusability of such service
            providers
            as the client can compare the services requirements with what is guaranteed through the contract.
        </para>
        <para>
            Furthermore, enforcing contracts facilitates testability. It is difficult to write a sensible test if one
            does not know
            what the contractual obligations are which need to be tested.
        </para>
        <para>
            A contracts based also approach improves maintainability and extensibility through enhanced pluggability
            and testability.
        </para>
        <para>
            If all participants in a business process lock into contracts, the individual contracts can be realized
            within different
            technologies. A contract driven approach can be used to generate a technology neutral design.
        </para>
    </section>

    <!-- ============================================== -->

    <section>
        <title>Define for each level of granularity and each responsibility domain a controller</title>
        <para>
            The controller is that object which takes ownership of the service and which controls the business process
            realizing the service.
            Introducing for each level of granularity and each responsibility domain a controller localizes the business
            process
            information within the controller and decouples the service providers from that level of granularity. Taking
            any
            business process decisions out of individual service providers and localizing it within a controller results
            in simpler
            business process management and maintenance
            <footnote>
                <para>
                    This strategy is also directly used within Services Oriented Architectures.
                </para>
            </footnote>
            Furthermore, the increased decoupling leads to a higher level of reusability.
        </para>
        <para>
            The introduction of a controller for each level of granularity also simplifies the design and improves
            understandability
            as one only needs to look at the controller logic to understand the business process for the current level
            of granularity.
        </para>
    </section>

    <!-- ============================================== -->

    <section>
        <title>Derive structure from process</title>
        <para>
            Going from a use case directly to defining structure is difficult and often leads to complexity which may
            not be required.
            A simpler approach which leeds to reduced complexity is that of defining first the process
            through which the use case is realized at a particular level of granularity. One can then project out
            the minimal structure required to support the process.
        </para>
        <para>
            Furthermore, driving structure from process facilitates the traceability of any structural element to the
            process it supports
            and across the layers of granularity to the use cases for which it is required. Similarly, one can trace
            from a use case
            to the structural elements required across the levels of granularity to realize the use case.
        </para>
    </section>

    <!-- ============================================== -->

    <section>
        <title>Document relationships between layers of granularity</title>
        <para>
            Finally, documenting the relationships between the layers of granularity is required to support full
            bidirectional traceability across the layers of granularity.
        </para>
    </section>

    <!-- ============================================== -->

    <section>
        <title>Business benefits of desired design attributes</title>
        <para>
            Ensuring that the technology neutral business process design has the desired design attributes results in
            some direct business
            benefits.
        </para>
        <para>
            In particular, maintainability/extensibility, simplicity and a high level of reusability all contribute to
            reduced cost
            and reduced time to market.
            The design being technology neutral, simplicity and maintainability/extensibility all result in increased
            business
            flexibility. Reliability is increased through simplicity and testability.
            Finally, design simplicity and the design being technology
            neutral enables business itself to take control and ownership around the business processes -
            <abbrev>i.e.</abbrev>
            instead of technology being in control of the business processes.
        </para>
    </section>

    <bibliography>
        <xi:include href="../../../bibliography/DM_1979_SASS.docbook"/>
    </bibliography>

</section>
