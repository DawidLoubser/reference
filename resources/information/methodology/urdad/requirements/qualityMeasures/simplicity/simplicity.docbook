<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-1-15 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Simplicity</title>
    <para>
        Simplicity is an inverse measure of complexity. ,When assessing the complexity of a design one needs to assess both,
        the complexity of the designed processes and the structural complexity of the structure supporting the
        processes.
        
    </para>
    
    
    <section>
        <title>Direct measurement of simplicity</title>
        <para>
            A lot of work has been done to measure software and software design complexity
            <citation>Whitmire_1997_Object_Oriented_Design_Measurement</citation>
            <citation>McCabe_1989_Design_Complexity_Measurement_And_Testing</citation>, 
            covering documtural and process complexity resulting in a number of documented
            and tested algorithms for measuring design complexity.
            <note><title>TODO</title><para>More references</para></note>
        </para>
        <para>
            A commonly used measure for algorithmic complexity is the cyclomatic metric
            <citation>McCabe_1976_A_Complexity_Measure</citation>
            <citation>Weyuker_1988_Evaluating_Software_Complexity</citation>
            <citation>Zuse_1991_Software_Complexity</citation>
            which measure the complexity of the control flow graphs as
            <programlisting><![CDATA[
V(G) = E - n + 2p            
]]></programlisting>
            where <literal>E</literal> and <literal>n</literal> are the number of edges and nodes in the graph
            and <literal>p</literal> is the number of connected components.
            Gill and Kemerer <citation>Gill_2006_</citation>
        </para>
        <para>
            Structural complexity can be measured in a way which is similar to that of measuring the algorithmic complexity,
            i.e. by traversing all structural relationships (associations aggregation, composition and specialization relationships),
            making sure that, in the context of re-use, each path is only traversed once. Reuse will thus directly reduce the structural
            complexity.
        </para>
        <para>
            Various concrete approaches have been taken to measure structural complexity in object oriented software and designs,
            like the <emphasis>weighted class dependence graph (WCDG)</emphasis> 
            <citation>Zhou_2005_Measuring_Structural_Complexity_For Class_Diagrams</citation>
            <citation>Manso_2003_No-Redundant_Metrics_for_UML_Class_Diagram_Structural_Complexity</citation>
            which measures structurally complexity
            by assigning different weights to the different structural relationships with the weights themselves being a measure of
            the complexity of the relationship itself.
        </para>
    </section>


    <section>
        <title>Indirect simplicity measurement</title>
        <para>
            Direct complexity measures are useful for comparing the complexity of designs. In particular, they can be used to compare
            the complexity of designs generated using different analysis and design methodologies. 
        </para>
        <para>
            Direct complexity measures are, 
            however, less useful as an absolute, non-comparative measure. In particular, knowing that the complexity of a design is 
            <emphasis>x</emphasis> may not be that useful for somebody who would like to know which aspects of the design
            contribute unnecessarily or excessivly to the design complexity.
        </para>
        <para>
            The indirect measurement of simplicity lists the elements of a design which can be modified in order to reduce the complexity.
            They represent a set of concrete tests which are applied to the design. The possibly weighted number of elements for improvement
            can be used as a second, independent quantitative measure of design complexity.
        </para>
        <para>
            Below we list the tests which can be performed for the indirect assessment of design complexity. Each test looks for a particular
            undesirable design feature. These tests can be implemented as algorithms which interrogate the object model.
            <itemizedlist>
                <listitem><para>
                    The number of services or methods which are not used in any of the use cases offered to the users.
                </para></listitem>
                <listitem><para>
                    The number of classes and attributes which are not used in any of the processes.
                </para></listitem>
                <listitem><para>
                    The number of services for which the work flow is not localized within a separate controller.
                </para></listitem>
                <listitem><para>
                    The number of activities performed in processes which do not contribute to realizing any functional
                    requirements of any stake holders.
                </para></listitem>
                <listitem><para>
                    The number of diagrams (in particular, use case, sequence, activity and class diagrams) which
                    traverse levels of granularity.
                </para></listitem>
                <listitem><para>
                    The number of duplicated structural components.
                </para></listitem>
                <listitem><para>
                    The number of logical fragmants which are duplicated across processes.
                </para></listitem>
                <listitem><para>
                    THe number of lower level components which have a direct dependency on higher level components.
                </para></listitem>
            </itemizedlist>
            <!--
                - responsibility localization and every component only single responsibility
            -->
            
        </para>
    </section>
    

</section>

