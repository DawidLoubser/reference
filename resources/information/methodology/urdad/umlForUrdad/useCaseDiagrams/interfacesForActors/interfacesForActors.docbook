<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-2-4 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Using interfaces to represent actors</title>
    <para>
        In UML an actor represents an external role which participates in a use case through the exchange of
        information or value objects.
    </para>
    <para>
        URDAD requires that actors are represented by interfaces. This is consistent with the concept of an actor as a role 
        player. An interface, which can be seen as the core of a services contract, also represents the 
        role played by the entity which realizes the contract. Both, actors and interfaces are thus decoupled from the 
        concrete classes and objects. 
    </para>
    <para>
        Interfaces, however, can be traced across diagrams and can absorb actor requirements. For example,
        by using an interface to represent the user we can capture the user requirements in a contract which ultimately
        specifies the user obligations for the use case.
    </para>
    
    <figure xml:id="information.methodology.urdad.umlForUrdad.useCaseDiagrams.functionalRequirements.interfacesForActors_fig">
        <title>URDAD requires that you use interfaces for actors</title>
        <mediaobject><imageobject>
            <imagedata  contentwidth="150mm" scalefit="1"  fileref="interfacesForActors.png"/>
        </imageobject></mediaobject>
    </figure>       
    
    <para>
        As one defines the business process one will feed the services for <literal>providePackage</literal> one will feed
        <literal>acceptQuote</literal>, <literal>providePackage</literal> and <literal>acceptPackage</literal> services
        into the respective contracts for these external role players.
    </para>
</section>    