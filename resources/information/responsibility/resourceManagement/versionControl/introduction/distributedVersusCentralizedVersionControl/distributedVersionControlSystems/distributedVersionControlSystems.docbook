<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-2-4 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Distributed version control systems</title>
    <para>
        In a distributed version control system there is no central repository. People who work with the managed resources (e.g.
        business analysts, architects, developers, ...) have one or more working copy which is a complete repository in itself.
    </para>
    <para>
        Distributed VCS systems are designed with the intent that one repository is as good as any other, and that merges 
        from one repository to another are just another form of communication. 
        Any semantic value as to which repository should be trusted is imposed from the outside by process, not by the software itself.
    </para>
    <para>
        Thus, even though there is thus no distinction between working copies and repositories, 
        though a particular repository may be assigned the status
        of master repository. For example, Linus Torvalds manages the master repository for the Linux kernel and everybody 
        tries to get their changes into that master repository.
    </para>
    <para>
        In a distributed version control system provides a suitable infrastructure for the proverbial bazaar approach to open source.
        A typical working approach is to have different developers develop in their repositories and then market certain features
        to be included in other repositories.
    </para>
    
    <section>
        <title>Using a distributed version control system</title>
        <para>
            In a distributed repository your pull from and push into other repositories (e.g. the master respository). Assume you are
            checking out version 1 from a master repository. You then work locally committing versions/changesets a, b and c. The
            history of your local repository is thus 1-a-b. Assume another developer also started working with version 1 and then locally
            modified it and committed version 1-A into their local repository. He/she then decides to pull in your changes. Normally
            this would be done by creating a new branch and then merging the two branches resolving any conflicts in the process.
            The changes from both branches and the resultant merge could then be pushed into the master repository.
        </para>
    </section>
    
    <section>
        <title>Advantages of distributed version control systems</title>
        <para>
            A distributed version control system (DVCS) can do everything a centralized system can. DVCSs have, however,
            a number of advantages over their centralized counterparts. In particular
            <itemizedlist>
                <listitem><para>
                    they scale better with number of people (and systems) working on the resources,
                </para></listitem>
                <listitem><para>
                    it works better with people of different competency and trust-worthiness,
                </para></listitem>
                <listitem><para>
                    you still have version control functionality when you are off-line,
                </para></listitem>
                <listitem><para>
                    its faster and more efficient,
                </para></listitem>
                <listitem><para>
                    branching and merging is more natural and often implemented in a simpler and more usable way,
                </para></listitem>
                <listitem><para>
                    the full history is always locally available, 
                </para></listitem>
                <listitem><para>
                    developers can make their own local experimental branches and push into the master respository only
                    what is meant to be shared,
                </para></listitem>
                <listitem><para>
                    less risk around machine failure resulting in loss of history,
                </para></listitem>
            </itemizedlist>
        </para>
        <para>
            You may, however, experience a tendency of people doing more work in private (in the quiet) and only infrequently pushing their work into
            the master respository.
        </para>
    </section>
    
    <section>
        <title>Examples of distributed version control systems</title>
        <para>
            Examples of distributed version control systems include
            <itemizedlist>
                <listitem><para>
                    <emphasis>Mercurial</emphasis> used, for example, by the Mozilla foundation, for OpenJDK (Java), OpenSolaris, ALSA, ...,
                </para></listitem>
                <listitem><para>
                    <emphasis>git</emphasis> used for the Linux kernel project, Ruby on Rails, Fedora, Wine, Perl, X, VLC, ..., and 
                </para></listitem>
                <listitem><para>
                    <emphasis>bzr</emphasis> used by, for example, MySQL, Mailman, Squid and more and more by Ubuntu.
                </para></listitem>
            </itemizedlist>
        </para>
    </section>
</section>    
