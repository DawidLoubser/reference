<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-2-4 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Summary</title>
    <para>
        Version control systems aim to manage dynamic resources over their lifespan, providing controlled access
        the managed resources in their current and historic states. They aim to protect the resources from being corrupted
        do to concurrent modifications and allow for different development branches to be evolved independently and merged 
        again at a later stage. They provide controls like auditability and access control.
    </para>
    <para>
        Over time approaches to version control have become more flexible, less centralized and restrictive. Initial
        version control systems typically used a central repository and enforced serialized access to resources using the 
        <emphasis>lock-modify-unlock</emphasis> approach on a single centralized repository which represented the
        true source. This approach was not a viable approach for the open source development community where developers
        world wide collaborate to evolve a set of resources, and the <emphasis>lock-modify-unlock</emphasis>
        approach was relaxed to a <emphasis>copy-modify-merge</emphasis> approach where resources are not locked
        and developers are able to concurrently work on the same set of resources. The most notable of these where 
        <emphasis>CVS</emphasis> and <emphasis>Subversion</emphasis> with the latter being largely a replacement
        of the former. <emphasis>Copy-modify-merge</emphasis> based systems provide assistence with conflict resolution
        as conflicts can arise with different people working on the same parts of the same resources concurrently.
    </para>
    <para>
        However, the centralized repository representing a single truth is proving itself too restrictive and resulting in a move
        towards distributed version control systems where everyone is working on their own copy of the full repository with
        the different repositories evolving independently. This approach still supports the notion of one main repository 
        representing the core truth with the different developers pushing their modifications into such a repository. It, however,
        also supports the notion of different worlds exisiting side by side on an equal footing with communication links between
        these worlds. Such repositories are not only more efficient and flexible for developers, but are also aligned with a
        move towards the integrated knowledge era.
    </para>
</section>        