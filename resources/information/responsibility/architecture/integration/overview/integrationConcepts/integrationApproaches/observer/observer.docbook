<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->

<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
  
  <title>Observer</title>
  <para>
    When using an observer approach to integration, one system publishes events which one or more
    observers may potentially process. 
  </para>
  
  <section>
    <title>Directly coupled observers</title>
    <para>
      In this scenario, observers register directly with information sources. Changes in the implementation
      of the event source (<abbrev>e.g.</abbrev> its location) may require changes to potential 
      observers.
    </para>
    <para>
      The standard Java Beans approach implements this scenario, where multiple observer (property change listeners)
      may register themselves as observer to a single, shared object.
    </para>
  </section>  
  
  <section>
    <title>Messaging topics</title>
    <para>
      A messaging <emphasis>topic</emphasis> is a mechanism to use the <emphasis>observer</emphasis> approach
      in a reliable, loosely-coupled way.
      An information source publishes information (messages) to a topic. Multiple observers may potentially
      register with that topic. They will all receive the information published during their subscription
      period. The topic will persist a message until it has been successfully delivered to (and 
      acknowledged) by all current subscribers to that topic.
    </para>
  </section>  
</section>
