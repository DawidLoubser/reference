<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>
        Reliability
        <indexterm><primary>reliability</primary><secondary>in context of pipes and filters</secondary></indexterm>
    </title>
    <para>
       Reliability is relatively easy to achieve in an architecture which is based on the pipes and filters pattern. One would
       typically define services contracts for the processing units (filters). In addition one can use passive redundency in the
       context of clustering and service provider grids to improve reliability. One can even use active redundency by feeding
       a request into multiple pipes so that it is concurrently realized by multiple service providers. The first result received would
       be used.
    </para>
    <para>
        One aspect of reliability which is often more difficult to achieve in pipes and filters based architectures is related to
        atomic work flow steps spanning multiple filters, <abbrev>i.e.</abbrev> if a part of the process spanning multiple
        processing stages should be completed either as a whole or not at all. In real life this is usually done by performing
        inverse activities which undo the work done thus far. Software systems based on the pipes and filters architectural
        pattern often follow a similar approach by abandoning transaction rollback and using compensating work flows instead.
    </para>
        
</section>    
    