<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>
        Applicability of the pipes and filters pattern in software architectures
        <indexterm><primary>pipes and filters</primary><secondary>applicability of</secondary></indexterm>
    </title>
    <para>
        The pipes and filters pattern is usually a prime candidate if flexibility and composability is required. Examples
        of pipes and filters based architectures can be obtained from virtually any domain of software development.
    </para>
    
    <section>
        <title>Work-flow systems</title>
        <para>
            <indexterm><primary>work flow</primary><secondary>system</secondary></indexterm>
            Most work flow systems are based on the pipes and filters pattern. The pattern provides work-flow flexibility
            and the ability to easily assemble new work flows from existing processing units.
        </para>
    </section>
    
    <section>
        <title>Unix command framework</title>
        <para>
            <indexterm><primary>Unix</primary><secondary>command framework</secondary></indexterm>
            The infrastructure of the Unix command framework is based on the pipes and filters pattern. In enables users
            to assemble complex and powerful command from more basic commands by piping the output of one command
            into the input of another. This framework provides an extreme level of flexibililty directly from the command 
            line.
            <note><para>
                The Unix command framework implements essentially a pipeline which does not support branching or concurrencies.
            </para></note>
        </para>
    </section>
    
    <section>
        <title>Services Oriented Architectures</title>
        <para>
            <indexterm><primary>services oriented architecture</primary></indexterm>
            Services oriented architectures are based on the pipes and filters architectural pattern. A business process is
            assembled from services (the filters) by connecting them via pipes (usually message queues). Higher level
            services can be recursively assembled from lower level services.
        </para>
        <para>
            It is largely the pipes and filters pattern provides services oriented architectures the edge around flexibility
            of business processes and time-to-market for new business processes.
        </para>
    </section>
    
    <section>
        <title>Compilers</title>
        <para>
            <indexterm><primary>compiler</primary></indexterm>
            Compiler architectures are commonly based on the pipes and filters pattern. Filters performing, for example,
            <itemizedlist>
                <listitem><para>
                    lexical analysis, <indexterm><primary>lexical analysis</primary></indexterm>
                </para></listitem>
                <listitem><para>
                    parsing,  <indexterm><primary>parsing</primary></indexterm>
                </para></listitem>
                <listitem><para>
                    semantic analysis, <indexterm><primary>semantic analysis</primary></indexterm>
                </para></listitem>
                <listitem><para>
                    code generation, <indexterm><primary>code</primary><secondary>generation</secondary></indexterm>
                </para></listitem>
                <listitem><para>
                    optimization, and <indexterm><primary>optimization</primary></indexterm>
                </para></listitem>
                <listitem><para>
                    linking <indexterm><primary>linking</primary></indexterm>
                </para></listitem>
            </itemizedlist>
            are piped into one another in order to define the complete compilation work flow. 
            The processing steps are decoupled and any particular filter can be easily replaced with another.
        </para>
    </section>
    
</section>    