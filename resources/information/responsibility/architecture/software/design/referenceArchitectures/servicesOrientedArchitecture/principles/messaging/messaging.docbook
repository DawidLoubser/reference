<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Messaging</title>
  
  <indexterm>
    <primary>SOA</primary>
    <secondary>messaging</secondary>
  </indexterm>
  
  <para>
    Clients and Services communicate through the exchange of messages
    that are defined in a standard, self-describing format. This ensures 
    that any message travelling in an SOA-based system can be inspected, 
    and its intent and/or destination can be inferred.
  </para>
  
  <section>
    <title>Rich, self-contained messages</title>
    <!-- index term?? -->
    <para>
      The contents of service request messages in a standard object-oriented programming 
      language (such as Java) only make sense when considered in the
      context of the service (method) being invoked. For example, the
      contents of a service request could simply contain two numbers
      (the arguments, or parameters), and the intent of the message could
      be understood when one knows what service is being invoked (such as
      a <literal>:Calculator.add(:number,:number)</literal> or
      <literal>:Calculator.divide(:number,:number)</literal> service.
    </para>
    <para>
      The messages exchanged in an SOA environment (and, arguably, in any
      well-designed object-oriented system) should by rich units of
      information that don't require any external context in order to be
      useful. As a guideline, it is always useful to consider how
      real-world pieces of information (such as an application form, or
      a school report card) are structured: They can each be considered in
      their own right, and their intent (and contents) understood.
    </para>
  </section>
  
  <section>
    <title>Message exchange patterns</title>
    <indexterm>
      <primary>SOA</primary>
      <secondary>messaging</secondary>
      <tertiary>exchange patterns</tertiary>
    </indexterm>
    <para>
      An SOA recognises that it makes sense to participate in 
      different message exchanges using different <emphasis>calling
        semantics</emphasis> - called <emphasis>message exchange patterns</emphasis>.
    </para>
    <para>
      There is no abstract consensus as to the exchange patterns that an
      SOA must support. Earlier SOA specifications supported traditional
      <emphasis>synchronous</emphasis> (request/reply) and <emphasis>asynchronous</emphasis>
      (one-way request) semantics, while newer standards support a great deal more (such as
      <emphasis>reliable asynchronous</emphasis>, <emphasis>synchronous
        with optional reply</emphasis>, etc.
    </para>
    <para>
      Services contracts must clearly publish the message exchange
      patterns for services, and most SOA realisations (such as the
      second-generation web services frameworks) specify a set number of
      standard exchange patterns that must be universally understood by
      all participants of services.
    </para>
  </section>
    
</section>    
    