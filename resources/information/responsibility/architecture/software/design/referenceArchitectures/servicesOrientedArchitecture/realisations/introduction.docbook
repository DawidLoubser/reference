<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction</title>
  
  <para>
    Service-oriented principles could be realised by any number of
    technologies. If one of the primary goals - true interoperability - 
    is to be achieved, however, a concrete set of technologies must be
    selected within which to realise SOA. The chosen SOA
    platform is usually based on the various <emphasis>web services</emphasis>
    technologies. Furthermore, there appear to be two distinct
    <quote>flavours</quote> of SOA, based on the qualities and
    complexities they support, and these are often referred to as
    <emphasis>fundamental SOA</emphasis>, and <emphasis>contemporary
      SOA</emphasis>.
  </para>
  
  <itemizedlist>
    <listitem>
      <formalpara>
        <title>fundamental SOA</title>
        <para>
          Typically fully implementable in a wide range of frameworks currently
          available (as of 2007), this is based on the first (and
          widely deployed) versions of
          the web services standards (SOAP 1.1, WSDL 1.x) with simple
          message exchange patterns, and no explicit support for declarative
          service orchestration. Qualities such as
          reliability, transactions, publish-subscribe
          (event-driven messaging) - if required - need to be fully
          implemented by service developers; the platform does not specify
          any standards in this regard.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>contemporary SOA</title>
        <para>
          Based on the second generation web services standards (WSDL 2.x,
          SOAP 1.2, and the various WS-* standards) which are massively
          extensible, and specifies standards for a large number of
          service qualities, ranging from reliable messaging, atomic transactions
          and long-running business
          processes with compensating activities to centralised specification
          of business processes that typically execute on a services bus
          (ESB). A large number of message exchange patterns are supported
          in an extensible framework that could, in future, support even
          more. Few - if any - enterprise frameworks support the full
          stack of capabilities.
        </para>
      </formalpara>
    </listitem>
  </itemizedlist>
    
</section>    