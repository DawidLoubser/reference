<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Quality attributes assessment of contemporary SOA</title>
  
  <indexterm>
    <primary>SOA</primary>
    <secondary>contemporary</secondary>
    <tertiary>quality attributes</tertiary>
  </indexterm>
  
  <para>
    One of the significant additions to the second-generation
    SOA platform is explicit support (through a number of optional /
    modular standards) for a wide range of quality attributes.
  </para>
  <para>
    Once support for these standards are widely adopted, SOA will
    be a significantly more capable global computing platform,
    facilitating a large degree of autonomy.
  </para>
  <para>
    Bear in mind that these quality attributes can only be realised if the
    underlying SOA frameworks, used to publish and consume services,
    support them correctly. SOA effectively provides the mechanism
    (semantics) of how to achieve these qualities in standard ways,
    typically though extra information in the WSDL contracts, or the
    exchanged SOAP messages.
  </para>
  
  <section>
   <title>How are quality attributes specified?</title>
    <para>
      SOA allows the qualities provided by - or required by - a service to
      be declared in the service description (WSDL) using the
      <literal>WS-Policy</literal> mechanism. This allows
      <emphasis>assertions</emphasis> to be made at a per-service, or
      per-operation level. The <emphasis>WS-MetaDataExchange</emphasis>
      standard provides a standard protocol to query the policies
      for a particular service, in order for clients to know how to
      correctly interact with services.
    </para>
  </section>
  
  <section>
    <title>Overview of SOA quality attributes</title>
    
    <section>
      <title>Integrability</title>
      <para>
        SOA applies virtually all the common strategies that make a system
        more suitable to integrate with others (a common messaging protocol,
        contracts-based design, naming service, ...). This is probably the
        strongest quality of any SOA-based system.
      </para>
      <para>
        The <literal>WS-BPEL</literal> and <literal>WS-CDL</literal>
        (Choreography Description Language) can formally describe the semantics
        of how a number of services will interact or cooperate, making it
        easier to integrate existing or new services in such an interaction.
      </para>
    </section>
    
    <section>
      <title>Flexibility</title>
      <para>
        Though the ultimately chosen container and programming language may
        limit the flexibility of individual services, SOA greatly increases 
        the flexibility of the overall system by hiding implementation
        changes in the individual service realisations from each other.
        If a naming service and broker(s) are used, this would include
        location changes.
      </para>
      <para>
        Because SOA promotes the publishing of small, independent services
        that are re-usable throughout te organisation, and across
        organisations, overall flexibility (ability to introduce new use
        cases) is also improved.
      </para>
      <para>
        If <literal>WS-BPEL</literal> is used to specify business processes,
        the business process itself may easily be changed through simple
        graphical tools, reducing the level of technical skill and
        amount of development time required.
      </para>
    </section>
    
    <section>
      <title>Scalability</title>
      <para>
        Though ultimately dependent on individual SOA frameworks, SOA
        fosters a very scalable system by hiding implementation
        details. Load balancing / clustering could easily be employed,
        and SOA frameworks can perform object pooling (such as with
        EJB) for individual services.
      </para>
    </section>
    
    <section>
      <title>Security</title>
      <para>
        There are several standards that enable secure interaction with
        services - from basic <literal>WS-Security</literal> and
        <literal>WS-SecureConversation</literal> which allows for the
        establishment and sharing of security contexts, and the
        confidentiality and integrity of messages - to
        <literal>WS-Federation</literal>, a standard to specify how user and
        machine identities are shared and trusted across disparate security
        systems.
      </para>
    </section>
    
    <section>
      <title>Reliability</title>
      <para>
        Reliability is well addressed, both at a messaging/infrastructure
        level, with standards like <literal>WS-ReliableMessaging</literal>
        to ensure message delivery in the event of unreliable transport
        layers.
      </para>
      <para>
        At a business process level, reliably can be ensured through the
        existence of atomic transactions
        (<literal>WS-AtomicTransaction</literal>, a standard protocol to
        propgate transactional contexts and control for short, atomic processes)
        as well as <emphasis>compensating activities</emphasis> for
        long-running business processes, through the
        <literal>WS-BusinessActivity</literal> standard.
      </para>
      <para>
        The standard supporting reliability in SOA allow for the literal
        implementation of even complex, long-running business processes in
        a very natural way.
      </para>
    </section>
    
    <section>
      <title>Portability</title>
      <para>
        The <literal>WS-BPEL</literal> standard allows the developer to
        define a business process (realising a service) based on the
        interaction with several other services. As this higher-level service is
        no longer implemented in a framework-specific programming
        language, a high level of portability can be achieved (at the
        higher levels of granularity, at least) even across completely
        incompatible SOA frameworks.
      </para>
    </section>
    
  </section>
</section>    