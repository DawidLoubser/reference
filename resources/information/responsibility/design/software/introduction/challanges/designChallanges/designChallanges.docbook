<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Design challanges</title>
    <para>
        Software design is intrinsically difficult. One needs to generate a "good design" which requires that one
        needs to understand what differentiates a "good design" from one which we would regard as a design of lower quality.
    </para>
    <para>
        Then we need to be able to validate a design in order to establish that the design does indeed provide a solution to the requirements.
    </para>
    <para>
        Finally we need to be able to effectively communicate the design to the team or system responsible for mappinf the 
        design onto a software implementation in the specified target architecture and technologies.
    </para>
    
    <section>
        <title>Generating a "good design"</title>
        <para>
            Before we can claim to have generated a "good design" we need to understand what makes one design better than another. 
            Certainly sumplicity is core. If there are two design solutions which are otherwise equal, than the simpler solution is preferable. 
            Complexity adds risk and cost/ Tjis is not only for the initial design and implementation, but also over the entire life span of
            the system - <abbrev>i.e.</abbrev> while the system needs to be maintained.
        </para>
        <para>
            Another widelu accepted criterion for a good design is that it should exhibit good responsibility localization, <abbrev>i.e.</abbrev>
            a high level of cohesion. Preferably each object should only have a single resoinsibility and all its services should fall within its 
            responsibility focus.
        </para>
        <para>
            A good design djouls also yield a high level of re-usabiity, <abbrev>i.e.</abbrev> should genrate reusable components. This
            will reduce the long-term development and maintenance costs and also the risk (both, the risk assocoated with the additional 
            development required if one does not achieve a high level of reuse adn inconsistency risk in that different system elements
            may perform the same processing step in different ways.
        </para>
        <para>
            A good design should preferably be such that the architecture and implementation technologies can vary independently, <abbrev>i.e.</abbrev> 
            that one can change the architecture and implementation technologies without having to change the design and vice versa. This
            ensures that a design is impelemtable within different architectures and technologies and that technology and architecture changes
            do not require that the design needs to be redone.
        </para>
    </section>
    
    <section>
        <title>Requirements tracing</title>
        <para>
            One would like to be in a position where any design element can be traced back to an aspect of the requirements. This enables one to
            <itemizedlist>
                <listitem><para>
                     determine which aspects of a system are impacted on a change in the requirements,       
                </para></listitem>
                <listitem><para>
                    the aspects of a system which have become obsolete due to changing requirements, and
                </para></listitem>
                <listitem><para>
                    the porential causes of a particular requirement not being realized correctly (bug tracing).
                </para></listitem>
            </itemizedlist>
        </para>
    </section>
    
    <section>
        <title>Validating a design</title>
        <para>
            It is beneficial if one can validate whether a design does indeed procide a solution to the requirements - <abbrev>i.e.</abbrev>
            before the design is actually implemented. Otherwise one is only able to do validation and testing once the implementation mapping
            has been completed.
        </para>
    </section>
    
    <section>
        <title>Communicating a design</title>
        <para>
            The design needs to be communicated to the team or system resonsible for the implementation. Using a semantically
            solid design language like the Unified Modeling Language (UML) makes communication of the design simpler and less 
            error prone. Most developers are these daus at least reasonably proficient in interpreting UML diagrams.
        </para>
    </section>
    
    
</section>    