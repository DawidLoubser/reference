<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Decoupling via the observer pattern</title>
    <para>
        Lower level objects should preferably know nothing of and have no dependencies on higher level objects. Similarly, objects
        which are in principle unrelated should have no dependencies on each other eather. In both cases one commonly uses the
        observer pattern for decoupling.
    </para>
    <para>
        Often certain activities or events in lower level objects should result in certain activities being launched by higher
        level objects. For example, a change of value or risk in a particular asset may result in a portfolio manager 
        rehedging the portfolio. An asset should know nothing of portfolios and even less about portfolio managers. Instead,
        the lower level object (the asset) will publish appropriate events to observers or event listeners. The higher level
        object (e.g. the portfolio manager) would register as event listener with the lower level object, but the event sources
        would be decoupled from the observers via an appropriate interface which must be implemented by any observer.
    </para>
    
    <section>
        <title>Dependency Inversion Principle</title>
        <para>
            
            
            * High-level modules should not depend on low-level modules. Both should depend on abstractions.
            * Abstractions should not depend on details. Details should depend on abstractions.
            
            Dependency Inversion Principle states that we should decouple high level modules from low level modules, introducing an abstraction layer between the high level classes and low level classes. Further more it inverts the dependency: instead of writing our abstractions based on details, the we should write the details based on abstractions.
            
            Dependency Inversion or Inversion of Control are better know terms referring to the way in which the dependencies are realized. In the classical way when a software module(class, framework, …) need some other module, it initializes and holds a direct reference to it. This will make the 2 modules tight coupled. In order to decouple them the first module will provide a hook(a property, parameter, …) and an external module controlling the dependencies will inject the reference to the second one.
            
            By applying the Dependency Inversion the modules can be easily changed by other modules just changing the dependency module. Factories and Abstract Factories can be used as dependency frameworks, but there are specialized frameworks for that, known as Inversion of Control Container.
        </para>
    </section>
</section>    