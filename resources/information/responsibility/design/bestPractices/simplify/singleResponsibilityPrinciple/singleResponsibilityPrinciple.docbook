<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Enforce the single responsibility principle</title>
    <para>
        This is perhaps the most important best practice for design. It simply states that each class
        (and interface) should have one and only one responsibility. It may have multiple services
        or data fields, but they all need to be within a single domain of responsibility. Design
        methodologies like URDAD enforce the single responsibility principle.
    </para>
    <para>
        Good responsibility localization results in
        <itemizedlist>
            <listitem><para>
                smaller, simpler classes and interfaces which are easier to understand and implement,
            </para></listitem>
            <listitem><para>
                localized maintenance (usually change requests are around particular responsibility), 
            </para></listitem>
            <listitem><para>
                significantly improved reusability (classes which have a single reponsibility are much more
                likely to be reusable than those which have a particular combination of responsibilities
                required for a particular domain).
            </para></listitem>
        </itemizedlist>
    </para>
    
    <section>
        <title>The interface segragation principle</title>
        <para>
            A special case of the single responsibility principle is the interface segragation principle which
            aims to ensure that clients should only be exposed to the interfaces they need to use.
        </para>
    </section>
</section>    