<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Process abstraction</title>
    <para>
        There are a number of design techniques which can be used to achieve process abstraction
        including
        <itemizedlist>
            <listitem><para>
                using a contracts based approach,
            </para></listitem>
            <listitem><para>
                achieving process abstraction through levels of granularity, and
            </para></listitem>
            <listitem><para>
                using work-flow step lookup to achieve process abstraction.
            </para></listitem>
        </itemizedlist>
        In addition there are a number of design patterns which directly facilitate process
        abstraction.
    </para>
    
    <section>
        <title>Process abstraction through services contracts</title>
        <para>
            Process abstraction is directly implied when following a contract-driven approach where the
            service providers and hence the processes are pluggable.                
        </para>
    </section>
    
    <section>
        <title>Process abstraction through levels of granularity</title>
        <para>
            Abstraction is also a mechanism used to reduce complexity by handling different details 
            at different levels. When referring to a particular service, one usually abstracts from the
            details of the individual work flow steps - one may refer to the process of painting a room
            without having decided whether a roller or a brush will be used and how one will mask off
            the areas which should not receive paint.=
        </para>
        <para>
            This, whilst the high-level, abstract process is often common the details of what is done at lower
            levels of granularity is still pluggable. Effectively managing levels of granularity and decoupling
            the different levels of granularity from one another enables one to abstract from the details of the
            work flow steps in a process.
        </para>
    </section>
    
    <section>
        <title>Process abstraction through service and workflow-step lookup</title>
        <para>
            The decision about which process should be used for a particular service or work flow step
            may often be done by a different entity to the one requiring the service or work flow step.
            In that case the appropriate process can be obtained by a lookup or querying mechanism.
        </para>
    </section>
    
    <section>
        <title>Process abstraction provided by design patterns</title>
        <para>
            A number of design patterns focus specifically on process abstraction. In particular
            <itemizedlist>
                <listitem><para>
                    the strategy pattern supports pluggable processes for services,        
                </para></listitem>
                <listitem><para>
                    the template method pattern which supports pluggable processes for the individual
                    work flow steps,
                </para></listitem>
                <listitem><para>
                    the chain of responsibilities pattern,
                </para></listitem>
                <listitem><para>
                    the builder pattern for pluggable construction processes,
                </para></listitem>
            </itemizedlist>
        </para>
    </section>

allows designers to focus on solving a problem without being concerned about irrelevant lower 
level details (procedural abstraction - named sequence of events, data abstraction - 
named collection of data objects)

    
</section>    