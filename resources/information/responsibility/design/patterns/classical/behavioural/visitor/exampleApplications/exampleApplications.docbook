<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Example applications</title>
    <para>
        The visitor pattern may become a lot clearer by looking at a simple example application.
    </para>
    
    <section>
        <title>Total salary calculator</title>
        <para>
            Consider the example where you have a polymorphic collection of employees. 
            All employees earn a basic salary, but different types of employees receive 
            different types of perks. For exampple,  we may have managers which receive a car allowance and developers which receive a
            computer allowance.
        </para>
        
        <figure>
            <title>The structure used for a visitor adding a getTotalSalary() service to employees.</title>
            <mediaobject><imageobject>
                <imagedata fileref="totalSalaryCalculatorStructure.jpg"/>
            </imageobject></mediaobject>
        </figure>        

        <para>
            The <literal>TotalSalaryCalculator</literal> adds a polymorphic 
            <literal>getTotalSalary()</literal> method to the class hierarchy
            which executes different algorithms for different types of employees.
        </para>
        
        <para>
            The dynamics of the pattern is illustrated in the sequence diagram shown below.
        </para>
        
        <figure>
            <title>The dynamics of the TotalSalaryCalculator.</title>
            <mediaobject><imageobject>
                <imagedata fileref="totalSalaryCalculatorDynamics.jpg"/>
            </imageobject></mediaobject>
        </figure>        
    </section>
    
    
</section>
