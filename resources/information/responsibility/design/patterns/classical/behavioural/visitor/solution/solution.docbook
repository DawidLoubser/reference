<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Solution</title>
    <para>
        The solution has 3 aspects:
        <orderedlist>
            <listitem><para>
                The responsibility distribution across the elements of the visitor pattern.
            </para></listitem>
            <listitem><para>
                The  static structure required by the visitor pattern.
            </para></listitem>
            <listitem><para>
                The dynamics (<abbrev>i.e.</abbrev>  the algorithm) used by the visitor pattern.
            </para></listitem>
        </orderedlist>
    </para>
    
    <section>
        
        <title>Responsibility Allocation</title>
        <para>
            The abstract collaboration
            shows the responsibilities of the different role players of the visitor pattern.
        </para>
        
        <figure>
            <title>Responsibility allocation across the members of the visitor pattern.</title>
            <mediaobject><imageobject>
                <imagedata fileref="responsibilityAllocation.jpg"/>
            </imageobject></mediaobject>
        </figure>        
        
    </section>
    
    <section>
        
        <title>Structure</title>
        <para>
            The structure of the visitor pattern is relatively straight forward. We have a class hierarchy
            which accepts visitors. Different specializations of a visitor add different polymorphic
            services to the class hierarchy. 
        </para>
        
        
        <figure>
            <title>The structure of the visitor pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="structure.jpg"/>
            </imageobject></mediaobject>
        </figure>        
    </section>
    
    <section>
        <title>Dynamics</title>
        <para>
            The dynamics of the visitor pattern may look a little convoluted at first:
            <orderedlist>
                <listitem><para>
                    Clients request a service added to a class hierarchy via a visitor from an element added
                    to that class hierarchy by asking the element to accept the vistor.
                </para></listitem>
                <listitem><para>
                    The element then invites the visitor to visit it, providing the visitor with its address --
                    how else could the visitor come and visit?
                </para></listitem>
                <listitem><para>
                    The visitor then makes one or more call-backs to that element, requesting any information
                    it may need from the element to realize its service. 
                </para></listitem>
                <listitem><para>
                    Upon completion of the service, the visitor returns control to the element which, in turn,
                    returns control back to the client.
                </para></listitem>
                <listitem><para>
                    At this stage the client may request the deliverables of the service request directly from
                    the visitor.
                    <note>
                        <para>
                            Alternatively the visitor may accumulate a result across multiple service requests and the
                            result may be queried at the end.
                        </para>  
                    </note>
                </para></listitem>
            </orderedlist>
        </para>
        
        <figure>
            <title>The dynamics of the visitor pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="dynamics.jpg"/>
            </imageobject></mediaobject>
        </figure>        
    </section>
    
</section>
