<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Example applications</title>
    <para>
    </para>
    
    <section>
        <title>Help systems</title>
        <para>
            Help systems often use the chain-of-responsibilities pattern. If there is no help on the
            component (<abbrev>e.g.</abbrev> text field) you are on then it is passed on to the
            next level in the containment hierarchy (<abbrev>e.g.</abbrev> the next higher level
            panel), until a component provides help.
        </para>
    </section>
    
    <section>
        <title>Generic pricing of contracts</title>
        <para>
            In a generic contract pricing framework each
            contract could request a price along a chain of potential pricers until a pricer is able to
            price that particular contract.
        </para>
    </section>
    
    <section>
        <title>Decision making in an organization</title>
        <para>
            The responsibility of making a specific decision is passed up the management hierarchy
            until it reaches a level within the organization where that decision can be taken.
        </para>
    </section>
    
    <section>
        <title>Support chains</title>
        <para>
            A support request will typically feed into a chain starting with level 1 support which may be
            able to provide basic user support though to configuration and customization support, 
            hardware support, and ultimately developer support. The first support level which can handle
            the request successfully will do so.
        </para>
    </section>
    
    <section>
        <title>Inheritance hierarchies</title>
        <para>
            Inheritance hierarchies automatically implement the chain-of-responsibilities pattern. If 
            a service is requested from an instance of a class which does not provide the service it is
            automatically forwarded to its superclass until it reaches the first class which realizes
            the service. 
        </para>
    </section>
    
    <section>
        <title>Exception handling frameworks</title>
        <para>
            An exception is passed along the calling chain until, at some level in the calling hierarchy,
            the exception is caught and handled. The source of the exception is completely decoupled
            from the exception handler.
        </para>
    </section>  
    
</section>
