<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Consequences</title>
    <para>
        The pattern is very simple, yet it provides a number of important benefits.
        <itemizedlist>
            <listitem><formalpara>
                <title>Clients may be able to choose the algorithm</title>
                <para>
                    In many cases the strategy or algorithm for a service should be selected by the
                    client. For example, users of a container select the layout manager which should
                    be used by a particular container.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Runtime algorithm switching</title>
                <para>
                    The strategy pattern makes it possible to change the algorithm used to realize
                    a service at run-time.
                </para>
            </formalpara></listitem>    
            
            <listitem><formalpara>
                <title>Avoids conditionals in service implementations</title>
                <para>
                    Often if a strategy pattern is not used, but different algorithms are to be supported,
                    the resultant code uses conditional to switch between different algorithms. This has
                    a number of disadvantages:
                    <itemizedlist>
                        <listitem><para>
                            The service becomes complex to understand and does not scale well.
                        </para></listitem>
                        <listitem><para>
                            The context needs to know about the possible algorithms which its service may use.
                            <note><para>
                                When using the strategy pattern, the context need not know anything about the
                                various concrete algorithm providers -- it interfaces only via the 
                                <literal>Strategy</literal> interface.
                            </para></note>
                        </para></listitem>
                    </itemizedlist>
                </para>
            </formalpara></listitem>
        </itemizedlist>
    </para>
</section>
