<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>The state pattern</title>
    <para>
        The <emphasis>state pattern</emphasis> addresses the fundamental problem on how 
        an object can realize a service differently, depending on the state the object is in. If one has not had
        previous exposure to design patterns one may want to introduce a state variable which would be 
        maintained by the object and in the service one would have base selective execution of certain logic
        on the state variable
        using <literal>if</literal> and <literal>switch</literal> statements.
    </para>
    <para>
        The state pattern, on the other hand, provides a very simple and elegant solution. Knowing the pattern one
        would think the solution is virtually obvious - how else would one solve such a problem? However, as with
        many of the design and architectural patterns, not having had exposure to that pattern may lead one to
        a significantly more complex design
    </para>
    
    <xi:include href="intent/intent.docbook" />
    <xi:include href="solution/solution.docbook" />
    <xi:include href="exampleApplications/exampleApplications.docbook" />
    <xi:include href="consequences/consequences.docbook" />
    <xi:include href="implementationGuidelines/implementationGuidelines.docbook" />
    <xi:include href="relatedPatterns/relatedPatterns.docbook" />
    
</section>    