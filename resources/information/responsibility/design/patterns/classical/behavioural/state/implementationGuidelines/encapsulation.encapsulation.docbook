<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Encapsulation</title>
    <para>
        States should be encapsulated. In particular:
        <itemizedlist>
            <listitem><formalpara>
                <title>Encasulate state specific aspects within state</title>
                <para>
                    All state specific aspects including state specific logic, data and relationships should be encapsulated within
                    the state itself.
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>Encapsulate states</title>
                <para>
                   The users of the context should generally not be aware of the states and should at no stage be exposed to the states.
                   <note><para>
                       An exception of this is the exposed state pattern which aims to provide contexts the ability to offer different
                       services depending on the state the context is in.
                   </para></note>
                   In addition to the above, states are often context specific and often one would like to explicitly prevent reuse of
                   the state classes. In that case one would define the state classes as static nested  classes or at least as inner classes.
                   The preference for static nested classes over inner classes is based on not wanting the states themselves to have a 
                   handle to the context, decoupling them rather from the context via the observer pattern (an inner class has a handle
                   to the outer class instance within which it exists).
                </para>
            </formalpara></listitem>
        </itemizedlist>
    </para>
</section>    