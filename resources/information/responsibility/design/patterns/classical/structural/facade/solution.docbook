<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.design.patterns.classical.structural.facade.solution">

  <title>Solution</title>
  <para> 
    Define a facade which publishes the high-level services as required by users in a manner that
    is accessible to users. 
    <note>
         <para>
        The facade itself contains no business logic.
      </para>
      </note>  
  </para>

  <section>
      <title>Responsibility allocation</title>
      <para>
      The abstract collaboration shown in
      the following diagram
      illustrates the responsibilities of the role players of the facade pattern.
    </para>  
    
      <figure xml:id="resources.information.concepts.design.patterns.classical.structural.facade.responsibilityAllocation_fig">
         <title>The responsibilities of the role players of the facade pattern</title>
         <mediaobject>
            <imageobject>
               <imagedata fileref="responsibilityAllocation.jpg"/>
            </imageobject>
         </mediaobject>
      </figure>
    
  </section>
  
  <section>
      <title>Structure</title>
      <para>
      The facade pattern provides a unified, high-level interface to clients. This interface makes a class 
      library more accessible to users. Two candidate structures of a facade pattern are shown in
      the following diagram:
    </para>
  
      <figure xml:id="resources.information.concepts.design.patterns.classical.structural.facade.structure_fig">
         <title>
         Structure of the facade pattern. 
      </title>
         <mediaobject>
            <imageobject>
               <imagedata fileref="structure.jpg"/>
            </imageobject>
         </mediaobject>
      </figure>
    
      <para>
      In the first scenario, the package does not export the lower-level system classes. Only the facade,
      which is part of the system package, is exported and hence the system classes are completely
      hidden from users.
    </para>
      <para>
      In the second scenario we have a system package which exports its classes and we provide a
      facade externally. In this case different user groups may develop their own facade for the 
      system.
    </para>
  </section>
  
</section>