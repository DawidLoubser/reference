<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.design.patterns.classical.structural.decorator.consequences">

  <title>Consequences</title>
  <para>
      <itemizedlist>
         <listitem>
            <formalpara>
               <title>Avoids complex specialisation hierarchies</title>
               <para>
          Using the decorator pattern avoids complex specialisation hierarchies 
          with a subclass for any  particular combination of responsibilities.
      </para>
            </formalpara>
         </listitem>
         <listitem>
            <formalpara>
               <title>Better localisation of responsibilities</title>
               <para>
         Each decorator encapsulates a specific responsibility which can be added to
         different components. The responsibility is only defined at that particular
         place. For example, scrolling support is only defined within a single class
         in the Java GUI class libraries -- <literal>ScrollPane</literal>. Any
         object which requires scrolling (<abbrev>e.g.</abbrev> an editor pane, a
         regular or drop-down list box, or an entire panel) is simply decorated with
         a <literal>ScrollPane</literal>.
      </para>
            </formalpara>
         </listitem>
         <listitem>
            <formalpara>
               <title>Decorating at object-level</title>
               <para>
        Individual instances of the same class can be decorated with different responsibilities.
      </para>    
            </formalpara>
         </listitem>
         <listitem>
            <formalpara>
               <title>Adding/removing responsibilities dynamically</title>
               <para>
        The decorator pattern enables you to add and remove responsibilities for a 
        service on the fly. 
      </para>    
            </formalpara>
         </listitem>
      </itemizedlist>
  </para>
  
  <section>
      <title>Object identity is not preserved</title>
      <para>
      Technically speaking the object which is decorated and the decorated object are two
      different objects and the <emphasis>client object needs to change its reference</emphasis> 
      from the original object to the decorator.
    </para>
      <para>
      This compromises the identity of the object and can be vulnerable to error if the implementation
      is not done very carefully.
      If the service is requested directly from the object and not through the decorator, the
      original non-decorated service will be provided.
    </para>
  </section>
</section>