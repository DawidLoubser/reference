<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.design.patterns.classical.structural.decorator.benefitsAboveMethodOverriding">

  <title>Benefits above method overriding</title>
  <para>
    You may ask yourself 
    <blockquote>
         <para>
            <quote>
               <emphasis>
          Why have the decorator pattern at all, if we can simply define a specialised class which
          decorates the superclass by delegating the realisation of a service request to it before
          adding any additional responsibilities?
        </emphasis>
            </quote>
         </para>
      </blockquote>
  </para>
  <para>
    The core benefits for using the decorator pattern instead of simple method overriding are that
    <itemizedlist>
         <listitem>
            <para>
        you can add decorations to an object on the fly and that
      </para>
         </listitem>
         <listitem>
            <para>
        you can add different responsibilities to different instances of the same class.
      </para>
         </listitem>
      </itemizedlist>
  </para>
</section>