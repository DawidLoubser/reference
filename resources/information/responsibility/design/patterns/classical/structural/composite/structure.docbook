<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.design.patterns.classical.structural.composite.structure">

  <title>Structure</title>
  <para>
    Containers have many components, but is itself a component. Hence, containers
    may hold as components further containers:
  </para>
  
  <figure xml:id="resources.information.concepts.design.patterns.classical.structural.composite.compositeStructure_fig">
      <title>
      Structure of the composite pattern. 
    </title>
      <mediaobject>
         <imageobject>
            <imagedata fileref="compositeStructure.jpg"/>
         </imageobject>
      </mediaobject>
  </figure>
  
  <para>
    The core objects of the composite pattern are thus the container, the root component and
    the leaf components. The responsibilities of these objects within the composite pattern
    are shown in the abstract collaboration depicted in the following picture:
  </para>  
  
  <figure xml:id="resources.information.concepts.design.patterns.classical.structural.composite.abstractCollaboration_fig">
      <title>
      Responsibilities of the components of the composite pattern. 
    </title>
      <mediaobject>
         <imageobject>
            <imagedata fileref="abstractCollaboration.jpg"/>
         </imageobject>
      </mediaobject>
  </figure>
  
  <para>
    Typically, all components in the recursive structure provide at least one comnmon generic service
    which usually is realised polymorphically. The benefit of using the composite pattern lies
    thus not only in providing a recursive polymorphic structure, but also in potentially providing
    services which are realised polymorphically across the recursive structure.
  </para>

</section>