<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Example applications</title>
    <para>
        The builder patterns is used quite widely to abstract  the concrete realization of a building
        process from the more abstract instructions.
    </para>
    
    <section>
        <title>Non-IT example: fast food outlets</title>
        <para>
            One can find the use of the builder pattern in real-life processes like
            those in fast food restaurants which use
            the builder pattern to construct, for example, childrens meals with a meal, say, consisting
            of a main item, a side item, a drink, and a toy (<abbrev>e.g.</abbrev>, a hamburger, chips, 
            liquid fruit, and water pistol). 
        </para>
        <para>
            There are variations in the content of the children's meal, but the construction 
            process is the same. Whether a customer orders a hamburger, cheeseburger, or chicken
            drumsticks, the employee at the counter directs the crew to assemble a 
            main item, side item, and toy. These items are then placed in a box with the drink being
            placed in a separate compartment within the box. Even different fast food outlets
            placed in a cup and remains outside of the bag. This same process is used at competing 
            restaurants. 
        </para>
    </section>
    
    <section>
        <title>UML code generators</title>
        <para>
            From a UML diagram we can generate, for example, an implementation in one of a 
            number of programming languages. Alternatively one can generate an XML schema
            from a UML class diagram. For each code generator for a particular programming 
            language and the XML schema generator could be a different realization of a builder.
            This example is illustrated below:
        </para>
        
        <figure>
            <title>UML code generators often use the Builder pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="codeGenerators.jpg"/>
            </imageobject></mediaobject>
        </figure>
        
    </section>  
    
    <section>
        <title>XML docbook renderers</title>
        <para>
            XML docbook renderers read XML docbook tags and generate a rendering in one
            of a number of technologies. This may include
            <itemizedlist>
                <listitem><para>HTML,</para></listitem>
                <listitem><para>PDF,</para></listitem>
                <listitem><para>LaTeX,</para></listitem>
                <listitem><para>or even an Open-Office document.</para></listitem>
            </itemizedlist>
        </para>
        <para>
            Here the <emphasis>director</emphasis> reads the XML tags (<abbrev>e.g.</abbrev> 
            chapter, section or table tags) and requests a concrete builder to construct a rendered
            dcument from these tags. Different concrete builders construct different realizations
            of the rendered document.
        </para>
    </section>
    
    <section>
        <title>EJB-QL query builders</title>
        <para>
            When using entity beans with container managed persistence, one specifies the query
            in <emphasis>EJB Query Language</emphasis>, a persistence technology neutral, 
            object-oriented query language. These queries are mapped onto queries in the
            persistence technology chosen for that entity bean. 
        </para>
        <para>
            For example, if a relational database is used, then SQL queries are constructed from 
            EJB-QL queries. On the other hand, if the relational databose is replaced by an 
            object database, then the SQL-builder can be replaced by an OQL builder.
        </para>
    </section>
    
    <section>
        <title>Parsers</title>
        <para>
            Parsers typically read an input domain and construct a representation in another domain.
            For example, parsers of a mathematical expression decode the input domain and construct
            an algorithm for that expression. A builder pattern will separate the expression decoding
            from the algorithm construction and facilitates different algorithm constructors for different
            programming languages.
        </para>
    </section>
    
</section>
