<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Solution</title>
    <para>
        The director consumes the information used to construct a product and issues high-level 
        instructions for the construction process to some or
        other concrete builder which provides the construction services needed to build a
        product.
    </para>
    
    <section>
        <title>Responsibility allocation</title>
        <para>
            One of the core features of the builder pattern is that it <emphasis>separates the 
                source and realization domains</emphasis>.
            The director only needs to understand the source domain, <abbrev>i.e.</abbrev>
            the information from which the objects are created while a separate builder is assigned
            to manage each realization domain. 
        </para>
        <para>
            The following UML use case diagram shows
            the responsibility allocation across the various components of the builder pattern. 
        </para>
        
        <figure>
            <title>The responsibility allocation for the builder pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="responsibilityAllocation.jpg"/>
            </imageobject></mediaobject>
        </figure>
    </section>
    
    <section>
        <title>Structure</title>
        <para>
            The structure of the builder pattern is specified in the following UML class diagram:
        </para>
        
        <figure>
            <title>The structure of the builder pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="structure.jpg"/>
            </imageobject></mediaobject>
        </figure>
        
        <note><para>
            The director is completely decoupled from any specific concrete realization
            of a builder and vice versa. It directs the construction process at a higher, more abstract level.
        </para></note>
        
    </section>
    
    <section>
        <title>Dynamics</title>
        <para>
            The client creates a concrete builder and subsequently a director which uses that concrete
            builder. It then requests the director to construct a product which it does by requesting the
            builder to construct part for part.
        </para>
        <para>
            The concrete builder keeps track of the construction process and the constructed product
            and ultimately the client requests the constructed product from the builder. The dynamics 
            of the builder pattern is shown in the following UML class diagram:
        </para>
       
        
        <figure>
            <title>The dynamics for the builder pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="dynamics.jpg"/>
            </imageobject></mediaobject>
        </figure>
    
    </section>
</section>
