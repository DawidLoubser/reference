<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Related patterns</title>
    <para>
        The singleton pattern can be combined with most other factory classes -- <abbrev>i.e.</abbrev>
        the factories themselves should typically be singletons. Usch combinations may prove
        very useful for more complex construction processes.
        <itemizedlist>
            <listitem><formalpara>
                <title>Builder</title>
                <para>
                    Consider using the <emphasis>Builder</emphasis> pattern if you need to create
                    objects through a complex construction process.
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>Factory method</title>
                <para>
                    Consider using a factory method if the decision of which class should be instantiated
                    should be deferred to run-time.
                </para>
            </formalpara></listitem>
            <listitem><formalpara>
                <title>Abstract factory</title>
                <para>
                    Consider using an abstract factory to create members of a concrete realization of
                    a framework -- the decision of which family of classes is to
                    be used should be deferred to run-time.
                </para>
            </formalpara></listitem>
        </itemizedlist>
    </para>
    <para>
        Furthermore, consider combining the singleton pattern with the <emphasis>double
            locking pattern</emphasis> to make it thread-safe.
    </para>
</section>
