<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    
    <title>Solution</title>
    <para>
        The solution involves encapsulating
        <itemizedlist>
            <listitem><para>
                the requirements specification for the products which are going to be
                produced in a collection of  <emphasis>abstract products</emphasis>, and
            </para></listitem>
            <listitem><para>
                the requirements specification around which objects the various concrete
                factories need to be able to produce and what information they will receive
                in order to construct them in an <emphasis>abstract factory</emphasis>.
            </para></listitem>
        </itemizedlist>
    </para>
    
    <section>
        <title>Responsibility allocation</title>
        <para>
            The abstract factory itself specifies the types of objects (<abbrev>i.e.</abbrev> 
            realizations of which abstract objects) the various concrete factories must be 
            able to create. Each family of classes has its own factory which produces classes 
            which realize the various abstract products. 
        </para>
        
        
        <figure>
            <title>The responsibility allocation for the abstract factory pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="responsibilityAllocation.jpg"/>
            </imageobject></mediaobject>
        </figure>
    </section>
    
    <section>
        <title>Structure</title>
        <para>
            The structure of the abstract factory pattern is specified in the UML class diagram:
        </para>
        
        
        <figure>
            <title>The structure of the abstract factory pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="structure.jpg"/>
            </imageobject></mediaobject>
        </figure>
        
        <para>
            Often the various families of classes represent different realizations of the same framework.
            For example, they could represent different realizations of 
            <itemizedlist>
                <listitem><para>
                    a user interface framework,
                </para></listitem>
                <listitem><para>
                    a persistence framework, or  
                </para></listitem>
                <listitem><para>
                    a pricing framework.
                </para></listitem>
            </itemizedlist>
        </para>
    </section>
    
</section>
