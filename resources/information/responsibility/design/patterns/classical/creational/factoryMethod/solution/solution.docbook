<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Solution</title>
    
    <para>
        The solution is simply that classes provide their own concrete realization of a factory method,
        <abbrev>i.e.</abbrev> we simply use method overloading.
    </para>
    
    <section>
        <title>Responsibility allocation</title>
        <para>
            In the following UML use case diagram
            we show the responsibilities of the various components of the factory method pattern. 
        </para>
        
        
        <figure>
            <title>ResponsibilityAllocation for the factory method pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="responsibilityAllocation.jpg"/>
            </imageobject></mediaobject>
        </figure>
        
        <para>
            An abstract context decouples a client from specific realizations of that context and specifies
            factory methods to be realized by its concrete realizations. Similarly, an abstract product
            decouples clients from issues which are specific to concrete products for a specific context.
            The concrete contexts implement the factory method interface which returns the product
            appropriate for that specific context.
        </para>
        
    </section>
    
    <section>
        <title>Structure</title>
        <para>
            A context specifies the factory methods which the various concrete realizations of the
            context must provide.
            The structure of the factory method pattern is specified in the UML class diagram shown below:
        </para>
        
        <figure>
            <title>The structure of the factory method pattern</title>
            <mediaobject><imageobject>
                <imagedata fileref="structure.jpg"/>
            </imageobject></mediaobject>
        </figure>
        
        <note><para>
            The client is completely decoupled from any specific concrete realization
            of a product. The client simply obtains the correct product for a specific context and uses it.
        </para></note>
    </section>
</section>
