<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Understand the complexities introduced by a pattern</title>
    <para>
        Many patterns, when used naively, introduce certain complexities which may pose a problem to you. Examples
        of complexities which may be introduced by the use of design patterns include the following
        <itemizedlist>
            <listitem><para>
                The <emphasis>singleton</emphasis> pattern introduces direct coupling to a class and may not be safe
                in a multi-threaded environment.
            </para></listitem>
            <listitem><para>
                The <emphasis>decorator</emphasis> pattern, and <emphasis>flyweight</emphasis> patterns in their 
                fullest extend requires the separation of the conceptual 
                object identity from its physical object identity.
            </para></listitem>
            <listitem><para>
                The <emphasis>abstract factory</emphasis> pattern may lead to a framework with high maintenance costs when one needs to support
                multiple framework implementations for a continuously growing/evolving responsibility domain.
            </para></listitem>
            <listitem><para>
                The <emphasis>command</emphasis> pattern, though very nice, introduces additional complexities when
                used with implementation languages which do not support polymorphism on message parameter.
            </para></listitem>
        </itemizedlist>
    </para>
    <para>
        Some of the complexities can be addressed by other design artifacts - at times by combining the pattern with certain
        other patterns. Other complexities may be endiemic for a particular design pattern, In such cases the complexities need
        to be weighed up against the benefits provided by the design pattern.
    </para>
</section>    