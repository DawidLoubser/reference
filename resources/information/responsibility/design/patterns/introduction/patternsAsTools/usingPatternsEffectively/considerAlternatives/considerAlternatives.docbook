<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Consider alternatives</title>
    <para>
        There are usually multiple ways of solving a problem. The first solution one finds is not necessarily the best and one
        will usually want to assess the usage of a pattern against alternative solutions for a problem. This is particularly
        crucial if one identifies certain complexities introduced by a pattern. For example:
        <itemizedlist>
            <listitem><para>
                The <emphasis>decorator</emphasis> pattern looks very attractive on first sight, but often a simple interception framework
                achieves the same purpose in a simpler way without introducing the complexity of a changing physical object identity
                around a particular conceptual object.
            </para></listitem>
            <listitem><para>
                The use of the <emphasis>singleton</emphasis> pattern should be weighed up against using a factory which
                does not expose to the user either the class of the object being provided nor whether it is a singleton, an object
                from an object pool or a new object created for the user.
            </para></listitem>
            <listitem><para>
                The <literal>template method</literal> pattern, in its basic form, introduces quite strong coupling between the
                higher level context and the services and limits the reuse of the lower level services. In most cases we would recommend
                to rather follow the URDAD methodology resulting in controllers which achieve in a much more flexible and generic way
                what the template method pattern does without introducing strong coupling whilst still  promoting service reuse.
            </para></listitem>
        </itemizedlist>
    </para>
</section>    