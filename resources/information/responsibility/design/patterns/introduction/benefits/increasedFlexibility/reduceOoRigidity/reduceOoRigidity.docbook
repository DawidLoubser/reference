<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Makes object-orientation more flexible</title>
    <para>
        Object orientation is, in many ways, excesively rigid. Not only the structural rigidity is often problematic, but also
        process rigidity. Many of the design patterns address this particular problem of excessive rigidity resulting from
        simple application of object-orientation. 
    </para>
    <para>
        For example, in naive object orientation an object is "born" with a fixed
        set of attributes and relationships and its services are executed, for the rest of that object's life
        in a particular way. Objects in real life are considerably more flexible. We continuously change
        and add attributes and relationships. In addition we continuously not only evolve the way in which
        we realize the services we offer, but also continuously evolve the services portfolio itself.
    </para>
    <para>
        On first sight one might feel that this rigidity is not a problem, but the fact that most of the design patterns
        address specifically this excessive rigidity together with the move towards weaker structural 
        and functional relationships 
        (e.g. service orientation, space based architectures, RDF/OWL data structures and the sematic web, ...)
        is evidence that the excessive rigidity of object orientation is indeed a problem.
    </para>
    <para>
        Design patterns which directly address this rigidity include
        <itemizedlist>
            <listitem><para>
                the <emphasis>decorator</emphasis> pattern which provides the ability to add and remove responsibilities
                to existing services at run time,
            </para></listitem>
            <listitem><para>
                the <emphasis>state</emphasis> pattern which enables a context to realize a service differently depending on the
                state the object is in,
            </para></listitem>
            <listitem><para>
                the <emphasis>exposed state</emphasis> pattern which enables one to have different services available depending on the state the object is in,
            </para></listitem>
            <listitem><para>
                the <emphasis>strategy</emphasis> pattern which allows users to change the algorithm used to realize a service on the fly,
            </para></listitem>
            <listitem><para>
                the <emphasis>chain of responsibilities</emphasis> pattern which enables one to change how services are realized
                and the level of service which may be provided,
            </para></listitem>
            <listitem><para>
                the <emphasis>visitor</emphasis> pattern which enables one to add polymorphic fucntionality to a class library without
                either sub-classing nor changing any of the classes in the class library, and
            </para></listitem>
            <listitem><para>
                the <emphasis>observer</emphasis> pattern which decouples event sources from event processors and which facilitates
                different and multiple things happening on events (again, how an event is processed may change over time).
            </para></listitem>
       </itemizedlist>
    </para>
</section>