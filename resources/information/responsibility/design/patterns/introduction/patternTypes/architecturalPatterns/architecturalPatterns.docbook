<?xml version="1.0" encoding="UTF-8"?>
<!-- author fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Architectural Patterns</title>
    <para>
        Architectural patterns aim to improve the quality of an architecture/infrastructure, making it easier to 
        realize stake holder quality requirements for the infrastructure. For example, the 
        <emphasis>pipes and filters</emphasis> 
        architectural pattern is generally used to improve agility and time to market, and
        the <emphasis>microkernel</emphasis> pattern provides and infrastructure for a solid, 
        slowly evolving core supporting flexible user/client faced services, whilst the blackboard
        architectural pattern provides a platform for ingenuity and extreme scalability and
        reliability. Other well known examples of architectural patterns include
        the <emphasis>layering</emphasis> and <emphasis>model-view-controller</emphasis>
        (MVC) patterns.
    </para>
    
    <section>
        <title>Integration patterns</title>
        <para>
            Integration is core to infrastructure and an important subdomain of architectural patterns is that 
            of integration patterns. Integration patterns aim to improve the quality of integration infrastructures
            by reducing complexity and increasing flexibility, reliability and scalability. Common examples of
            integration patterns include <emphasis>message/object request and services brokers</emphasis>, 
            <emphasis>messaging bus</emphasis>, 
        </para>
    </section>
    
    <section>
        <title>Patterns for distributed systems</title>
        <para>
            Most enterprise architectures are infrastructures for distributed systems. Examples include SOA, Java-EE
            CORBA and .Net based systems. Distributed systems often need to face performance and scalability 
            challanges. In addition one would usually like to decouple the client fully from the server side technologies.
            A range of architectural patterns is specifically focused addressing such quality concerns.
            Examples include the <emphasis>session facade</emphasis> and <emphasis>message facade</emphasis> 
            patterns, the <emphasis>value list handler</emphasis>, <emphasis>business delegate</emphasis>
            and <emphasis>data transfer object</emphasis>.
        </para>
    </section>
</section>    