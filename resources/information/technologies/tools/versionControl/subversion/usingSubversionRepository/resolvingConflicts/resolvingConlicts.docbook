<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2009-2-4 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Resolving conflicts</title>
    <para>
        Assume that there are concurrent modifications to a file, i.e. while you are working on that file, somebody else
        has been working on it too. Assume further, that the other party commits first. When 
        During an update modifications committed on the same file to whichafter the last local update may result in
        <itemizedlist>
            <listitem><para></para></listitem>
        </itemizedlist>
    </para>
    <para>
        There are really two types of conflicts:
        <orderedlist>
            <listitem><para>
                Conflicts detected by subversion's <literal>update</literal> command.
            </para></listitem>
            <listitem><para>
                Conflicts which are detected only during testing.
            </para></listitem>
        </orderedlist>
    </para>

    <section>
        <title>Resolving physical conflicts detected by subversion</title>
        <para>
            Conflict can arise from the same area (e.g. same line) of the same resource being edited concurrently by multiple
            people. This type of conflict is identified by subversion's <literal>update</literal> command and users
            are required to resolve the conflict before their changes are committed.
        </para>
        
        <section>
            <title>How are conflicts reported?</title>
            <para>
                For example, in the update result shown below 
                <programlisting><![CDATA[
    svn update
    U    test.txt
    G    test4.txt
    Conflict discovered in 'test5.txt'.
    Select: (p) postpone, (df) diff-full, (e) edit,
    (h) help for more options: e
    Select: (p) postpone, (df) diff-full, (e) edit, (r) resolved,
    (h) help for more options: p
    C    test5.txt
    Updated to revision 16.
                    ]]></programlisting>
                subversion reports that 
                <itemizedlist>
                    <listitem><para>
                        the working copy of <literal>test.txt</literal> has been updated with a new version
                        obtained from the repository,
                    </para></listitem>
                    <listitem><para>
                        the local changes made to <literal>test4.txt</literal> were merged with those already
                        committed to the repository,
                    </para></listitem>
                    <listitem><para>
                        and that there were physical conflicts when attemting to merge the local changes to
                        <literal>test5.txt</literal> with changes obtained from the repository.
                    </para></listitem>
                </itemizedlist>
            </para>
        </section>
        
        <section>
            <title>Resources made available for conflict resolution</title>
            <para>
                In addition to notifying you of the conflict, subversion will make it easier for you to resolve the conflict by
                making available a number of resources. In particular, subversion will
                <itemizedlist>
                    <listitem><para>
                        overwrite the file with a contents showing both submissions with conflict markers,        
                    </para></listitem>
                    <listitem><para>
                        copy your original working copy prior to merging into a file name <literal>[filename].mine</literal>,
                    </para></listitem>
                    <listitem><para>
                        copy the revision which was the starting point from which you edited into a file
                        <literal>[filename].r[originalRevisionNo]</literal>, and
                    </para></listitem>
                    <listitem><para>
                        copy the current repository revision into a file
                        <literal>[filename].r[newRevisionNo]</literal>.
                    </para></listitem>
                </itemizedlist>
            </para>
        </section>
        
        <section>
            <title>Resolving a physical conflict manually</title>
            <para>
                In the case of binary files you often will be able to resolve the conflicts only by selecting either your version
                or the version which was last committed to the repository. Subversion will not attempt to merge the files.
                <note><para>
                    For certain binary formats there may by third party software which understands the binary protocol
                    and can assist you with merging the changes and resolving the conflicts.
                </para></note>
            </para>
            <para>
                IDEs like Eclipse will typically assist you with resolving conflicts. Alternatively you can resolve these
                manually. In either case, you will not be able to commit your changes prior to
                having resolved the physcal conflict.
            </para>
            <para>
                When resolving a conflict you can either
                <itemizedlist>
                    <listitem><para>
                        edit the new file containing the conflict markers and the conflicting modifications and resolve the 
                        conflict by editing the file by hand,
                    </para></listitem>
                    <listitem><para>
                        select one of the temporary files (the original version, the new version or your local version)
                        as the one which should represent the next version and copy it onto the actual file, or 
                    </para></listitem>
                    <listitem><para>
                        throw away your local changes using <literal>svn revert</literal>.
                    </para></listitem>
                </itemizedlist>
            </para>
            <para>
                Assume you want to resolve the conflict by editing the merged file containing the conflict markers.
                It will look something like the following:
                <programlisting><![CDATA[
My semi-original thoughts.
huh??
hmmm
<<<<<<< .mine
hmmmmmmmmmmmmmmmm
huh??
aaahh!?
=======
hm
>>>>>>> .r16
??
                    
                    ]]></programlisting>
                You can see the conflict marker starting with <literal><![CDATA[<<<<<<< .mine]]></literal>
                and ending with <literal><![CDATA[>>>>>>> .r16]]></literal>. In between you will see a divider
                <literal><![CDATA[=======]]></literal> separating the two conflicting contributions to that file.
            </para>
            <para>
                You can now go ahead and select what you want, making sure that you remove the conflict markers.
                Once you have resolved the conflict you will have to notify subversion that you have done so. Only then
                will you be able to commit the merged file. To tell subversion that you resolved the conflict you use
                <programlisting><![CDATA[
svn resolved test5.txt
Resolved conflicted state of 'test5.txt'                    
                    ]]></programlisting>
            </para>
                
        </section>
        
    </section>
    
    <section>
        <title>Resolving logical conflicts detected by the contract/unit tests</title>
        <para>
            Sometimes changes done by different people to different areas in a resource result in the resource no longer
            fulfilling its contractual obligations (no longer passing the tests) once the changes have been merged.
            This may be so even if the resource passes its tests when either of the two changes are applied separately.
        </para>
        <para>
            The fact that such conflicts are only detected by testing emphasis that one should only commit after having run
            the unit tests locally.
        </para>
        <para>
            There is no simple way to resolve such logical conflicts. One simply has to reassess the logic of the encoded process
            against the requirements and the resultant unit test and make the appropriate changes.
        </para>
    </section>
</section>    