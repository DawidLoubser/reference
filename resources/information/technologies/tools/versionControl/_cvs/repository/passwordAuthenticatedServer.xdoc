<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.technologies.tools.versionControl._cvs.repository.passwordAuthenticatedServer"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Setting up a password authenticated server</title>
  
  <para>
    If the users of the repository do not necessarily have an account on the
    repository server, then you need to set up a password-authenticated server.
  </para>
  <para>
    By default the CVS server runs on port 2401 (49 squared). You can change the
    port, but then you will have to inform all the repository users to change
    their clients to point to that port.
  </para>
  
  <section>
    <title>Setting up inetd to launch CVS pserver</title>
    <para>
      The <application>pserver</application> does not wait for connections
      on its port. It will be invoked only when a client connects to the server.
      Instead the Unix Internet daemon, <application>inetd</application>, is 
      listening on that port and you will have to set up 
      <application>inetd</application> to launch <application>pserver</application>
      and to forward the connections to it.
    </para>
    
    <section>
      <title>Specifying logical service in <filename><![CDATA[/etc/services]]></filename></title>
      <para>
        In the <filename><![CDATA[/etc/services]]></filename> file
        you will specify that tcp connections to a particular port should 
        launch a service referenced as some logical name (typically
        <application>cvspserver</application>).
      </para>
    </section>
  </section>  
  
  <section>
    <title>Mapping to <application>pserver</application> in
           <filename><![CDATA[/etc/inetd.conf]]></filename></title>
    <para>
      In the <filename><![CDATA[/etc/inetd.conf]]></filename> we map the
      logical name onto the <application>cvs</application> application:
      <synopsis><![CDATA[
cvspserver stream tcp nowait root /usr/sbin/tcpd /usr/local/bin/cvs \
--allow root=/usr/local/cvs/testRepository pserver
      ]]></synopsis>
    </para> 
    <para>
      Many later systems use <application>XINET</application>. On these
      systems add a file, <filename><![CDATA[/etc/xinet.d/cvspserver]]></filename> 
      file with the following content:
      <synopsis><![CDATA[
service cvspserver
{
  disabled    = no
	socket_type = stream
  protocol    = tcp
  wait        = no
  user        = root
  passenv     = PATH
  server      = /usr/bin/cvs
  server_args = -f --allow-root=/usr/local/cvs/testRepository pserver
}
     ]]></synopsis>
    </para>
    <para>
      Restart <application>inetd</application> or <application>xinetd</application>
      via, for example,
      <synopsis><![CDATA[
/etc/init.d/xinetd restart      
      ]]></synopsis>
    </para>
  </section>
  
  <section>
    <title>Setting up a CVS password file</title>
    <para>
      The usernames and passwords are set up in a 
      <filename><![CDATA[CVSROOT/passwd]]></filename> file which
      contains the CVS usernames, encrypted passwords and potentially
      a system username onto which the CVS username maps. A typical
      <filename>passwd</filename> file looks like this:
      <synopsis><![CDATA[
anonymous:
alex:IU76jh7RgUI81:alexh
ernst:87jU8jh82mUb:cvsuser
fritz:9TRFgs8g6gUs:fritzsolms
      ]]></synopsis>
    </para>
    <para>
      CVS does not generate this file for you. You will have to create it
      yourself. To this end you will have to generate the encrypted
      passwords.
    </para>
    <section>
      <title>Generating encrypted passwords</title>
      <para>
        The encryption is done via the Unix <function>crypt</function> function.
        CVS currently does not provide a utility to generate the encrypted passwords
        and hence the Unix/Linux <application>passwd</application> utility is
        typically used to obtain these. 
      </para>
      <para>
        To execute the password encryption utility, run
        <synopsis><![CDATA[
  passwd <username>        
        ]]></synopsis>
        and the password is typically stored in <filename><![CDATA[/etc/shadow]]></filename>
        (on some older systems it is stored in <filename><![CDATA[/etc/passwd]]></filename>
        itself).
      </para>  
      <para>
        Simply cut the password from the generated <filename><![CDATA[/etc/shadow]]></filename>
        file and copy it into the <filename><![CDATA[CVSROOT/passwd]]></filename> file.
      </para>
    </section>
    
    <section>
      <title>System users are CVS users</title>
      <para>
        If a CVS connection tries to authenticate via a username/password which is
        not present in <filename><![CDATA[CVSROOT/passwd]]></filename>, then CVS
        will try and authenticate the user against the system username/password files
        (<filename><![CDATA[/etc/passwd]]></filename> and <filename><![CDATA[/etc/shadow]]></filename>).
        Technically system users need thus not be duplicated into the
        <filename><![CDATA[CVSROOT/passwd]]></filename> file.
      </para>
      <warning>
        <para>
          The CVS clients typically send the password in clear text accross the
          wire. This may pose a serious security risk if users login with system
          usernames and passwords. In general you should always enforce a mapping
          of the seperate CVS user names onto system user names via the third
          entry in the <filename><![CDATA[CVSROOT/passwd]]></filename> file:
          <synopsis><![CDATA[
ernst:87jU8jh82mUb:cvsuser
          ]]></synopsis>
        </para>
      </warning>
    </section>
    
    <section>
      <title>How to create and add the passwd file</title>
      <para>
        The CVS administrative files are, just like your project files,
        under version control. To add a passwd file
        <orderedlist>
          <listitem><para>
            Check out the CVSROOT module as root user.
          </para></listitem>
          <listitem><para>
            Add the passwd file to your working directory.  
          </para></listitem>
          <listitem><para>
            Use the CVS <command>add</command> command to add the file to
            the CVSROOT module.
          </para></listitem>
          <listitem><para>
            Commit your changes.  CVS will notify you that it is rebuilding 
            the administrative files.
          </para></listitem>
        </orderedlist>
      </para>
    </section>
  </section>
  
  <section>
    <title>Connecting via a password-authenticated server</title>
    <para>
      To connect to a remote CVS repository via the password-authenticated server
      you use the following command:
      <synopsis><![CDATA[
cvs -d :pserver:fritz@solmstraining.co.za:/usr/local/cvs/testRepository login      
      ]]></synopsis>
      or if you simply want to test on your local machine:
      <synopsis><![CDATA[
cvs -d :pserver:fritz@localhost:/usr/local/cvs/testRepository login      
      ]]></synopsis>
      You will be prompted for the password which will be verified with the server.
      <note>
        <para>
          Most probably you will want to define a <varname>CVSROOT</varname> 
          environment variable via
          <synopsis><![CDATA[
export CVSROOT=:pserver:fritz@SolmsTraining.co.za:/usr/local/cvs/testRepository      
          ]]></synopsis>
        </para>
        <para>
          If you have already got a default repository specified via the
          <varname>CVSROOT</varname> environment variable, you may want
          to define another environment variable, <abbrev>e.g.</abbrev>
          <varname>remoteRepository</varname>. Then you can connect to the 
          server via
          <synopsis><![CDATA[
cvs -d $remoteRepository login      
          ]]></synopsis>
        </para>
      </note>  
    </para>
    
    <section>
      <title>Issuing CVS commands to a remote CVS server</title>
      <para>
        Once you logged in you can issue any of the CVS commands via
        <synopsis><![CDATA[
cvs -d :pserver:fritz@solmstraining.co.za:/usr/local/cvs/testRepository <cvsCmd>
        ]]></synopsis>
        For example, to check out our <filename>LoanCalculator</filename> project
        you can say
        <synopsis><![CDATA[
cvs -d :pserver:fritz@solmstraining.co.za:/usr/local/cvs/testRepository checkout LoanCalculator
        ]]></synopsis>
      </para>
    </section>
    
  </section>
  
  
</section>
