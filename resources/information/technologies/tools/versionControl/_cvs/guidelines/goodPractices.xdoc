<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.technologies.tools.versionControl._cvs.guidelines.goodPractices"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Good CVS practices</title>
  <para>
    <itemizedlist>
      
      <listitem><formalpara>
        <title>Update your work copy frequently</title>
        <para>
          Frequent updates avoid many conflicts and may also prevent
          you from implementing something which may already have been
          implemented by somebody else.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Commit on every completion of functionality</title>
        <para>
          This will publish your modifications as soon as they are ready
          avoiding unecessary conflicts which may arise due to committing 
          at a later stage when others may have committed changes on these
          files in the mean time. Also, other developers, can take your
          changes into account earlier which may avoid conflicts and
          duplication of work.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Don't store generated files</title>
        <para>
          Generated files are redundant in the repository and may lead to inconsistencies, e.g. 
          the binary java class files can always be recreated on compiling the source code. However, 
          in exceptional cases where a generated file is difficult to reconstitute from other files or takes 
          too long to recreate, this may be necessary.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Use descriptive log messages</title>
        <para>
          The log messages should give other developers a clear
          conceptual understanding of the changes you have made.
          This will enable anybody to trace the conceptual development
          of that unit.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Use watches</title>
        <para>
          Watches provide an communication mechanism between developers,
          informing each other of 
          <itemizedlist>
            <listitem><para>
              intentions to edit files, 
            </para></listitem>
            <listitem><para>
              any changes which have been committed and
            </para></listitem>
            <listitem><para>
              of files which are released due to an edit session being 
              abandoned.
            </para></listitem>
          </itemizedlist>
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Do not move tags</title>
        <para>
          Tags designate instances in time when certain events occured.
          Moving tags compromises
          the integrity of your history and the ability to go back to
          particular instances in time.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Merge fixes along branches frequently into trunk</title>
        <para>
          You should merge bug fixes made along release or stable branches
          frequently into the main trunck so that your main development
          trunck takes these into account early. You should tag the 
          release branch after every merge enabling you to apply further
          incremental merges of the branch into the trunck.
        </para>
      </formalpara></listitem>

      <listitem><formalpara>
        <title>Introduce standards for naming tags and branches</title>
        <para>
          This will make the tag names readable and universally understood.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Set file permissions around groups</title>
        <para>
          Create group for each repository, change ownership to group and
          make users part of group. Restrict other access.        
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Enforce unit testing</title>
        <para>
          Require a unit test or each class and encourage that the
          test is implemented before the class itself. Use a unit
          testing framework like <productname>JUnit</productname>
          to facilitate automatic testing at different levels of 
          granularity.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Think about ownership</title>
        <para>
          You could prevent developers from modifying certain sections
          of a project or you could trust your developers to be able to
          modify any aspect of a project in the context of continuous 
          refactoring. In the latter case (and really anyway) you should
          have a solid unit testing framework in place.
        </para>
      </formalpara></listitem>
      
      <listitem><formalpara>
        <title>Introduce freeze periods</title>
        <para>
          Introduce a feature freeze period before every release and create
          a release branch at the start of that period.
        </para>
      </formalpara></listitem>
    </itemizedlist>
      
  </para>
</section>
