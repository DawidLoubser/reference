<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.technologies.tools.versionControl._cvs.guidelines.managingReleases"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Managing releases</title>
  <para>
    Each new releases should provide significant new value to users in the form
    of 
    <itemizedlist>
      <listitem><para>new features and</para></listitem>
      <listitem><para>bug fixes.</para></listitem>
    </itemizedlist>
    It is, however, critical for users that the release is stable and will
    not cause excessive damage to their business.
  </para>
  <para>
    Developers, on the other hand, have a tendency to want to to see as much 
    of their new developments features in the new release putting extra strain 
    on the stability of the release. 
  </para>
  
  <section>
    <title>Introducing a freeze period</title>
    <para>
      As a path towards a stable release, project managers typically impose 
      some form of <emphasis>freeze period</emphasis> on the release. 
      However, what should be frozen? There are a number of strategies
      which are followed.
    </para>
    <section>
      <title>Feature freeze</title>
      <para>
        This is the most common freezing approach where no new features may 
        be added. Bugs can be removed and existing features may be refined
        as long as the changes to the code are 
        <emphasis><quote>minor</quote></emphasis> and are not expected to
        affect the stability of the rest of the code.
      </para>
    </section>
    
    <section>
      <title>Code freeze (or Hard Freeze)</title>
      <para>
        No changes may be made to the code except for critical bug fixes.
        Even minor bug fixes which may affect other code areas are
        deferred.
      </para>
    </section>
    
    <section>
      <title>Soft Freeze</title>
      <para>
        Here the decision on whether a modification will be absorbed within
        a release or not does not depend on whether it is a new feature or
        not but on how complex and potentially destabilizing the 
        modification is. Complex and potentially disruptive changes are
        excluded from the release.
      </para>
    </section>
    
  </section>
  
  <section>
    <title>Release branches</title>
    <para>
      You should typically spawn a release branch off the main branch at 
      the start of the freeze period. Other develoment with new features
      and significant changes will still feed into the main trunck. 
    </para>
    <para>
      A new release branch will be spawned off the trunck (perhaps as the
      previous release branch is released) and this branch is made stable.
    </para>
    
    <section>
      <title>Tagging branches</title>
      <para>
        After the release the stable (release) branch should be tagged and
        merged into the development branch. The release branch will typically 
        continue to grow absorbing post-release bug fixes resulting in
        bug-fix releases. After each of these the release branch is tagged
        and incrementally merged into the trunck. 
      </para>    
    </section>
    
    <section>
      <title>How to exclude changes from a release branch</title>
      <para>
        Technically we could create a tag and then move the tag for
        specific files to have a particular release tag. Instead
        tag at a particular instance in time and spawn a release
        branch. Within the release branch revert these files to the
        revisions you wnat to have included in the release without
        modifying the tag positions.
      </para>
    </section>
    
  </section>
  
</section>
