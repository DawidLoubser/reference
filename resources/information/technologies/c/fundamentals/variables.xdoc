<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.technologies.c.fundamentals.variables"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Variables</title>
  <para>
    A variable is a data field of a certain type whose value can vary over time. A variable is thus a named storage 
    location in memory which represents a certain size (number of bytes) and whose value is interpreted in a way
    determined by the data type of the variable. 
  </para>
  
  <section><title>Valid variable names</title>
    <para>
        Variable names in <emphasis>C</emphasis> must start with a letter or underscore character and may
        contain any further number of letters, underscore characters or digits. Variable names are case-sensitive
        in <emphasis>C</emphasis>.
    </para>
  </section>
  <section><title>Primitive data types</title>
    <para>
        <emphasis>C</emphasis> defines a range of primitive data types including characters, signed and
        unsigned integral data types and signed floating point data types. The primitive data types together
        with their range and resolutions are listed in table 
        <xref linkend="primitivesTable"/>.
    </para>
    <table id="primitivesTable"><title>Primitive data types in <emphasis>C</emphasis></title>
      <tgroup cols="4" colsep="1" align="center">
        <thead><row  rowsep="1">
            <entry align="center">Keyword</entry>
            <entry align="center">Data type</entry>
            <entry align="center">Size</entry>
            <entry align="center">Range</entry>
        </row></thead>
        <tbody>
          <row>
              <entry>char</entry>
              <entry>Single-byte character</entry>
              <entry>1 byte</entry>
              <entry>-128 to 127</entry>
          </row>
          <row>
              <entry>int</entry>
              <entry>Short integer</entry>
              <entry>2 bytes</entry>
              <entry>-32768 to 32767</entry>
          </row>
          <row>
              <entry>short</entry>
              <entry>Short integer</entry>
              <entry>2 bytes</entry>
              <entry>-32768 to 32767</entry>
          </row>
          <row>
              <entry>long</entry>
              <entry>Long integer</entry>
              <entry>4 bytes</entry>
              <entry>-2,147,483,648 to 2,147,483,647</entry>
          </row>
          <row>
              <entry>unsigned char</entry>
              <entry>Unsigned character</entry>
              <entry>1 byte</entry>
              <entry>0 to 255</entry>
          </row>
          <row>
            <entry>unsigned int</entry>
            <entry>Unsigned short integer</entry>
            <entry>2 bytes</entry>
            <entry>0 to 65535</entry>
          </row>
          <row>
            <entry>unsigned short</entry>
            <entry>Unsigned short integer</entry>
            <entry>2 bytes</entry>
            <entry>0 to 65535</entry>
          </row>
          <row>
            <entry>unsigned long</entry>
            <entry>Unsigned long integer</entry>
            <entry>4 bytes</entry>
            <entry>0 to 4,294,967,295</entry>
          </row>
          <row>
            <entry>float</entry>
            <entry>IEEE single precisionfloating point number</entry>
            <entry>4 bytes</entry>
            <entry>approx 3e+-38 with approx 7 digits resolution</entry>
          </row>
          <row>
            <entry>double</entry>
            <entry>IEEE double precision floating point number</entry>
            <entry>8 bytes</entry>
            <entry>approx 2e+-308 with approx 18 digits resolution</entry>
          </row>
          <row>
            <entry>long double</entry>                   
            <entry>10 bytes</entry>  
            <entry>3.4e+-4932 with approx 21 digits resolution</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section><title>Declaring and initializing variables</title>
  <para>
     Variables are declared with a statement of the form <command>type variableName;</command>.
     Once can declare multiple variables of the same type within a single statement by comma-delimiting
     the variables. <xref linkend="variableDeclarations.c"/> declares three variables, 
     <command>i</command>, <command>k</command> and <command>l</command> in a single
     statement.
  </para>
  <example id="variableDeclarations.c"><title>variableDeclarations.c</title>
    <programlisting role="C" linenumbering="numbered"><xi:include href="variableDeclarations.c" parse="text"/></programlisting>
  </example>   
  
  <section><title>Variable initialization</title>
    <para>
      Variables can be initialized within the declaration statement (like the variable <command>l</command>
      in our example) or later on in the code. Variables must be initialized before their value can be used. 
    </para>
    <warning>
      <para>
        Compilers may check your code for the possibility of using un-initialized variables 
        but you may also simply get incorrect results. 
      </para>
    </warning>  
  </section>

  <section><title>The scope of a variable</title>
   <para>
     Statements are grouped together in blocks of code by encapsulating them within curly brackets.
     <xref linkend="variableDeclarations.c"/> contains one block for the group of statements for
     the function <command>main</command> and a second, nested block containing, among
     other elements, the declaration of the variable, <command>m</command>.
   </para>  
   <para>
     Variables can be declared where they are required (anywhere in the code).  The life-span of a 
     variable ranges from the point of declaration to the end of the block in which it is declared.
     Hence, the use of the variable <command>m</command> after the nested block in 
     <xref linkend="variableDeclarations.c"/> is illegal since the variable no longer exists.
   </para>
  </section>

  </section>
</section>
