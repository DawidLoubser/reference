<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
xml:id="resources.information.technologies.general.regularExpressions.multiplicityConstraints"
     
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Multiplicity constraints</title>
  <para>
    So far we gave no optionality on the multiplicity of the characters we are matching on. If
    we wanted to match, say, on 2 numbers we would have said
    <programlisting><![CDATA[
[0-9][0-9]    
    ]]></programlisting>
    But, what if there are very many occurances or even worse, what if we want to
    match on a variable number of occurances.
  </para>
  <para>
    To this end regular expressions provide multiplicity constraints which are specified
    directly after the element to which they apply. The multiplicity constraints supported
    by regular expressions are listed in the following table:
  </para>  
    <table xml:id="resources.information.technologies.general.regularExpressions.multiplicityConstraintsTable">
      <title>Multiplicity constraints supported by regular expressions</title>
      <tgroup cols="2">
        <thead>
          <row><entry><para>Multiplicity constraint</para></entry><entry><para>Description</para></entry></row>
        </thead>
        <tbody>
          <row><entry><para><literal>?</literal></para></entry><entry><para>Zero or one.</para></entry></row>
          <row><entry><para><literal>*</literal></para></entry><entry><para>Zero or more.</para></entry></row>
          <row><entry><para><literal>+</literal></para></entry><entry><para>One or more.</para></entry></row>
          <row><entry><para><literal>{n}</literal></para></entry><entry><para>Exactly <literal>n</literal>.</para></entry></row>
          <row><entry><para><literal>{n,}</literal></para></entry><entry><para><literal>n</literal> or more.</para></entry></row>
          <row><entry><para><literal>{n,m}</literal></para></entry><entry><para>Between <literal>n</literal> and <literal>m</literal>.</para></entry></row>
        </tbody>
      </tgroup>
    </table>
  <para>
    Thus,
    <programlisting><![CDATA[
[A-Z]{3} [0-9]{3} GP
    ]]></programlisting>
    matches on Gauteng number plates which start with 3 capital letters followed by a
    space followed by 3 numbers followed by a space which finally is followed by the 
    characters <quote>GP</quote>.
  </para>
  <para>
    As a second example, assume you want to match on any XML (or HTML or SGML) 
    tag (markup). This could be done with the following regular expression:
    <programlisting><![CDATA[
<[a-zA-Z_].*>    
    ]]></programlisting>
    which specifies that the tag name must start with a letter or an underscore character
    and may contain any number of further arbitrary characters  -- this is admittedly not
    quite true but will work most of the time.
  </para>
  <para>
    Consider next the following regular expression:
    <programlisting><![CDATA[
lo+ng    
    ]]></programlisting>
    This will match on <quote>long</quote>, <quote>loong</quote>, ..., 
    <quote>loooooooooong</quote>, and so forth.
  </para>
</section>
