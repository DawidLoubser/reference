<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/samples/docbook/xml/docbookx.dtd"[
<!ENTITY coursesxml SYSTEM 'file:/home/ernst/courses/J2ME/book/'>
]-->

    <section id="resources.information.technologies.java.j2me.xml.CoreFeatures"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Main Features of XML</title>
<para>
Before delving into XML in detail, it is fruitful to obtain an overview
of the XML features. This will put the subsequent chapters into context
and will provide us with a framework for the course.
</para>
    
    <!-- ############################################################# -->
        
<section><title>The XML syntax</title>
<para>
XML is a simple tagged markup language which has a formal syntax 
specification. An XML document is only valid if it conforms to
the specification and this can be checked using an XML parser.
There are many XML parsers freely available and most XML editors
parse an XML document automatically.
</para>
<para>
Below we show an example of a valid XML document:
</para>
<example><title>Course notes</title>
<programlisting>
&coursesxml;
</programlisting>
</example>
</section>

<!-- ############################################################# -->
    
<section><title>Document Type Definitions (DTDs)</title>
<para>
XML enables us to define our own vocabulary of tags. However, if there
is no agreement on the tags used, it is difficult for the recipient
of the data to process the information by machine. We really need an
agreement between the parties on the valid tags for a specific
vocabulary.The document type definition is itself 
written in XML.
</para>
</section>

<!-- ############################################################# -->
    
<section><title>The Document Object Model (DOM)</title>
<para>
The <emphasis> Document Object Model</emphasis> (DOM) is an API which provides an
object-oriented tree-structured view onto the entire XML document.
Such a view provides a convenient way to extract information from 
and manipulate and XML document.
</para>
<para>
The DOM is specified and maintained by the W3C and is thus part of
the formal XML standard specification.
</para>
</section>

<!-- ############################################################# -->

<section><title>The Simple API for XML (SAX)</title>
<para>
SAX is simple API which facilitates serial processing of XML documents.
As such it requires less resources than DOM (the entire XML document need
not be viewed as a tree - the document can be processed in sequentially,
a small chunk at a time.
</para>
<para>
SAX processing is event driven. As tags are encountered, the SAX parser
generates relevant notification events. The application processing the
XML document will receive these events and can react accordingly.
</para>
<para>
Unlike DOM, SAX is not specified by the W3C. It originated from a few
developers who needed resource-efficient processing of XML documents and
has acquired wide-spread popularity.
</para>
</section>

<!-- ############################################################# -->

<section><title>Name Spaces</title>
<para>
Vocabularies can become very large and very cumbersome to maintain (and
to understand). Name spaces were introduced to break down huge vocabularies 
into smaller modules which can be used independently. They also make it 
possible to assemble a complex vocabulary from a collection of simpler ones.
</para></section>

<!-- ############################################################# -->

<section><title>XML Schemas</title>
<para>
Document Type Definitions (DTDs) have some important limitations. The W3C
is aware of this and is busy formulating a new standard for vocabulary
specification, <emphasis> schemas</emphasis>.
</para>
</section>

<!-- ############################################################# -->

<section><title>Linking</title>
<para>
The feature of HTML which most probably contributed more to its success 
than any other feature is its ability to link one HTML document with 
another or even to non-HTML information which is accessible through a Uniform
Resource Locator (URL).
</para>
<para>
But linking of information was not introduced in XML. For example, relational
databases have supported linking of tables for some time. XML provides links
and pointers for linking XML and other information.
</para>
</section>

<!-- ############################################################# -->

<section><title>Querying</title>
<para>
The W3C has also developed a query language, <emphasis>XQuery</emphasis> which can be used to
formulate queries on XML documents which are independent of the source of the
XML document, i.e. the type of repository (e.g. relational or object database 
or file).
</para>
</section>

<!-- ############################################################# -->

<section><title>XML Transformations</title>
<para>
The ability to transform an XML document into another XML vocabulary or to
another format altogether is of course important. In cases where there is
no global standard (or where the global standard is not strictly adhered
to), different companies could end up using a different vocabulary for the
same data domain. In such cases one requires tools for transforming the one 
document type to the other. Such tools are specified and are available.
They are called XSLT (XSL Transformation tools).
</para>
</section>

<!-- ############################################################# -->

<section><title>XML Styling</title>
<para>
A special case of XML transformation is that of styling, rendering or publishing.
For example, we might want to publish XML information in a web page of our
design. Once again we need to translate the XML document (or parts thereof)
into an HTML document which has the desired look. The W3C has specified a 
language to this end, the <emphasis>Extensible Style Language</emphasis> (XSL).
</para>
</section>
</section>
