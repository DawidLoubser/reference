<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE chapter SYSTEM "file:/opt/share/xml/Oxygen/samples/docbook/xml/docbookx.dtd">
-->
<section id="resources.information.technologies.java.j2me.introduction.intro"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Beginning</title>
    <section>
        <title>Java applications for mobile devices.</title>
        <para>More than just writing an application, we need it to be as easily portable accross devices and platforms as possible.
            But there are so many diffrent devices and each has it's own operating system. Writing an app that'll be easily portable accross all these platforms
            is not going to be a small task since these devices cover the range from digital watches
            to PDAs. We would also like to be able to write an app in a contemporary language and paradigm.</para>
        <para>Enter J2ME. The Java community project published specs for J2ME. An architecture
            designed to allow us OO nerds to code java for micro devices. With these
            specs they also released refrence implementations that's allready usable.</para>
        <para>Now, these devices come in many different sizes and flavours. The architecture as you
            would expect, is designed to cater for exactly this. First of all there's the virtual
            machine. A virtual machine is software that abstracts your application code from the
            hardware. This is in the spirit of Java's &quot;write once, run anywhere&quot; philosophy.</para>
        <para> Java code is compiled into byte code. This byte code can be copied to any device that
            has that virtual machine. The Java byte code is interpreted by the virtual machine into
            native machine code and executed. Because of device constraints the Java comunity
            process decided on different subsets of the Java 2 spesification. There is currently two
            virtual machines. CVM is a complete Java 2 implementation that runs on devices with a
            capabillity larger than 1Meg. KVM is the smaller limited subset and runs on devices with
            as little as 128K memory.</para>
        <para> On top of this there are different APIs known as profiles. One of these namely MIDP
            will be covered in detail later on. If you design your application for a certain spec
            you can at least be sure your application will run on all platforms claiming to
            implement that profile.</para>
        <para>Device manufacturers are responsible for their own implementations of the J2ME specs.
            The result of this being that they have some propriety and additional features in their
            implementations. If portabillity is one of your applications specs, guard against these.
            The specs cover allmost all the requirements you could possibly need. This said, the
            technology is still new and you might end up using some propriety features. In one of
            the later chapters we cover architecture. There you can find some usefull information
            and tips on how to write an application that is portable with the least amount of code
            changes. Once again; within the same profile apps are portable without any code changes
            or recompilation. The different profiles are subsets of each other. Thus applications
            written for smaller profiles are portable to the more capable profiles.</para>
        <para>From the smallest subset to the most complete there are JCVM(Java Card Virtual
            Machine) for Java Card technologies. KVM(Kilo Virtual Machine) which derives it's name
            from Kilo Byte, the kvm is superceded by the new CLDC Hotspot Virtual machine(not in use yet). And
            finally the better known JVM(Java Virtual Machine). The smaller ones being subsets of
            the bigger virtual machines to facilitate upward compatibillity. </para>
    </section>
</section>
