<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/samples/docbook/xml/docbookx.dtd">
-->
<section id="resources.information.technologies.java.j2me.introduction.VirtualMachines"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Virtual Machines</title>
    <section>
        <title>J2ME virtual machines</title>
        <para>As with most of the other Java 2 technologies, the virtual machines are also first of
            all specs of what these virtual machines must be able to accomodate. The JCP also
            released refrence implementations which different device manufacturers can use to
            implement their own for their own devices. </para>
        <para> The virtual machine takes care of a couple of problems. Besides giving developers the
            space to write code that'll run on multiple platforms without recompilation, it also
            takes care of memmory management, security, threading and all other hardware related
            interaction your software might require. </para>
        <para>In this section we will discuss the two virtual machines: KVM and CVM </para>
        <section>
            <title>KVM to CLDC Hotspot</title>
            <para>One of the very first projects for a very small virtual machine delivered KVM. KVM
                is used in CLDC configurations with the MID profile. It's currently the most widely
                used VM on mobile devices. It has avery small footprint potentially as small as 40
                kilobytes and comfortably runs on systems with 128 kilobytes </para>
            <para>KVM had been especially designed for small devices. It runs on both 16 and 32 bit
                processors. The byte code interpreter and garbage collector has also been
                implemented in the most resource effecient ways. The interpreter is not a compiling
                interpreter which has a performance penalty but uses much less resources. </para>
            <para>The KVM is implemented in C and can easily be ported to any platform for which a C
                compiler exists. </para>
            <para>There is newer but not widely used implementation of the CLDC spec which includes
                a VM. It's known as CLDC Hotspot. It's minimum requirements are a bit more taxing
                than KVM, based on the assumption that more power is squashed into smaller devices.
                It requires at least 1 Megbyte RAM. </para>
            <para>CLDC Hotspot is a compiling VM and implements Sun's hot spot technology. Compiling
                interpreters have definite performance bennefits and when code executes faster
                batteries last longer which is a relavant concern with small battery driven consumer
                devices. Hotspot technology selectively compiles and optimizes byte code based on
                best performance measurements. While compiling byte code increases the size of
                program objects. Using Hotspot technology significantly reduces the size of compiled
                code. </para>
            <para>CLDC Hotspot implementations on devices do not cover the CLDC spec at the time of
                this writing. A refence implementation for MIDP 1.0 spec is available at
                java.sun.com. The advantages to the vendors are significant and implementations are
                in development. </para>
        </section>
        <section>
            <title>CVM</title>
            <para>The CVM is an implementation of the Java 2 Virtual Machine spec. It has a much
                smaller footprint then the J2SE JVM and can run on devices with as little as 2MB
                memory. It ships as part of the CDC configuration. </para>
            <para>CVM was made to cater for compact devices that has network connection abillities.
                The devices that CVM are generally more capable than devices running KVM. And runs
                on both 32 and 64 bit CISC and RISC processors. </para>
            <para>It's been designed to be RTOS(Real Time Operating System) aware and space
                efficient. It can run java classes from rom, maps Java threads to native threads and
                uses invremental garbage collector. Other garbage collectors are also plugable into
                the CVM. </para>
            <para> The CVM has a modular design and is very configurable. It can start itself up and
                shutdown in a single memmory space without a process model. CVM supports the full
                Java 2 spec. </para>
					<figure id="resources.information.technologies.java.j2me.introduction.J2MEPlatform">
      			<title>J2ME Platform</title>
      			<graphic format="JPG" align="center" fileref="../../../../../resources/information/technologies/java/j2me/introduction/J2MEPlatform.jpg"/>
   				</figure>	
        </section>
    </section>
</section>
