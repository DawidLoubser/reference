<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author: Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>How does JAXB work?</title>
    <para>
       The JAXB uses a set of binding classes to map between XML and Java. These classes can be
        <itemizedlist>
            <listitem><para>
                generated by the JAXB's schema binding compiler,                
            </para></listitem>
            <listitem><para>
                or can be classes which exist already to which JAXB annotations are added in order to specify the
                XML binding parameters.                 
            </para></listitem>
        </itemizedlist>
    </para>
    <para>
        JAXB uses a set of simple <emphasis>annotations</emphasis>, together with
        a great deal of <emphasis>inference</emphasis> and <emphasis>sensible default behaviour</emphasis>
        to achieve seamless state transfer between your objects, and XML instance documents.
        The inference is done using <emphasis>reflection</emphasis> from both,
        <itemizedlist>
            <listitem><para>
                Java classes, and
            </para></listitem>
            <listitem><para>
                classes (complex types) defined in XML schemas.
            </para></listitem>    
        </itemizedlist>
    </para>
    
    <section>
        <title>Schema-driven JAXB usage</title>
        <para>
            Preferably one want to start from an XML schema and generate the Java Binding classes for the datatypes in the schema using the
            JAXB schema binding compiler, <literal>xjc</literal>. The generated binding classes are then used in your application to both,
            <itemizedlist>
                <listitem><para>
                    demarshall XML streams generating Java objects which can then be interrogated, manipulated and persisted from your
                    Java application, and
                </para></listitem>
                <listitem><para>
                    marshall Java data objects onto XML data which is either persisted in XML files or exchanged during integration solutions
                    (e.g. web services or XML/messaging based integration).
                </para></listitem>
            </itemizedlist>
        </para>
    </section>
    
    <section>
        <title>Binding existing classes to XML</title>
        <para>
            Though we would generally discourage from using this approach, JAXB also supports the generation of XML schemas from existing
            packages or sets of Java classes which are annotated to support XML binding. The marshalling and demarshalling of XML streams
            onto objects graphs can still be done by JAXB.
        </para>
    </section>    
</section>    
