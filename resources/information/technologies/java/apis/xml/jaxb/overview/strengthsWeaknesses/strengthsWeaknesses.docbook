<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author: Dawid Loubser -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Strengths<!-- and weaknesses--> of JAXB</title>
    <para>
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Declarative, not Dictating</title>
                    <para>
                        JAXB relies on metadata (through Java Annotations) to, through a completely
                        externalised approach, transfer state between your Java Beans, and xml. Whereas
                        other framework often generate xml-centric objects, JAXB imposes no restriction
                        or conventions in your object model. It is suitable to use 
                        JAXB-generated objects as your application's core object model.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Abstract, standard framework</title>
                    <para>
                        Like DOM and SAX, JAXB is an abstract framework specification. One or more 
                        <emphasis>service providers</emphasis> implement the functionality, but your
                        application is not tied to these service providers.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Simplicity and Minimalism</title>
                    <para>
                        When generating classes from XML schema, JAXB generates up to an order of 
                        magnitude less artifacts than typical frameworks. This is because all the
                        implementation complexity is <emphasis>in the service provider</emphasis>, and 
                        not in the generated classes.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Excellent use of Java Language features</title>
                    <para>
                        While most frameworks map Schema constructs to simple Java types
                        such as <literal>Strings</literal> and <emphasis>arrays</emphasis>, JAXB makes full use 
                        of the <emphasis>Java Collections Framework</emphasis> with <emphasis>Generics</emphasis>, 
                        <emphasis>Enumerations</emphasis>, and <emphasis>Annotations</emphasis>. It has a thoroughly
                        modern design and implementation, including the ability to make use of your own factory
                        classes and methods to create instances of your objects (not relying on default constructors).
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Capability to re-use existing objects and schemas</title>
                    <para>
                        While JAXB can generate Java types from your schema (and vice-versa), 
                        you can also use JAXB to bind your existing class to existing XML schema.
                    </para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>
</section>    