<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author: fritz@solms.co.za -->
<section 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
    
    <title>What is RMI?</title>
    
    <para>Java's Remote Method Invocation (RMI) feature enables an object in a JVM of one machine to
        make use of services of an object running in another JVM on possibly a remote machine. It
        thus allows developers to distribute an object oriented system across a networked
        environment.</para>
    <para>Even though Java has put its weight fully behind CORBA from Java 2 (JDK 1.2) onwards by
        supplying even a minimal CORBA object request broker free of charge with the Java
        Development Kit, Java supports its own architecture for distributed objects through<emphasis>
            Remote Method Invocation</emphasis> (RMI).</para>
    
    <para>Through development between Sun and IBM, <emphasis>RMI-IIOP</emphasis> has been made 
        available since JDK 1.3 and allows RMI to run over the Internet Inter-Orb Protocol, the network protocol 
        used by CORBA thereby combining the best of both worlds.
    </para>
    
    <para>CORBA is a vendor-independent object-oriented middleware standard which supports platform
        and and programming language independent service requests in a neat object-oriented
        framework. There are standard Java to IDL (CORBA's interface Defintion Language) mappings.
        Java is perhaps the simplest language to use when issuing remote CORBA service requests
        (method calls) and whether the server objects are implemented in Java or not is transparent
        to Java clients. Furthermore, the CORBA standards and most respectable object request
        brokers offer a large amount of services, some of which are generally useful and some of
        which are taylored specifically for certain business sectors.</para>
    <para>So why does Java add its own distributed objects framework in the form of RMI? It
        certainly has several disadvantages over using CORBA. For starters, it is not language
        independent (only Java objects can participate in RMI systems). Furthermore, RMI does not
        offer a services framework which can in any way compare with CORBA. RMI has, however, one
        feature which is virtually impossible to support within CORBA, partly due to CORBA's
        language independence. That is the feature of transferring an object together with its class
        to a remote machine. In other words, the compiled class code need not be available on the
        remote machine. It can be downloaded together with the object attributes. This feature alone
        is sufficient to justify the existence of RMI.</para>
    <para>Since RMI is designed specifically for Java, it only provides normal Java support for
        distributed objects. Since Java only supports input arguments (not output and input/output
        arguments like CORBA), RMI follows suit.</para>
</section>
