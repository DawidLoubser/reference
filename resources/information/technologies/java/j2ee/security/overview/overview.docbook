<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!-- Changed root to <section> for EJB course -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.j2ee.security.overview.overview"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    <title>Java EE Security Overview</title>

    <para>
        Java EE Applications typically consist of different component types, deployed
        into different containers (such as the Web Container and the EJB Container).
        These component containers provide
        <emphasis>security services</emphasis>
        that
        can provide restricted access to services in your application, based on the
        developer abstractly specifying
        <itemizedlist>
            <listitem>
                <para>
                    The different
                    <emphasis>roles</emphasis>
                    played by users in the system (typically
                    a direct mapping of the
                    <emphasis>actors</emphasis>
                    in your use-case model)
                </para>
            </listitem>
            <listitem>
                <para>
                    The behaviour of service requests made by users in the different roles. This
                    is either done simply and declaratively (allowed/denied) or may be customised
                    to the application's needs (for example, by showing a role-customised user interface, or
                    returning role-specific results in an operation) by programmatically writing
                    behaviour. Often, a combination of both are implemented.
                </para>
            </listitem>
            <listitem>
                <para>
                    The mechanism to interact with the user, and request security
                    <emphasis>credentials</emphasis>
                    when needed.
                </para>
            </listitem>
        </itemizedlist>
        None of these aspects in Java EE are designed to reside with your logic components, but are typically
        <quote>layered</quote>
        on top of application components. This ensures that, even in the context of elaborate
        security schemes, your logic components remain loosely coupled, portable, and simple to maintain.
    </para>
    <para>
        Only when your Java EE Server is configured or your application is deployed, are decisions made such as the
        security
        <emphasis>realm</emphasis>
        (users database) to be used, and how user
        <emphasis>roles</emphasis>
        are
        resolved (for example, against your company's existing LDAP-based user authentication system).
    </para>

    <xi:include href="authenticationAuthorization/authenticationAuthorization.docbook"/>

    <xi:include href="specificationMechanisms/specificationMechanisms.docbook"/>

    <xi:include href="sharedSecurity/sharedSecurity.docbook"/>

</section>