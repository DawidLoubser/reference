<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.knowledge.technologies.java.j2ee.ejb.clustering.configuration.clusteringJndi"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Clustering the JNDI naming service</title>
  
  <para>
  We have been trying to provide fail-over safety by avoiding single points
  of failure by clustering enterprise beans and providing a intelligent
  client-side dispatcher in the form of a smart proxy.
  </para>
  <para>
  We do, however, still have a single point of failure in the form of a
  single naming service. This is a problem since handles to enterpise
  beans are typically obtained through a JNDI naming service.
  </para>
  <para>
  We thus need to cluster the naming service itself in order to remove
  the last single point of failure. This is achieved in JBoss through
  HA-JNDI.
  </para>

  <section>
    <title>What does HA-JNDI supply?</title>
    <para>
      HA-JNDI provides a fail-safe naming service by
      <itemizedlist>
        <listitem><para>
          hosting a copy of the JNDI naming service on each node in the cluster,
        </para></listitem>  
        <listitem><para>
          replicating the JNDI tree accross the HA_JNDI naming service accross
          the cluster in the form oof a <emphasis>cluster-wide JNDI tree</emphasis>,
        </para>  
        <listitem><para>
           ensuring that the smart proxy automatically queries another instance
           of the JNDI naming service when failing to connect to a particular instance 
           of the naming service and
         </para></listitem>  
        <listitem><para>
           forwarding the lookup query to local JNDI trees iif the requested
           name is not yet available in the cluster-wide tree.
         </para></listitem>  
        </listitem>
      </itemizedlist>
    </para>
  </section>  
  
  <section>
    <title>Setting up HA-JNDI</title>
    <para> 
       HA-JNDI is set up for a particular partition, <abbrev>i.e.</abbrev> separate partitions will
       have their own HA-JNDI. The HA-JNDI for the default partition is set up in
       the <literal>cluster-service.xml</literal> as follows:
       <programlisting>
<![CDATA[
    <mbean code="org.jboss.ha.jndi.HANamingService" 
           name="jboss:service=HAJNDI">
       <depends>jboss:service=DefaultPartition</depends>
      <attribute name="PartitionName">DefaultPartition</attribute>
      <attribute name="RmiPort">0</attribute>  <!-- use any available port -->
      <attribute name="Port">1100</attribute>  <!-- port uused for HA-JNDI -->
      <attribute name="Backlog">50</attribute>
    </mbean>
  
    <mbean code="org.jboss.invocation.jrmp.server.JRMPInvokerHA"
           name="jboss:service=invoker,type=jrmpha">
    </mbean>

]]>       
       </programlisting>
    </para>
  </section>
  
  <section>
    <title>HA-JNDI lookup algorithm</title>  
    <para>
      The algorithm processing a JNDI lookup query is as follows:
      <orderedlist>
        <listitem><para>
           If the requested binding is available on the cluster-wide tree it is returned.
        </para></listitem>
        <listitem><para>
          If the requested binding is not available in the cluster-wide tree, the lookup
          query is forwarded to the local JNDI service (the one to which the client is
          currently connected).
        </para></listitem>
        <listitem><para>
          If the requested binding is not available on the local JNDI tree, the request
          is forwarded to all other HA-JNDI services in the cluster and the first
          match is returned.
        </para></listitem>
        <listitem><para>
          If no match is found a \verb+NameNotFoundException+ is thrown.
        </para></listitem>
      </orderedlist>
    </para>
  </section>  
  
  <section>
    <title>Making the initial lookup fail-safe</title>
    <para>
      The initial client interaction with an application server is typically through the
      JNDI naming service. Once the first lookup has been made, the client has a handle
      to the HA-JNDI naming service through a smart proxy which is fail safe.
    </para>
    <para>
      Thee initial lookup could, however, fail. To address this one typically inserts
      multiple known naming servers in the list of JNDI nnaming providers.  This list
      is often supplied in the <literal>jndi.properties</literal> file.
      The resultant <literal>jndi.properties</literal> file could look as follows:
      <programlisting>
<![CDATA[
  java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
  java.naming.provider.url=jndiHost1:1100,jndiHost2:1100:jndiHost3:1100
  java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces
  jnp.socketFactory=org.jnp.interfaces.TimedSocketFactory
  #Connection timeout (0 == blocking)
  jnp.timeout=0
  #Read timeout (0 == blocking)
  jnp.sotimeout=0
]]>      
      </programlisting>
    </para>
  </section>
</section>  
  
