<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.entityBeans.beanRelationships.specialization">
  <title>Specialization relationships between entity beans</title>
  <para>
    EJB supports persistent specialization relationships (which are mapped
    through to the database) as well as polymorphism on entity beans.
  </para>
  
  <section>
      <title>Mapping onto relational databases</title>
      <para>
      Relational databases do not intrinsically support specialization. The EJB
      specification supports 3 types of mappings:
      <orderedlist>
            <listitem>
               <para>Joined subclass.</para>
            </listitem>
            <listitem>
               <para>Single table per class hierarchy.</para>
            </listitem>
            <listitem>
               <para>Table per class.</para>
            </listitem>
         </orderedlist>
      </para>
  </section>

  <section>
      <title>Joined subclass</title>
      <para>
      This is often the preferred mapping. The ultimate superclasss is a simple
      entity bean mapping. Each subclass has a reference (foreign key) to its
      direct superclass.
         <programlisting language="Java">
@Entity
@Inheritance(strategy=InheritanceType.JOINED)
public class Person {...}
       
       
@Entity
public class Employee extends Person {...}
       
       
@Entity
@InheritanceJoinColumn(name="EMPLOYEE_REF")
public class Contractor extends Employee {...}
        </programlisting>
      </para>
  </section>
  
  <section>
      <title>Single table per class hierarchy</title>
      <para>
      This mapping results in a non-normalized database structure which requires
      table changes whenever another subclass is added. It does, however, have
      the advantage of persisting the fact that it is a specialization
      relationship through to database which would allow for reconstruction of
      the specialization relationships through reflection on the database
      structure.
         <programlisting language="Java">
@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE
             discriminatorType=DiscriminatorType.STRING
             discriminatorValue="Person" 
        // default: fully qualified class name
)
@DiscriminatorColumn(name="Type")  // default: "TYPE"
public class Person {...}
        
@Entity
@Inheritance(discriminatorValue="Employee")
public class Employee extends Person {...}
        
@Entity
@Inheritance(discriminatorValue="Contractor")
public class Contractor extends Employee {...}
        </programlisting>
      </para>
  </section>
  
  <section>
      <title>Single table per class</title>
      <para>
      This is only seldomly used -- iff, then mainly for the top level of the
      specialization hierarchy:
         <programlisting language="Java">
@Entity
@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)
public class Person {...}
        
@Entity
public class Employee extends Person {...}
        
@Entity
public class Contractor extends Employee {...}
        </programlisting>
      </para>
  </section>
  
  
</section>