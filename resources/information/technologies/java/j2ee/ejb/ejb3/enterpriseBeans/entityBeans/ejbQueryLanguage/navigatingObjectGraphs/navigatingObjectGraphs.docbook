<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns409:section xmlns:ns409="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.navigatingObjectGraphs.navigatingObjectGraphs">

  <ns410:title xmlns:ns410="http://docbook.org/ns/docbook">Navigating Through Object Graphs </ns410:title>
  <ns411:para xmlns:ns411="http://docbook.org/ns/docbook">
    Before we can discuss navigation through object graphs, we have to discuss single and
    multi-valued paths.
  </ns411:para>
  
  <ns412:section xmlns:ns412="http://docbook.org/ns/docbook">
    <ns413:title xmlns:ns413="http://docbook.org/ns/docbook">Simple Paths</ns413:title>
    <ns414:para xmlns:ns414="http://docbook.org/ns/docbook">
      Assume we have a <ns415:literal xmlns:ns415="http://docbook.org/ns/docbook">Bond</ns415:literal> entity bean which has the
      structure shown in 
      <ns416:xref xmlns:ns416="http://docbook.org/ns/docbook" linkend="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.navigatingObjectGraphs.bond_fig"/>.
      One of the strengths of EJB-QL is its ability to smoothly navigate across
      relationships, <ns417:abbrev xmlns:ns417="http://docbook.org/ns/docbook">i.e.</ns417:abbrev> through object graphs. Consider, as an example, the UML 
      diagram for a bond shown in 
      <ns418:xref xmlns:ns418="http://docbook.org/ns/docbook" linkend="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.navigatingObjectGraphs.bond_fig"/>.
    </ns414:para>
    
    <ns419:figure xmlns:ns419="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.navigatingObjectGraphs.bond_fig">
      <ns420:title xmlns:ns420="http://docbook.org/ns/docbook">UML diagram for a bond</ns420:title>
      <mediaobject xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook"><imageobject><imagedata fileref="bond.jpg"/></imageobject></mediaobject>
    </ns419:figure>
    
    <ns421:para xmlns:ns421="http://docbook.org/ns/docbook">
      In EJB-QL one can traverse relationships in an object-oriented fashion using the Java
      element access operator. For example, we could specify the following SELECT statement to
      select all bond accounts
<ns422:programlisting xmlns:ns422="http://docbook.org/ns/docbook">
SELECT b.bondAccount FROM Bond b
</ns422:programlisting>      
      returns a collection of
      accounts, each of which is a bond account. The <ns423:literal xmlns:ns423="http://docbook.org/ns/docbook">Bond</ns423:literal>
      entity bean must supply an abstract accessor method to query the related bond account. The
      equivalent SQL statement would look something like this
<ns424:programlisting xmlns:ns424="http://docbook.org/ns/docbook">
SELECT account from Account, Bond
WHERE Bond.bondAccount = Account.id
</ns424:programlisting>      
   </ns421:para>
   <ns425:para xmlns:ns425="http://docbook.org/ns/docbook">
      We can have paths of multiple nodes. For example,
<ns426:programlisting xmlns:ns426="http://docbook.org/ns/docbook">
SELECT bond.bondAccount.balance FROM Bond bond
</ns426:programlisting>  
    </ns425:para>
  </ns412:section>  
  
  <ns427:section xmlns:ns427="http://docbook.org/ns/docbook">
    <ns428:title xmlns:ns428="http://docbook.org/ns/docbook">Single-Valued versus Multi-Valued Paths</ns428:title>
    <ns429:para xmlns:ns429="http://docbook.org/ns/docbook">
      A single valued path is a path without any branching below the highest layer (i.e.
      the layer connected to the result objects). SELECT clauses and most WHERE clauses require
      a single-valued path.
    </ns429:para>
    <ns430:para xmlns:ns430="http://docbook.org/ns/docbook">For example, all the queries discussed in the previous section use single valued
      paths in the SELECT statement and are hence valid EJB-QL statements. On the other hand,
      querying all the bond accounts of all the clients via
<ns431:programlisting xmlns:ns431="http://docbook.org/ns/docbook">
SELECT client.bonds.account FROM Client client      -&gt; INVALID
</ns431:programlisting>      
      resembles a multi-valued path because c refers to a collection of clients each 
      of which has a collection of bonds which each has an account. 
    </ns430:para>
    
    <ns432:figure xmlns:ns432="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.navigatingObjectGraphs.courseSchedule_fig">
      <ns433:title xmlns:ns433="http://docbook.org/ns/docbook">UML diagram for presentations of courses for a course schedule</ns433:title>
      <mediaobject xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook"><imageobject><imagedata fileref="courseSchedule.jpg"/></imageobject></mediaobject>
    </ns432:figure>

    <ns434:para xmlns:ns434="http://docbook.org/ns/docbook">
      As a second example, consider the UML diagram for a course schedule shown in figure
      <ns435:xref xmlns:ns435="http://docbook.org/ns/docbook" linkend="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.navigatingObjectGraphs.courseSchedule_fig"/>.
      In a relational database this object graph could be represented as 4 tables, one
      for each entity bean.
    </ns434:para>
    <ns436:para xmlns:ns436="http://docbook.org/ns/docbook">
      If we wanted to extract all course names which are currently scheduled 
      (<ns437:abbrev xmlns:ns437="http://docbook.org/ns/docbook">i.e.</ns437:abbrev> for
      which there exists a presentation), we could do this via the following SQL query:
<ns438:programlisting xmlns:ns438="http://docbook.org/ns/docbook">
SELECT Course.name from Course, Presentation 
WHERE Presentation.course = Course.id
</ns438:programlisting>      
    </ns436:para>
    <ns439:para xmlns:ns439="http://docbook.org/ns/docbook">
      To achieve the same in EJB-QL we can specify the following query:
<ns440:programlisting xmlns:ns440="http://docbook.org/ns/docbook">
SELECT p.course.name FROM Presentation p
</ns440:programlisting>      
      This is a single-valued
      path and hence the query is valid. On the other hand, the query
<ns441:programlisting xmlns:ns441="http://docbook.org/ns/docbook">
SELECT p.presenters.course.name FROM Presentation p   -&gt; INVALID
</ns441:programlisting>      
      is incorrect because we have, once again, a multi-valued path. 
    </ns439:para>
  </ns427:section>
</ns409:section>