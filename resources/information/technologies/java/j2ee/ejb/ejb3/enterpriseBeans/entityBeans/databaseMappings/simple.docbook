<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.entityBeans.databaseMappings.simple">
  <title>Simple database mappings</title>
  <para>
    The object-relational mapping functionality of the <emphasis>Java Persistence API</emphasis> (JPA),
    which is used to manage entity beans, has a sensible default scheme of mapping your object
    graph to a relational structure.
  </para>
  <para>
    JPA provides standard annotations to allow the developer to customise the mapping, such
    as specifying the database table which should be the
    <emphasis>primary table</emphasis> for the entity bean. One may further specify
    the column names for object properties.
    
  </para>
  
  <section>
      <title>Example</title>
      <para>
        <programlisting language="Java">
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Account implements java.io.Serializable
{
  public Account() {}
        
  public long getAccountNo() {return accountNo;}
          
  public double getBalance() {return balance;}
        
  public void debit(double amount) throws InsufficientFunds
  {
    // Check preconditions
    //...
    
    balance -= amount;
  }      
        
  public void credit(double amount)
  {
    balance += amount;
  }      
       
  public String toString() 
  {
    return accNo + ": balance = " + balance;
  }      

  @Id
  private long accountNo;
  private double balance;
}                
</programlisting>
      could be customised as
        <programlisting language="Java">
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Table;

@Entity @Table(name = "ACCOUNTS")       
public class Account implements java.io.Serializable
{
  public Account() {}      
     
  public long getAccountNo() {return accountNo;}
          
  public double getBalance() {return balance;}
        
  public void debit(double amount) throws InsufficientFunds
  {
    // Check preconditions
    //...
    
    balance -= amount;
  }      
        
  public void credit(double amount)
  {
    balance += amount;
  }      
       
  public String toString() 
  {
    return accNo + ": balance = " + balance;
  }      

  @Id @Column(name = "ACC_NO")
  private long accountNo;
  
  @Column(name = "BAL")
  private double balance;
}                
      </programlisting>
      </para>
  </section>
  
</section>