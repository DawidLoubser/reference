<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Deferred synchronous processing of requests</title>
    <para>
        The <literal>@asynchronous</literal> annotation can also be used for processing of deferred synchronous requests, i.e.
        for services which are requested asynchronously, but for which, at a later stage the return value needs to be obtained.
        In Java this is done by having the asynchronous service return a <literal>Future</literal> from which the result is obtained
        later stage. 
    </para>
    <para>
        Consider, for example, a process which needs to obtain prices for multiple service providers (e.g. airlines, hotels, ...) and
        then assemble an optimal itinery for a client (optimized say first on price, then travel time and so on). In this case the process
        of booking an optimal itinery would source multiple quotes through  deferred synchronous requests made to different service providers,
        block until sufficient quotes have been obtained and then assemble the optimal itinery. In such an example, the 
        <literal>provideServiceProviderQuote</literal> service would be annotated as <literal>@asynchronous</literal> returning a 
        <literal>Future</literal> (i.e. be a deferred synchronous service):
        <programlisting><![CDATA[
@Stateless            
public class BookingServicesBean
{
    @asynchronous
    public Future<QuoteResult> provideQuote(QuoteRequest quoteRequest)
    {
        ...
    }
    
    public BookItenaryResult bookItenary(BookItineryRequest request)
    {
    
        ...
        Future<QuoteResult> futureQuoteResult = provideQuote(quoteRequest);
        ...
        // do some other things (eg request further quotes)
        ...
        // Now block process until result is available
        QuoteResult result = futureQuoteResult.get();
        ...
    }
}    
        ]]></programlisting>
    </para>
</section>    
