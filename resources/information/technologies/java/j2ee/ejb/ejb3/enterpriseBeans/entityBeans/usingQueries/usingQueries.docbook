<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns647:section xmlns:ns647="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.entityBeans.usingQueries.usingQueries">

  <ns648:title xmlns:ns648="http://docbook.org/ns/docbook">Using EJB-QL queries</ns648:title>
  
  <ns649:section xmlns:ns649="http://docbook.org/ns/docbook">
    <ns650:title xmlns:ns650="http://docbook.org/ns/docbook">Creating queries</ns650:title>
    <ns651:para xmlns:ns651="http://docbook.org/ns/docbook">
      Queries are created using the entity manager. For example
      <ns652:programlisting xmlns:ns652="http://docbook.org/ns/docbook">
@Stateless
public class ProductDAOImpl
{
   @PersistenceContext
   EntityManager entityManager;
   ...
   public List findByDescription(String description, int page)
   {
     return 
      entityManager.createQuery
        ("SELECT p FROM Product p WHERE p.description like :descr")
          .setParameter("descr", description)
          .setMaxResults(30)
          .setFirstResult(pageNo*30)
          .getResultList();
  }
  ...
}        
        </ns652:programlisting>      
    </ns651:para>
  </ns649:section>
  
  
  <ns653:section xmlns:ns653="http://docbook.org/ns/docbook">
    <ns654:title xmlns:ns654="http://docbook.org/ns/docbook">Named queries</ns654:title>
    <ns655:para xmlns:ns655="http://docbook.org/ns/docbook">
      Named queries can be defined at the package or class level. Their
      definition is, however, global to the session factory/entity manager
      scope. It is typical to use the dot-notation (as below) to guarantee unique
      query names.
    </ns655:para>
    
    <ns656:section xmlns:ns656="http://docbook.org/ns/docbook">
      <ns657:title xmlns:ns657="http://docbook.org/ns/docbook">Defining a named query</ns657:title>
      <ns658:para xmlns:ns658="http://docbook.org/ns/docbook">
        <ns659:programlisting xmlns:ns659="http://docbook.org/ns/docbook">
javax.persistence.NamedQueries
{
  @javax.peristence.NamedQuery(name="bonds.getAllAbove" 
     query="select b from Bond b where b.balance &gt;= :amount")
  ...
}
        </ns659:programlisting>
      </ns658:para>
    </ns656:section>
    
    <ns660:section xmlns:ns660="http://docbook.org/ns/docbook">
      <ns661:title xmlns:ns661="http://docbook.org/ns/docbook">Using named queries</ns661:title>
      <ns662:para xmlns:ns662="http://docbook.org/ns/docbook">
        Named queries are instantiated like any other class. Parameters can be
        set on the query object before getting the results list:
        <ns663:programlisting xmlns:ns663="http://docbook.org/ns/docbook">
public class SomeBean
{
  @PersistenceContext
  EntityManager entityManager;
          
  public void doSomething()
  {
    Query query = entityManager.createNamedQuery("bonds.getAllAbove");
    query.setParameter(0, new Double(500000));
    List list = query.getResultList() ;
    ...
  }
}
          </ns663:programlisting>        
      </ns662:para>
    </ns660:section>
    
    <ns664:section xmlns:ns664="http://docbook.org/ns/docbook">
      <ns665:title xmlns:ns665="http://docbook.org/ns/docbook">Defining named queries with the corresponding entity beans</ns665:title>
      <ns666:para xmlns:ns666="http://docbook.org/ns/docbook">
        One may use the <ns667:literal xmlns:ns667="http://docbook.org/ns/docbook">@NamedQuery/ies</ns667:literal> annotations (in <ns668:literal xmlns:ns668="http://docbook.org/ns/docbook">javax.persistence)</ns668:literal>
        to specify named queries in the entities themselves.
      <ns669:programlisting xmlns:ns669="http://docbook.org/ns/docbook">
@Entity        
@NamedQueries({
  @NamedQuery(name="bonds.getAllAbove" 
     query="select b from Bond b where b.balance &gt;= :amount")
})
public class Bond
{
  ...
}        
        </ns669:programlisting></ns666:para>
    </ns664:section>
    
  </ns653:section>
  
  
</ns647:section>