<?xml version="1.0" encoding="UTF-8"?>
<section
  id="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.entityBeans.defining.whatIsPersisted"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>What is persisted for entity beans?</title>
  <para>
    The persistent state of an entity bean is defined by its instance variables.
    These may only be accessed from within the bean itself.
  </para>
  <para>
    The instance variables are accessed by the container either
    <itemizedlist>
      <listitem><para>
        via <emphasis>accessors</emphasis> (<literal>getXXX()</literal> methods) 
        following the JavaBeans specification, or
      </para></listitem>
      <listitem><para>
        via <emphasis>direct access to fields</emphasis>. 
      </para></listitem>
    </itemizedlist>
    The schema used for a particular object is inferred, based on whether the
    <emphasis>primary key</emphasis> has been indicated on a field, or
    an accessor method.
  </para>
  <para>
    For example, state management would be performed through the get/set service
    of the following class:
    <programlisting><![CDATA[
@Entity
public class Account implements Serializable
{	
	@Id 
	public int getAccountNumber()
	{
	  return accountNumber;
	}
	
	public void setAccountNumber( int accountNumber )
	{
	  this.accountNumber = accountNumber;
	}
	
	 
	private int accountNumber;
	private double balance;
}
]]></programlisting>
    whereas the state would be managed directly through the fields in the
    following case:
    <programlisting><![CDATA[
@Entity
public class Account implements Serializable
{	
	public int getAccountNumber()
	{
	  return accountNumber;
	}
	
	public void setAccountNumber( int accountNumber )
	{
	  this.accountNumber = accountNumber;
	}
	
	
	@Id 
	private int accountNumber;
	private double balance;
}
]]></programlisting>
  </para>
  <note>
    <para>
      Though the latter case <quote>breaks encapsulation</quote>, this is usually not
      a problem, as this effectively applies only during object creation. Encapsulation
      usually needs to protect the state of an object from clients, not from I/O
      frameworks.
    </para>
  </note>
  
  <section>
    <title>Valid persistent field types</title>
    <para>
      The following are valid data types for persistent fields:
      <itemizedlist>
        <listitem><para>
          Java primitives and primitives wrappers,
        </para></listitem>
        <listitem><para>
          The following built-in classes:
          <itemizedlist>
            <listitem><para>
              <literal>java.lang.String</literal>,
            </para></listitem>
            <listitem><para>
              <literal>java.util.Date</literal>,
            </para></listitem>
            <listitem><para>
              <literal>java.math.BigDecimal</literal> and
              <literal>BigInteger</literal>,
            </para></listitem>
            <listitem><para>
              <literal>java.sql.Time</literal> and <literal>Timestamp</literal>,
            </para></listitem>
            <listitem><para>
              <literal>byte[], Byte[], char[]</literal> and
              <literal>Character[]</literal>,
            </para></listitem>
            <listitem><para>
              <literal>java.sql.Blob</literal> and <literal>Clob</literal>,
            </para></listitem>
          </itemizedlist>
        </para></listitem>  
        <listitem><para>
          embedded classes (see 
          <xref
            linkend="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.entityBeans.defining.embeddableClasses"/>),
        </para></listitem>
        <listitem><para>
          other entity beans, and
        </para></listitem>
        <listitem><para>
          any other serializable objects.
        </para></listitem>
      </itemizedlist>
      
    </para>
  </section>
  
  <section>
    <title>Collection variables</title>
    <para>
      Collection variables are persisted naturally, which allows for the standard
      usage of <literal>java.util.Collection</literal>, <literal>java.util.List</literal>, 
      or <literal>java.utiil.Set</literal>.
    </para>
  </section>
  
  <section>
    <title>Transient fields</title>
    <para>
      Transient fields (fields which do should not be persisted, and hence do not form part of the
      object's persistent state) are specified by
      <itemizedlist>
        <listitem><para>
          in the case of property access annotating the getter or setter as
          <literal>@Transient</literal>, and
        </para></listitem>
        <listitem><para>
          by declaring the protected field as <literal>transient</literal> using the
          Java language keyword, in the case of field access. 
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
  
  <section>
    <title>Field validation</title>
    <para>
      Field validation may be done in the <emphasis>setter</emphasis> methods, which may throw an
      exception. An exception will cause the controlling transaction (if any) to be rolled back.
    </para>
  </section>
  
</section>  