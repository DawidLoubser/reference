<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.entityBeans.cmp.ejbQuery.querySource.querySource"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Specifying the Source for a Query</title>
  <para>
    The FROM clause specifies and constrains the domain of the query by
    specifying the domain as a particular entity bean type. 
  </para>
  
  <section>
    <title>Selecting from multiple domains</title>
    <para>
      The FROM clause supports selecting from multiple domains delimited by
      commas.
    </para>
    <para>
      For example, should you wish to find all election results which had a
      greater attendance than South Africa's 1994 election you could specify the
      following query:
      <programlisting><![CDATA[
SELECT DISTINCT election
FROM Election election, Election election94
WHERE election.turnout > election94.turnout AND
      election.country = 'South Afica' AND
      election94.year = '1994'
      ]]></programlisting>
    </para>
  </section>
  
  <section>
    <title>Joins</title>
    <para>
      
    </para>
    
    <section> 
      <title>Inner joins</title>
      <para>
        Inner joins are used to select from an inclusion set obtained by a join
        condition over different objects. They can be specified implicitly via
        the cartesian product or explicitly.
      </para>
      <section>
        <title>Implicit inner joins</title>
        <para>
          For example, the following query performs an implicit inner join to determine
          those companies which are both customers and service providers:
          <programlisting><![CDATA[
SELECT DISTINCT c
FROM Customer c, ServiceProvider sp
WHERE c.companyRegistrationNo = sp.id
            ]]></programlisting>
        </para>
      </section>
      
      <section>
        <title>Explicit inner join</title>
        <para>
          The following explicit INNER JOIN returns a collection of all bond accounts
          of clients living in Johannesburg:
<programlisting><![CDATA[
SELECT bonds.account 
FROM Client c INNER JOIN c.bonds bonds 
WHERE c.address.city = 'Johannesburg'
  ]]></programlisting>
          Here the INNER JOIN can be abreviated to JOIN (INNER is optional).
        </para>
        <para>
          This is equivalent to
          <programlisting><![CDATA[
SELECT bonds.account 
FROM Client c IN (c.bonds) bonds 
WHERE c.address.city = 'Johannesburg'
            ]]></programlisting>
        </para>
      </section>
    </section>
    
    <section>
      <title>Left outer joins</title>
      <para>
        While an inner join retrieves only those objects which satisfy the join
        condition, an outer join does the same thing but with the addition of 
        returning objects from the left collection for which there were no matching 
        objects in the right collection.
      </para>
    </section>

    <section>
      <title>Fetch joins</title>
      <para>
        Fetch joins are special kinds of left joins which
        enable one to prefetch, in addition to the query result,
        other related object collections into the buffer. This is done to
        improve performance.    
       </para>
    </section>
    
  </section>
  
  
  <section>
    <title>Joins With An Empty Domain</title>
    <para>
      If we create a join with an empty domain, the result set will be empty. For example,
      consider a query across 2 unrelated entity beans,  
      <literal>Course</literal> and <literal>Employee</literal>
<programlisting><![CDATA[
SELECT Object(c) FROM Course c, Employee e
]]></programlisting> 
   </para> 
   <para>
     This query returns all the <literal>Course</literal> entity beans provided that there exist
     <literal>Employee</literal> entity beans. Notice that as soon as there
      are any employees, no matter how many or what their information is, the query will return
      a collection of all courses.
    </para>
  </section>
  
</section>  
