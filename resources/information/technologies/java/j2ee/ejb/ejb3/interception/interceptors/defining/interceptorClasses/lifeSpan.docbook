<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.sessionBeans.interception.interceptors.interceptorClasses.lifeSpan">
  <title>Interceptor life span and state</title>
  <para>
    An interceptor has the same life span as the context whose service is intercepted. 
    An interceptor for a session
    bean has hence the life span of the session while an interceptor applied to a message driven
    bean exists while the service request is being processed.
  </para>
  
  <section>
      <title>Interceptor state</title>
      <para>
      An interceptor may have state in the form of instance members and this state is
      guaranteed to survive across invocations.
    </para>
  </section>
  
  
  <section>
      <title>Activation and de-activation</title>
      <para>
      If an interceptor is applied to a stateful session bean it is activated and passivated upon
      bean instance activation and passivation. 
    </para>
  </section>
  
  <section>
      <title>Life cycle callback services</title>
      <para>
      In order to perform specific tasks on creation, destruction, passivation or re-activation, one
      may provide callback handlers similar to the enterprise bean callback handlers,
      <abbrev>i.e.</abbrev> methods which have been annotated with
      <literal>@PostConstruct</literal>, <literal>@PreDestroy</literal>, <literal>@PostActivate</literal>
      or <literal>@PrePassivate</literal> annotations.
    </para>
  </section>
</section>