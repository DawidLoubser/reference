<section
  id="resources.information.technologies.java.j2ee.ejb.ejb3.enterpriseBeans.sessionBeans.dependencyInjection.inversionOfControl"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Dependency injection as a form of inversion of control</title>
  <para>
    To explain <emphasis>inversion of control</emphasis>, recall the original
    non-graphical software applications. There the application code was under full control,
    asking the user for one input, then the next, then processing that, etc --
    all decisions on where to go next was done by the application logic.
  </para>  
  <para>
    Inversion of control was the key change when moving from console based
    applications to graphical user interfaces, the control was transferred from
    the application logic to the user interface. <emphasis>Inversion of control 
      thus involves relinquishing control to something which is outside the
      application logic</emphasis>.
  </para>
  <para>
    In EJB applications, your components often needs references to objects
    managed by the application server. These may include <emphasis>session contexts</emphasis>, 
    <emphasis>timer services</emphasis>, <emphasis>transaction contexts</emphasis>, 
    <emphasis>entity managers</emphasis>, as well as other beans.
    The responsibilities of providing references to these resources should reside
    in the application server. Inversion of control enables one to delegate the 
    population of fields (or of method arguments) to the container.
  </para>
</section>  