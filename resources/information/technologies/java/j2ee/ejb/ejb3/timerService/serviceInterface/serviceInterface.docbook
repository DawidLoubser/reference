<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    
    <title>The TimerService interface</title>
    
    <indexterm>
        <primary>EJB</primary>
        <secondary>Timer Service</secondary>
        <tertiary>service interface</tertiary>
    </indexterm>
    
    <para>
        The Timer Service is accessed via dependency injection, through the <literal>getTimerService()</literal> method of 
        the <literal>javax.ejb.EJBContext</literal> interface, or through explicit lookup using JNDI. The TimerService
        interface offers the following services: 
    </para>
    <programlisting language="Java"><![CDATA[
package javax.ejb;

public interface TimerService 
{ 
  /* Schedule a once-off, fixed delay timer */
  public Timer createTimer(long duration, java.io.Serializable info);
  
  /* Schedule a recurring, fixed initial delay timer */
  public Timer createTimer(long initialDuration, long intervalDuration, 
                   java.io.Serializable info);
  
  /* Schedule a once-off, absolute timer */
  public Timer createTimer(java.util.Date expiration, 
                   java.io.Serializable info);
  
  /* Schedule a recurring, absolute initial timer */
  public Timer createTimer(java.util.Date initialExpiration, 
                   long intervalDuration, java.io.Serializable info);
  
  /* Returns all the active Timer objects associated with the bean */
  public Collection getTimers(); 
} 
]]></programlisting>
    <note>
        <para>
            The <literal>info</literal> argument present on each service is to provide
            the timer with a piece of information which it will reproduce when it calls 
            back the bean - a handy mechanism to provide the call-back service with information
            to tell it <emphasis>why</emphasis> it is being called, common when multiple timers
            are scheduled on the same bean.
        </para>
    </note>
    <para>
        To schedule a timer as part of a service request, the following is done:
    </para>
    <programlisting language="Java"><![CDATA[
import javax.annotation.*;
import javax.ejb.*;

@Stateless
public class SomeBean implements SomeContract
{ 
  public void doSomething()
  {
    // Perform business logic
    // ...
    
    // Schedule a timer to call back this bean after
    // an hour (delay is expressed in milliseconds)
    Timer timer = ejbContext.getTimerService()
                    .createTimer( 1000 * 60 * 60,  null );
  }

  // Called when the timer expires
  @Timeout 
  public void timeIsUp(Timer timer)
  {
      // React to time event
      // ... 
  }

  @Resource
  private EJBContext ejbContext;
}

]]></programlisting>
    
    <section>
        <title>The Timer interface</title>
        <para>
            When a timer is scheduled, or when one calls back, a reference is provided to a <literal>javax.ejb.Timer</literal>,
            which allows the bean to inspect or cancel the timer. Multiple timers may be active for each bean. 
            It offers the following services:
            <programlisting language="Java"><![CDATA[
package javax.ejb;

public interface Timer 
{
    public void cancel(); 
    
    public long getTimeRemaining();
    
    public java.util.Date getNextTimeout();
    
    public javax.ejb.TimerHandle getHandle();
    
    public java.io.Serializable getInfo(); 
} 

                ]]></programlisting>
        </para>
    </section>
    
</section>