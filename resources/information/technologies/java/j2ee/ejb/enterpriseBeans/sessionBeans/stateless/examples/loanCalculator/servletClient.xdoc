<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"-->

<section id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.examples.loanCalculator.servletClient"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example: LoanCalculator servlet client</title>
  <para>
    To demonstrate a simple web-based EJB client we create a form within a static 
    HTML page which contains some JavaScript for client-side input validation. 
    The client issues an HTTP request via the <literal>submit</literal> button 
    which is processed from by  the<literal>LoanCalculatorServlet</literal> 
    which delegates the business logic to the LoanCalculator session bean
    and then transfers control to a JSP for generating the response page.
  </para>
  
  <section>
    <title>Loan Calculator HTML File: index.html</title>
    <para>
<programlisting>
<xi:include parse="text" href="../../../../../source/LoanCalculator/src/servlet/web/index.html" />
</programlisting>    
    </para>
  </section>
  
  <section>
    <title>Loan Calculator Servlet</title>
    <para>
      The servlet extracts the form parameters, uses the business logic hosted by the
      session bean and transfers control to a JSP for generating the response page. As with the
      client application, the loan calculator servlet obtains a reference to the home interface
      through JNDI and creates a session bean through it:
<programlisting>
<xi:include parse="text" href="../../../../../source/LoanCalculator/src/servlet/LoanCalculatorServlet.java" />
</programlisting>  
    </para>
  </section>
  
  <section>
    <title>The Generic Web Deployment Descriptor: web.xml</title>
    <para>
      In the generic <literal>web.xml</literal> deployment descriptor we
      map, as usual, the servlet onto a URL which will be dynamically 
      generated by the servlet.
<programlisting>
<xi:include parse="text" href="../../../../../source/LoanCalculator/WEB-INF/web.xml" />
</programlisting>  
    </para>
    <note><para>
      The <literal>web.xml</literal> file contains an ejb-reference
      with the home and remote interfaces specifications. We also 
      specify the default (welcome) file when the servlet context is 
      loaded.
    </para></note>
  </section>
  
  <section>
    <title>The JBoss-Specific Web Deployment Descriptor: jboss-web.xml</title>
    <para>
      The JBoss-specific web deployment descriptor,  
      <literal>jboss-web.xml</literal> provides the JNDI mapping for the enterprise
      bean accessed by the servlet:
<programlisting>
<xi:include parse="text" href="../../../../../source/LoanCalculator/WEB-INF/jboss-web.xml" />
</programlisting>  
    </para>
  </section>
  
  <section>
    <title>Creating a Web Archive</title>
    <para>
      The web archive (WAR file) is a standard jar file which contains the servlet(s),
      JSPs, HTML files and web deployment descriptors in a directory hierarchy 
      satisfying the servlet specification: 
      <itemizedlist>
        <listitem>
          <para>
            The HTML and JSP resources are put relative to the archive's root 
            directory in the URL directory structure. 
          </para>
        </listitem>
        <listitem>
          <para>
            The <literal>web.xml</literal> and  
            <literal>web-jboss.xml</literal> deployment descriptors are 
            inserted into a <literal>WEB-INF</literal> sub-directory. 
          </para>
        </listitem>
        <listitem>
          <para>
            The servlet class (and its support classes) are located in a  
            <literal>classes</literal> sub-directory of the  <literal>WEB-INF</literal> 
            directory.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Our generic targets file, <literal>targets.xml</literal> contains
      targets for compiling the servlet:
<programlisting><![CDATA[
<target name="compileServlet" depends="compileCommon">
<echo message="Compiling servlet classes ... ${srcDirServlet}"/>
<javac srcdir="${srcDirServlet}"
      destdir="${buildDirServlet}/WEB-INF/classes"
      deprecation="${compile.deprecation}"
      optimize="${compile.optimize}"
      debug="${compile.debug}"
      includes="**/*.java">
      <classpath path="${classpath}">
        <path refid="jboss.jars"/>
        <path refid="servlet.jar"/>
        <path location="${buildDirCommon}"/>
        <path location="${buildDirServlet}"/>
      </classpath>
</javac>
</target>
]]></programlisting>
      and for generating the web archive:
 <programlisting><![CDATA[
<target name="createWar" depends="compileServlet">
<echo message="Creating web archive ..."/>
<delete file="${distDir}/${web-jar}"/>
<jar jarfile="${distDir}/${web-jar}">
 <fileset dir="${buildDirServlet}" includes="**/*.class"/>
 <fileset dir="${basedir}" includes="WEB-INF/**"/>
 <fileset dir="${srcDirServletWeb}" includes="**"/>
</jar>
</target>
]]></programlisting>
    </para>
  </section>
  
  <section>
    <title>Creating an Enterprise Application Archive</title>
    <para>
      The jar file for the enterprise bean and the web components are packaged 
      within a further, single jar file, a enterprise application archive (EAR) file. 
      For the application one defines a further deployment descriptor, the 
      application deployment descriptor saved in the<literal>META-INF</literal> 
      directory as a  <literal>application.xml</literal> file. It specifies the war 
      and the EJB jar:
<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<application>
<display-name>LoanCalculator</display-name>
<module>
 <web>
   <web-uri>LoanCalculator.war</web-uri>
   <context-root>/LoanCalculator</context-root>
 </web>
</module>
<module>
 <ejb>LoanCalculator.jar</ejb>
</module>
</application>
]]></programlisting>
    </para>
  </section>
  
  <section>
    <title>Running the Web Client</title>
    <para>
      By default the JBoss distribution runs Tomcat as web server on port 8080. 
      To launch the web client use the following URL
<programlisting><![CDATA[
http://localhost:8080/LoanCalculator
]]></programlisting>
      Instead of  <literal>localhost</literal> the name of the machine which 
      hosts the application server can be specified.
    </para>
    <figure id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.examples.loanCalculator.loanCalculatorServletInput_jpg">
      <title>The client application screen.</title>
      <graphic fileref="loanCalculatorServletInput.jpg"/>
    </figure>
    <para>
      <xref linkend="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.examples.loanCalculator.loanCalculatorServletInput_jpg"/>
      shows th input form for the servlet while
      <xref linkend="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.examples.loanCalculator.loanCalculatorServletOutput_jpg"/>
      shows the resultant output.
    </para>
    <figure id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.examples.loanCalculator.loanCalculatorServletOutput_jpg">
      <title>The client application screen.</title>
      <graphic fileref="loanCalculatorServletOutput.jpg"/>
    </figure>
  </section>
</section>
