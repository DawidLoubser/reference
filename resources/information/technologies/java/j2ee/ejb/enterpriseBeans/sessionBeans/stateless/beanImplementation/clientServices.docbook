<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"--><ns2061:section xmlns:ns2061="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.beanImplementation.clientServices">

  <ns2062:title xmlns:ns2062="http://docbook.org/ns/docbook">Client (business) services </ns2062:title>
  <ns2063:para xmlns:ns2063="http://docbook.org/ns/docbook">
    In addition to these methods,our bean implementation must, of course, provide
    implementations for the business methods. In our case there is only a single
    <ns2064:literal xmlns:ns2064="http://docbook.org/ns/docbook">count</ns2064:literal> method which receives the client name and the text whose words should
    be counted. 
  </ns2063:para>
  
  <ns2065:section xmlns:ns2065="http://docbook.org/ns/docbook">
    <ns2066:title xmlns:ns2066="http://docbook.org/ns/docbook">Bean Class Does Not Implement Its Remote Interface</ns2066:title>
    <ns2067:para xmlns:ns2067="http://docbook.org/ns/docbook">
      Even though the client services are specified in the remote interface and even though the
      bean implementation class must implement these, the bean class should NOT implement 
      its remote interface.
    </ns2067:para>
    <ns2068:para xmlns:ns2068="http://docbook.org/ns/docbook">
      Why is this? Recall that the remote interface was what clients interfaced with. Recall
      also that the client should never access the bean directly, only indirectly via the EJB
      object. It is the EJB object which implements the bean's remote interface (the EJB object is
      automatically generated by the container when the bean is inserted into it).
    </ns2068:para>
    
    <ns2069:para xmlns:ns2069="http://docbook.org/ns/docbook">
      What would be the problem if the enterprise bean class implemented the remote interface?
      First have another look at 
      <ns2070:xref xmlns:ns2070="http://docbook.org/ns/docbook" linkend="resources.information.concepts.architecture.referenceArchitectures.j2ee.enterpriseBeans.howBeansCollaborate.howDoBeanElementsCollaborate_fig"/>.
      Now consider the following points: 
      <ns2071:itemizedlist xmlns:ns2071="http://docbook.org/ns/docbook">
        <ns2072:listitem xmlns:ns2072="http://docbook.org/ns/docbook"><ns2073:formalpara xmlns:ns2073="http://docbook.org/ns/docbook">
          <ns2074:title xmlns:ns2074="http://docbook.org/ns/docbook">The bean is NOT and EJBObject.</ns2074:title>
          <ns2075:para xmlns:ns2075="http://docbook.org/ns/docbook">
            Since the remote interface extends <ns2076:literal xmlns:ns2076="http://docbook.org/ns/docbook">EJBObject</ns2076:literal> provided by your EJB Container 
            in the <ns2077:literal xmlns:ns2077="http://docbook.org/ns/docbook">javax.ejb</ns2077:literal> package, you would claim that the bean itself is the EJB object
            (and would have to add the appropriate methods). This is of course false. It would enable you
            to give clients direct access to your bean implementation bypassing the container's
            interception point and hence taking away the whole purpose of EJBs (the container can't
            perform transaction, security and concurrency control services, load balancing or anything
            else for that matter).
          </ns2075:para>
        </ns2073:formalpara></ns2072:listitem>
        <ns2078:listitem xmlns:ns2078="http://docbook.org/ns/docbook"><ns2079:formalpara xmlns:ns2079="http://docbook.org/ns/docbook">
          <ns2080:title xmlns:ns2080="http://docbook.org/ns/docbook">The bean may not be a network server.</ns2080:title>
          <ns2081:para xmlns:ns2081="http://docbook.org/ns/docbook">
             Recall that this was one of the restrictions of enterprise beans. Note that if your bean class 
             implemented its remote interface it would also implement <ns2082:literal xmlns:ns2082="http://docbook.org/ns/docbook">java.rmi.Remote</ns2082:literal> 
             which would be in direct conflict with the requirement that the bean may not accept network 
             connections.        
          </ns2081:para>
        </ns2079:formalpara></ns2078:listitem>
      </ns2071:itemizedlist>
    </ns2069:para>
    
    <ns2083:para xmlns:ns2083="http://docbook.org/ns/docbook">
      <ns2084:xref xmlns:ns2084="http://docbook.org/ns/docbook" linkend="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.beanImplementation.classHierarchy_fig"/>
      shows a clean design where the bean implementation class and the remote interface
      implement/extend a common super interface which we named
      <ns2085:literal xmlns:ns2085="http://docbook.org/ns/docbook">LoanCalculatorServices</ns2085:literal>. 
    </ns2083:para>
    
    <ns2086:figure xmlns:ns2086="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.beanImplementation.classHierarchy_fig">
      <ns2087:title xmlns:ns2087="http://docbook.org/ns/docbook">Class hierarchy of a typical session bean</ns2087:title>
      <mediaobject xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook"><imageobject><imagedata fileref="classHierarchy.jpg"/></imageobject></mediaobject>
    </ns2086:figure>
    
  </ns2065:section>
</ns2061:section>