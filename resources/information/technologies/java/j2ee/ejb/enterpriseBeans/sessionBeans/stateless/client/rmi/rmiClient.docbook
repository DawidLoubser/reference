<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns2102:section xmlns:ns2102="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2ee.ejb.enterpriseBeans.sessionBeans.stateless.client.rmi.rmiClient">

  <ns2103:title xmlns:ns2103="http://docbook.org/ns/docbook">Developing client applications</ns2103:title>
  
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" href="../introParagraph.docbook"/>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" href="../../../../../client/clientTypes.docbook"/>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" href="../../../../../client/rmiClients.docbook"/>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" href="../../examples/loanCalculator/client.docbook"/>

  <ns2104:section xmlns:ns2104="http://docbook.org/ns/docbook">
    <ns2105:title xmlns:ns2105="http://docbook.org/ns/docbook">Types of Clients</ns2105:title>
    <ns2106:para xmlns:ns2106="http://docbook.org/ns/docbook">
      EJB supports three basic types of enterprise bean clients: RMI clients are typically
      remote clients (though local clients and even local enterprise beans may also use RMI) which
      obtain a reference (typically via JNDI) and access the bean via RMI/IIOP. CORBA clients which
      look up the bean's home interface from a CORBA naming service (COS Naming) and request the
      bean's services via the remote interface using CORBA's Internet Inter-ORB protocol (IIOP).
      They may use CORBA's Object Transaction Service (OTS) to control transactions. Web and SOAP
      clients which use enterprise beans through servlets. Local Clients access the bean through the
      local home and local interfaces using standard local calls.
    </ns2106:para>
    <ns2107:para xmlns:ns2107="http://docbook.org/ns/docbook"/>
  </ns2104:section>
  <ns2108:section xmlns:ns2108="http://docbook.org/ns/docbook">
    <ns2109:title xmlns:ns2109="http://docbook.org/ns/docbook">Writing a RMI Client</ns2109:title>
    <ns2110:para xmlns:ns2110="http://docbook.org/ns/docbook">We write a client application which may be run either as a stand-alone application or as
      an applet. This is achieved by developing it as an applet, and adding a
      <ns2111:literal xmlns:ns2111="http://docbook.org/ns/docbook">main()</ns2111:literal> function which will be called only when run as a stand-alone
      application. In <ns2112:literal xmlns:ns2112="http://docbook.org/ns/docbook">main()</ns2112:literal> we create a frame window and insert the applet into
      it. Note that we call the applet's <ns2113:literal xmlns:ns2113="http://docbook.org/ns/docbook">destroy()</ns2113:literal> method when the application is
      shut down.</ns2110:para>
    <ns2114:para xmlns:ns2114="http://docbook.org/ns/docbook">The client application makes use of Java's naming and directory service,
      <ns2115:literal xmlns:ns2115="http://docbook.org/ns/docbook">InitialContext</ns2115:literal> supplied by your application server vendor in the
      <ns2116:literal xmlns:ns2116="http://docbook.org/ns/docbook">javax.naming</ns2116:literal> package. <ns2117:literal xmlns:ns2117="http://docbook.org/ns/docbook">InitialContext</ns2117:literal> is used to look up
      the home interface of our stateless session bean.</ns2114:para>
    <ns2118:para xmlns:ns2118="http://docbook.org/ns/docbook">Under the hood any implementation of the JNDI may be used. This may be a Java RMI
      registry, a CORBA naming service or LDAP. We then narrow the reference down to a reference to
      <ns2119:literal xmlns:ns2119="http://docbook.org/ns/docbook">LoanCalculatorHome</ns2119:literal> and create a <ns2120:literal xmlns:ns2120="http://docbook.org/ns/docbook">LoanCalculator</ns2120:literal> via the
      home interface's <ns2121:literal xmlns:ns2121="http://docbook.org/ns/docbook">create()</ns2121:literal> method.</ns2118:para>
    <ns2122:para xmlns:ns2122="http://docbook.org/ns/docbook">Once the reference to the stateless session bean has been established, the rest of the
      client application is no different to one which would use a local loan calculator object
      except that the client must handle potential <ns2123:literal xmlns:ns2123="http://docbook.org/ns/docbook">java.rmi.RemoteException</ns2123:literal>.</ns2122:para>
    <ns2124:para xmlns:ns2124="http://docbook.org/ns/docbook">When the session bean is no longer required by theclient, it should be removed. This is
      done in the Applet's <ns2125:literal xmlns:ns2125="http://docbook.org/ns/docbook">destroy()</ns2125:literal> method.</ns2124:para>
    <ns2126:para xmlns:ns2126="http://docbook.org/ns/docbook"/>
    <ns2127:section xmlns:ns2127="http://docbook.org/ns/docbook">
      <ns2128:title xmlns:ns2128="http://docbook.org/ns/docbook">Obtaining the JNDI Initial Context</ns2128:title>
      <ns2129:para xmlns:ns2129="http://docbook.org/ns/docbook">The JNDI initial context is obtained as usual via</ns2129:para>
      <ns2130:para xmlns:ns2130="http://docbook.org/ns/docbook"/>
Context context = new InitialContext();
<ns2131:para xmlns:ns2131="http://docbook.org/ns/docbook">with the JNDI naming context
        properties are obtained from a <ns2132:literal xmlns:ns2132="http://docbook.org/ns/docbook">jndi.properties</ns2132:literal> file found in the class-path:</ns2131:para>

      <ns2133:para xmlns:ns2133="http://docbook.org/ns/docbook"/>
java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
java.naming.provider.url=jnp://localhost:1099
java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces
jnp.socketFactory=org.jnp.interfaces.TimedSocketFactory
#Connection timeout (0 == blocking)
jnp.timeout=0
#Read timeout (0 == blocking)
jnp.sotimeout=0


<ns2134:para xmlns:ns2134="http://docbook.org/ns/docbook">
        or by setting the JNDI properties within the application:</ns2134:para>
      <ns2135:para xmlns:ns2135="http://docbook.org/ns/docbook"/>
Hastable properties = new Hashtable();
properties.put(Context.INITIAL-CONTEXT-FACTORY,
              "org.jnp.interfaces.NamingContextFactory");
properties.put(Context.PROVIDER-URL, "localhost:1099");
properties.put("java.naming.rmi.security.manager", "yes");
properties.put(Context.URL-PKG-PREFIXES, "org.jboss.naming");

Context context = new InitialContext(properties);
<ns2136:para xmlns:ns2136="http://docbook.org/ns/docbook"/>
    </ns2127:section>
    <ns2137:section xmlns:ns2137="http://docbook.org/ns/docbook">
      <ns2138:title xmlns:ns2138="http://docbook.org/ns/docbook">Code Listing: LoanCalculatorClient</ns2138:title>
      <ns2139:para xmlns:ns2139="http://docbook.org/ns/docbook">We encapsulate the client in a panel which can be inserted into either a frame window or
        an applet. The panel class is shown below:</ns2139:para>

      <ns2140:para xmlns:ns2140="http://docbook.org/ns/docbook"/>
package za.co.SolmsTraining.finance.calculators;

import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;

import java.awt.*;
import java.text.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;

public class LoanCalculatorPanel extends JPanel
{
 public LoanCalculatorPanel() {init();}

 public void init()
 {
   try
   {
     connect();

     JPanel fieldsPanel = new JPanel();
     fieldsPanel.setLayout
       (new GridLayout(4,3));

     fieldsPanel.add(new JLabel("Loan amount: "));
     fieldsPanel.add(loanAmountField);
     fieldsPanel.add(calcLoanAmountButton);
     fieldsPanel.add(new JLabel("Monthly installment: "));
     fieldsPanel.add(installmentField);
     fieldsPanel.add(calcInstallmentButton);
     fieldsPanel.add(new JLabel("Loan period in months: "));
     fieldsPanel.add(loanPeriodField);
     fieldsPanel.add(calcLoanPeriodButton);
     fieldsPanel.add(new JLabel("Interest Rate (%): "));
     fieldsPanel.add(interestRateField);

     JPanel mainPanel = new JPanel();
     mainPanel.add(fieldsPanel);

     add(mainPanel);

     calcLoanAmountButton.addActionListener
           (new ActionListener()
       {
         public void actionPerformed(ActionEvent event)

         {
           double installment  = getDouble(installmentField);
           int loanPeriod   = getInt(loanPeriodField);
           double interestRate = getDouble(interestRateField)/100;

           try
           {
             double loanAmount = loanCalculator.calcLoanAmount
               (installment, interestRate, loanPeriod);

             loanAmountField.setText
               (amountFormatter.format(loanAmount));
           }
           catch (Exception e)
           {
             JOptionPane.showMessageDialog
               (LoanCalculatorPanel.this,
                e.toString(), e.getMessage(),
                JOptionPane.ERROR-MESSAGE);
           }
         }
       });

       calcInstallmentButton.addActionListener
           (new ActionListener()
       {
         public void actionPerformed(ActionEvent event)
         {
           double loanAmount   = getDouble(loanAmountField);
           int    loanPeriod   = getInt(loanPeriodField);
           double interestRate = getDouble(interestRateField)/100;

           try
           {
             double installment = loanCalculator.calcMonthlyInstallment
               (loanAmount, interestRate, loanPeriod);

             installmentField.setText
               (amountFormatter.format(installment));
           }
           catch (Exception e)
           {
             JOptionPane.showMessageDialog
               (LoanCalculatorPanel.this,
                e.toString(), e.getMessage(),
                JOptionPane.ERROR-MESSAGE);
           }
         }
       });


     calcLoanPeriodButton.addActionListener
           (new ActionListener()
       {
         public void actionPerformed(ActionEvent event)
         {
           double loanAmount   = getDouble(loanAmountField);
           double installment  = getDouble(installmentField);
           double interestRate = getDouble(interestRateField)/100;

           try
           {
             int loanPeriod = loanCalculator.calcLoanPeriodInMonths
               (loanAmount, installment, interestRate);

             loanPeriodField.setText(Integer.toString(loanPeriod));
           }
           catch (Exception e)
           {
             JOptionPane.showMessageDialog
               (LoanCalculatorPanel.this,
                e.toString(), e.getMessage(),
                JOptionPane.ERROR-MESSAGE);
           }
         }
       });
   }
   catch (Exception e)
   {
     JOptionPane.showMessageDialog(LoanCalculatorPanel.this,
                   e.getMessage(),
                   "Could not connect to session bean.",
                   JOptionPane.ERROR-MESSAGE);
     e.printStackTrace();
     System.exit(0);
   }
 }

 public double getDouble(JTextField textField)
 {
   try
   {
     return amountFormatter.parse
       (textField.getText(),
        new ParsePosition(0)).doubleValue();
   }
   catch (NumberFormatException e)
   {
     JOptionPane.showMessageDialog

       (this, e.getMessage(), "Invalid input.",
        JOptionPane.ERROR-MESSAGE);
     return 0;
   }
 }

 public int getInt(JTextField textField)
 {
   try
   {
     return Integer.parseInt(textField.getText());
   }
   catch (NumberFormatException e)
   {
     JOptionPane.showMessageDialog
       (this, e.getMessage(), "Invalid input.",
        JOptionPane.ERROR-MESSAGE);
     return 0;
   }
 }

 public void connect()
 {
   try
   {
     InitialContext jndiContext = new InitialContext();

     System.out.println("Now looking up session bean " + jndiName + " ...");

     Object beanHomeRef
       = jndiContext.lookup(jndiName);

     System.out.println("got it");

     LoanCalculatorHome home =
       (LoanCalculatorHome)PortableRemoteObject.narrow
         (beanHomeRef, LoanCalculatorHome.class);

     loanCalculator = home.create();
   }
   catch (Exception e)
   {
     JOptionPane.showMessageDialog(LoanCalculatorPanel.this,
                   e.getMessage(),
                   "Could not connect to session bean.",
                   JOptionPane.ERROR-MESSAGE);
     e.printStackTrace();
     System.exit(0);
   }

 }

 public void destroy()
 {
   try
   {
     loanCalculator.remove();
     System.out.println("Removed session bean.");
   }
   catch (javax.ejb.RemoveException e)
   {
     System.out.println("Could not remove session bean.");
   }
   catch (java.rmi.RemoteException e)
   {
     System.out.println("Could not remove session bean.");
   }
 }

 private LoanCalculator loanCalculator;

 private JTextField loanAmountField = new JTextField(10);
 private JTextField installmentField = new JTextField(10);
 private JTextField interestRateField = new JTextField(10);
 private JTextField loanPeriodField = new JTextField(3);

 private JButton calcLoanAmountButton
   = new JButton("calculate");
 private JButton calcInstallmentButton
   = new JButton("calculate");
 private JButton calcLoanPeriodButton
   = new JButton("calculate");

 private DecimalFormat amountFormatter
   = new DecimalFormat("###,###,###,##0.00");

 private static final String jndiName = "ejb/LoanCalculator";
}

<ns2141:para xmlns:ns2141="http://docbook.org/ns/docbook">
        The client application supplied a <ns2142:literal xmlns:ns2142="http://docbook.org/ns/docbook">main</ns2142:literal> which craetes a frame window for
        the panel and pops it up onto the desktop:</ns2141:para>
      <ns2143:para xmlns:ns2143="http://docbook.org/ns/docbook"/>
package za.co.SolmsTraining.finance.calculators;

import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;

import java.awt.*;
import java.text.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;

public class LoanCalculatorClient extends JFrame
{
 public LoanCalculatorClient()
 {
   setTitle("Solms Training Loan Calculator");

   calculatorPanel = new LoanCalculatorPanel();

   getContentPane().add(calculatorPanel);

   addWindowListener(new WindowAdapter()
     {
       public void windowClosing(WindowEvent event)
       {
         calculatorPanel.destroy();
         System.exit(0);
       }
     });

   pack();
 }

 public static void main(String[] args)
 {
   new LoanCalculatorClient().show();
 }

 private LoanCalculatorPanel calculatorPanel;
}

<ns2144:para xmlns:ns2144="http://docbook.org/ns/docbook"/>
    </ns2137:section>
    <ns2145:section xmlns:ns2145="http://docbook.org/ns/docbook">
      <ns2146:title xmlns:ns2146="http://docbook.org/ns/docbook">Code Listing: Applet Client</ns2146:title>
      <ns2147:para xmlns:ns2147="http://docbook.org/ns/docbook">The HTML file hosting the applet contains an applet tag:</ns2147:para>

      <ns2148:para xmlns:ns2148="http://docbook.org/ns/docbook"/>
&lt;html&gt;
 &lt;head&gt;
   &lt;title&gt;Hello World Applet&lt;/title&gt;
 &lt;/head&gt;

 &lt;body&gt;
 &lt;center&gt;&lt;h2&gt;Hello World Applet&lt;/h2&gt;&lt;/center&gt;

 &lt;hr&gt;

 &lt;applet codebase="." code=ClickCounter.class width=170 height=80&gt;
      alt="Your browser understands the &amp;amp;lt;APPLET&amp;amp;gt; tag but isn't running the applet, for some reason."
       Your browser is completely ignoring the &amp;amp;lt;APPLET&amp;amp;gt; tag!
 &lt;/applet&gt;

 &lt;hr&gt;
 &lt;/body&gt;
&lt;/html&gt;
<ns2149:para xmlns:ns2149="http://docbook.org/ns/docbook">The
        applet instantiates the loan calculator panel and inserts it into its content pane:</ns2149:para>
      <ns2150:para xmlns:ns2150="http://docbook.org/ns/docbook"/>
package za.co.SolmsTraining.finance.calculators;

import javax.swing.*;

public class LoanCalculatorClientApplet extends JApplet
{
 public void init()
 {
   calculatorPanel = new LoanCalculatorPanel();
   getContentPane().add(calculatorPanel);
 }

 public void destroy()
 {
   calculatorPanel.destroy();
 }

 private LoanCalculatorPanel calculatorPanel;
}

<ns2151:para xmlns:ns2151="http://docbook.org/ns/docbook"/>
    </ns2145:section>
  </ns2108:section>
</ns2102:section>