<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"-->

<section id="resources.information.technologies.java.j2ee.jms.message.types"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Message Types</title>
  <para>
    The JMS specification supports the following 5 messages types:
    <itemizedlist>
      <listitem><formalpara>
        <title>BytesMessage</title>
        <para>
          This is the most primitive message which can contain, in principal, anything.
          However, publishers and message consumers must agree on some data format/protocol for
          this to be useful. Bytes messages offer services similar to that obtained when combining
          byte input/output streams with data input/output streams, 
          <abbrev>i.e.</abbrev> one can read or write  bytes, arrays of bytes or primitives.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>TextMessage</title>
        <para>
          Text messages are text-string based messages offering
          <literal>setText()</literal> and  <literal>getText()</literal> services.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>StreamMessage</title>
        <para>
          is used to transmit a sequence of primitive datatypes (similar to a record containing 
          primitive fields). The primitive data types may correspond to the column types of 
          database table or to a file structure. It supplies an interface which is very similar to 
          the combination of a  <literal>DataInputStream</literal> and a  
         <literal>DataOutputStream</literal> offering services like  <literal>readDouble()</literal> 
         and <literal>writeInt(value)</literal>.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>ObjectMessage</title>
        <para>
          An object message is used to send serialized Java
          objects. An <literal>ObjectMessage</literal> offers the services  
         <literal>getObject()</literal> and <literal>setObject(Object o)</literal>.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>MapMessage</title>
        <para>
          Map messages enable publishers to send a map of key-value pairs with the 
          keys restricted to strings, but the values may be strings, primitives or objects. 
          Map messages supply set services like <literal>setInt(name, value)</literal> or
          <literal>setObject(name, obj)</literal> and query services like 
          <literal>getObject(name)</literal>.
        </para>
      </formalpara></listitem>
    </itemizedlist>
  </para>    
</section>
