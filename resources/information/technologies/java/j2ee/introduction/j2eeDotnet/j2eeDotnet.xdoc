<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2ee.introduction.j2eeDotnet.j2eeDotnet"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title role="J2EE vs .Net">J2EE vs Microsoft.Net </title>
  <para>
    J2EE and Microsoft.Net are currently the two dominant reference architectures used for 
    enterprise systems. They have many commonalities, but there are also a number of 
    distinct differences between them.
  </para>  
  <section>
    <title>Commonalities between J2EE and Microsoft.Net</title>
    <para>
      <itemizedlist>
        <listitem><para>
          Both provide a natural 3-tierd architecture with the presentation layer being
          cleanly seperated from the business logic layer and the back-end layer. 
        </para></listitem>
        <listitem><para>
          Both provide convenient mechanisms for processing HTTP service requests, the former
          through Java Server Pages and Servlets, the latter via ASP.Net. 
        </para></listitem>
        <listitem>
          <para>Both provide a container for business logic components. </para>
        </listitem>
        <listitem><para>
          Service requests are intercepted in order to apply enterprise services like
          concurrency, transactions and security. 
        </para></listitem>
        <listitem><para>
          Both, J2EE and .Net, support processing of asynchronous service requests
          from message queues. J2EE also supports topics.
        </para></listitem>
        <listitem><para>
          Both, J2EE and .Net support session management and security context propagation.
        </para></listitem>
        <listitem><para>
          Both provide integration technologies for integrating with the backend, though J2EE
          is a lot more capable in integrating with non-Microsoft and non-Java technologies.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section>
    <title>Differences between J2EE and Microsoft.Net</title>
    <para>
      There are, however, some significant differences between these two reference
      architectures including
      <itemizedlist>
        <listitem><para>
            J2EE is primarily a specification, while .Net is a vendor-specific implementation
            packaging together a range of vendor tools.
            There are well over 50 J2EE application server vendors including BEA, IBM, Sun,
            Netscape, Macromedia, Oracle, SAP, Sybase, and many others. There are even
            production-standard open-source implementations like JBoss. 
        </para></listitem>
        <listitem><para>
            .Net locks users into the Microsoft platform though .Net clients can make use of
            J2EE servers and vice versa (typically via SOAP). 
        </para></listitem>
        <listitem><para>
          Both, .Net and J2EE have good support for XML and Web services though many recent 
          studies point to the J2EE support being more standards oriented, more efficient and
          more stable.
        </para></listitem>
        <listitem><para>
          .Net supplies language independence. Business logic components can be implemented in
          any of the Microsoft programming languages with a preference towards C# which is in its
          core a Java clone. In J2EE clients can be developed in any language, but business logic
          components hosted by an EJB application server must be developed in Java. 
        </para></listitem>
        <listitem><para>
          .Net uses DCOM/COM+ for its low-level integration while J2EE uses RMI/IIOP and hence
          effecively CORBA as its low-level integration technology. The former provides excellent
          integration with Microsoft products while the latter is a non-proprietary and platform
          neutral integration technology. Bridging tools are available but they increase system
          complexity and decrease performance. 
        </para></listitem>
        <listitem><para>
          .Net does not support automatic persistence management, <abbrev>i.e.</abbrev>
          and equivalent of stateful session beans and entity beans.
          This is probably due to the lack of persistent object references (and persitent state)
          in the quasi-object-oriented middleware protocol DCOM/COM+. 
          CORBA and RMI, on the other hand, do support persitent references and state. 
        </para></listitem>
        <listitem><para>
          J2EE is a proven and mature architecture with many solid enterprise implementations
          running. .Net still has to prove itself. 
        </para></listitem>
        <listitem><para>
          .Net, being a product, provides a standard range of client side development
          tools. This is typically outside the scope of J2EE, though different J2EE vendors
          provide a wide range of different tools for this purpose.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>  
</section>

