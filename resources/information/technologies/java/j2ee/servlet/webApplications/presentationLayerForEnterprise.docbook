<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Presentation Layer for the Enterprise</title>
    <para>
        A Web module typically acts as the <emphasis>view</emphasis> for an enterprise application. However,
        internally, they are again segregated according to model, view and controller roles (an example
        of the Model-View-Controller pattern at multiple levels of granularity).
    </para>
    <figure>
        
        <title>Web Applications both contain, and are, views</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./iterativeMVC.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>
    <para>
        Before implementing a web module, it needs to be clear which component(s) will perform the role of workflow
        controller for the use-cases. In other words, <emphasis>who owns the business process / offers the
        business services</emphasis>? The services are typically offered by any of the following:
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>EJB Session Beans</title>
            <para>The standard Java EE business logic components, with many qualities such
            as high scalability, reliability, seamless security propagation and 
            loose-coupling. The EJBs may either run
            in the same Java EE server, or (with correct configuration) at a remote location
            accessed via RMI/CORBA.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Local Java Beans</title>
            <para>For very simple applications, the business logic may be provided by
            plain Java objects which are packaged with the web application. The web application takes full control
            of the life cycle of these objects, and this approach would not scale as well,
            nor be as accessible, as an EJB-based approach.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Remote Web Services</title>
            <para>
              Business services may be offered by web services, either implemented in
              a fundamentally different component technology (such as .NET), or as
              part of a services-oriented architecture (such as with WS-BPEL). The Java
              EE frameworks for accessing web services (JAX-WS) makes it trivial
              to use web services in a natural, Java-based paradigm.
            </para>
          </formalpara>
        </listitem>
      </itemizedlist>
    </para>
</section>