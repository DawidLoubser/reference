<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction to Web Archives</title>
    <para>
        <literal>WAR</literal> (Web Archives) specify a standard format
        for distributing and deploying Java EE Web modules. Such a module
        can be deployed into any conforming Java EE web container.
    </para>
    <para>
        Web Applications can reside on the server either in compressed WAR format, or as an open directory
        structure. A WAR is simply a JARred (Zipped) version of the web module directory structure,
        which simplifies distribution. It can be created and read using standard <literal>jar</literal> tools.
    </para>
    <para>
        A WAR contains:
        <itemizedlist>
            <listitem>
                <para>Dynamic components (as per the Servlets API) which process, filter,
                  display, and react to requests. i.e. your Servlets, Filters and JSP documents</para>
            </listitem>
            <listitem>
                <para>Additional (utility) Java classes that model your application's domain, (e.g. Bank Accounts for a banking system,
                    Products for an e-commerce site) or ones which simply connect to domain or business objects elsewhere (such as EJB).</para>
            </listitem>
            <listitem>
                <para>Any third-party libraries (JARs) required, such as display utilities,
                  custom tags, special XML parsers, etc.</para>
            </listitem>
            <listitem>
                <para>Static content: XHTML Pages, images or other files, as per a traditional static website.</para>
            </listitem>
            <listitem>
                <para>An XML configuration file (the <emphasis>Deployment Descriptor</emphasis>, <literal>web.xml</literal>)</para>
            </listitem>
        </itemizedlist>
    </para>
  
  <section>
    <title>Multiple web modules and Contexts</title>
    <para>
      A web container (listening for HTTP connections on a single address) can host 
      multiple web modules. Each web module is deployed to a <emphasis>context root</emphasis>
      (the part of the URL directly following the host name) which is unique within the
      given web container.
    </para>
    <para>
      Through this simple mechanism, the web container knows which incoming requests are 
      to be routed to which web module.
    </para>
    <figure>
      <title>Multiple web modules running in their own contexts</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="webModulesContext.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  
</section>