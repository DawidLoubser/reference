<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Introduction</title>
    
    <para>
        Following the success of <quote>static content</quote> websites in the early-to-mid 1990's, several
        technologies became available the enable the dynamic generation of content. Initial mechanisms
        (such CGI) were complex, cumbersome and comparatively poor performers. Page-based technologies, like
        PHP, Active Server Pages (ASP) and the original version of Java Server ages (JSP) made it easy to retain the
        loose, hyperlink-driven model that has been so crucial to the success of the web.
    </para>
    <para>
      Unfortunately, the power that such page-driven technologies placed in the hands of
      web designers (often not versed in the methods of object-oriented design) 
      meant that large dynamic web sites grew out of control, requiring an army
      of <quote>hackers</quote> to maintain it. 
    </para>
    
    <para>
        Such web applications (constructed purely from scripted pages) usually suffer from poor responsibility
        allocation and excessive complexity, not to mention the inability to integrate with other
        systems in a controlled manner.
        Typical reasons for this unnecessary complexity are:
        <itemizedlist>
          <listitem>
            <para>No clear vision on the functionality (use cases) of the system</para>
          </listitem>
            <listitem>
                <para>A lack of business process design</para>
            </listitem>
            <listitem>
                <para>A purely page-based model is not a platform which lends itself to mapping
                a potentially complex, object-oriented design to</para>
            </listitem>
            <listitem>
                <para>
                    No separation of the implementation of use-cases (the business logic, or <emphasis>model</emphasis>, 
                  layer), from the views which expose these use-cases to users.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    
    <para>
        A web application should be designed with exactly the same concerns as any other
        application - though this is often not the case. It is beneficial to
        view the web presentation layer as simply being a user interface (or, put in
        another way, an <emphasis>adapter</emphasis> for the sake of humans) to an existing,
        contracts-driven services layer. This will allow one to retain the possibility of interfacing
        with the business services through other access channels (SOAP-based web services, CORBA, RMI,
        JMS messaging services, etc).  
    </para>
  <para>
    Because of the unique (unidirectional, connectionless) nature of the HTTP protocol,
    implementing a web presentation layer poses unique challenges over other more
    conventional user interface / integration technologies.
  </para>
    
    
    <xi:include href="whatis.docbook"/>

</section>