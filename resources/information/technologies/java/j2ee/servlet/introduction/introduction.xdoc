<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0b5/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    <title>Introduction</title>

    <para>
        After the entrenchment of
        <quote>static content</quote>
        websites in the early-to-mid 1990's, several
        technologies became available the enable the dynamic generation of content. Page-based technologies, like
        Active Server Pages (ASP) and the original version of Java Server ages (JSP) made it easy to retain the
        loose, hyperlink-driven model that has been so crucial to the success of the web.
    </para>

    <para>
        The complexity of the appropriately called
        <emphasis>dynamic web sites</emphasis>
        increased geometrically, as
        more and more devices and formats needed to be supported. Systems need to evolve as business requirements
        do, and the continual application of a
        <quote>patch-and-kludge</quote>
        cycle of system updates to intricately
        strung-together sets of dynamic web pages took its toll on the typical development project of the early 2000's.
        Typical reasons for this unnecessary complexity are:
        <itemizedlist>
            <listitem>
                <para>Lack of proper design</para>
            </listitem>
            <listitem>
                <para>Deployment to an architecture that does not support good object-oriented design and separation of
                    concerns (a set of loosely-coupled
                    <quote>pages</quote>
                    is an architecture which is
                    not suited to realising a UML-based design)
                </para>
            </listitem>
            <listitem>
                <para>No clear vision on the functionality (use cases) of the system</para>
            </listitem>
            <listitem>
                <para>
                    No separation of the implementation of use-cases (control/model layer), from the presentation
                    thereof
                    (view layer)
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        A web application should be designed with exactly the same concerns as a complex client-side application.
        The focus should be less centered on creating a<quote>web site</quote>, and more on simply
        putting a presentation layer (user interface) in place for an existing, contract-driven system.
        Implementing such an application over the connectionless HTTP protocol furthermore adds its own unique
        challenges.
    </para>

    <!-- What is the servlets API? -->
    <xi:include href="whatis.xdoc"/>

</section>
