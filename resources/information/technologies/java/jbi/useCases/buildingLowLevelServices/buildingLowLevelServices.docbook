<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Building Low-level Services</title>
    
    <indexterm>
        <primary>service</primary>
        <secondary>low-level</secondary>
        <tertiary>building with JBI</tertiary>
    </indexterm>
    
    <para>
        Instead of simply connecting external services to our ESB infrastructure, we can build implementations of
        services contracts and deploy them via the ESB to their respective service engines.
    </para>
    <para>
        This in many ways sets JBI apart from other pure integration infrastructures (such as Apache Camel), and makes it
        very convenient to centrally manage and deploy large assemblies, which contain both business logic components,
        as well as integration constructs (protocol and functional adaptors, etc). By <quote>low-level
            services</quote>, we refer to atomic services which perform some useful, isolated function, such as
        storing or retrieving information in a database, performing calculations, etc. These are services
        which do not request other services via the ESB.
    </para>
    <para>
        <itemizedlist>
            <listitem>
                <para>
                    It is essential that a WSDL contract describing the desired service first exists: Unlike certain technologies
                    (like EJB) which can generate a WSDL contract from one's programming code for convenience, it is not recommended
                    to attempt to follow the same approach in JBI. Since so many clients may build dependencies on the service contract,
                    it is best not to treat it as a temporary, generated artifact, but rather as the primary artifact from which
                    we can, in return, generate programming code.
                </para>
            </listitem>
            <listitem>
                <para>
                    Once a suitable implementation technology is chosen (preferably one that has access to all the necessary
                    support technologies, such as database persistence, etc) the service is written, tested, and then deployed
                    as a service unit that <emphasis>provides</emphasis> the service as per the service contract. In many cases,
                    the service implementation's programming language artifacts can be generated from the WSDL contract.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <figure>
        <title>Building Low-level Services</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="buildingLowLevelServices.png"/>
            </imageobject>
        </mediaobject>
    </figure>
    
    <section>
        <title>Choosing an implementation technology</title>
        <para>
            Since the service engine is fully responsible for mapping requests and responses from the Normalized message format
            to service calls in the respective programming language / technology, the developer is free to choose any implementation
            technology which is well-suited to the Job. Options available typically include
            <itemizedlist>
                <listitem>
                    <para>Java (either plain Java objects, Spring Beans, or EJBs). Certain Java EE application server implementations
                    (such as Glassfish) is particularly well-integrated with the ESB (e.g. OpenESB) to enable seamless deployment
                    of all kinds of Java EE components via the ESB. EJB is typically a sensible choice because of the
                    scalability and simple concurrency mae possible by the object and thread pooling.</para>
                </listitem>
                <listitem>
                    <para>Scripting Languages (JavaScript/ECMAScript, Python, Groovy). Some of these languages
                    offer simpler syntax, and simple yet powerful data manipulation / calculation facilities - but
                    typically much weaker support technologies - compared to a mature general-purpose programming
                    language like Java.</para>
                </listitem>
                <listitem>
                    <para>XSLT. Certain services can be performed by performing very simple self-contained calculations
                    or transformations on the input message, or by returning information stored in plain XML files. In such
                    cases, XSLT offers a simple and high-performance alternative.</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    
</section>