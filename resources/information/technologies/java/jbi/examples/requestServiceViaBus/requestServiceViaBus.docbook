<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">

        <title>Requesting an external service via the ESB</title>

        <para>
            Consider the scenario where we wish to use the ESB purely as a mechanism to
            de-couple clients (perhaps stand-alone clients deployed in our organisation)
            from an external service (a <literal>UnitConverter</literal>) which we published
            to our ESB earlier via a service provider proxy deployed to the HTTP binding component.
        </para>
        <figure>
            <title>JBI Example: Requesting an external service via the ESB</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="externalServiceRequestThroughBus.png"/>
                </imageobject>
            </mediaobject>
        </figure>
    
    <para>
        We need to
        <itemizedlist>
            <listitem>
                <para>Create a high-level Maven project (with a <literal>pom.xml</literal>) describing
                    our project</para>
            </listitem>
            <listitem>
                <para>Create a service unit (which exposes a HTTP endpoint for clients to call) which we will deploy to the <literal>servicemix-http</literal>
                    binding component. We can do so via the Maven archetype <literal>servicemix-http-consumer-service-unit</literal>.</para>
            </listitem>
            <listitem>
                <para>
                    Edit the resource which is deployed to the binding component (<literal>xbean.xml</literal>) to indicate that
                    it must expose a <emphasis>consumer</emphasis> endpoint (i.e. start a web server), and tell it which service contract (interface name) it
                    consumes. It will thus receive messages via SOAP, and place it on the ESB, which will then be routed to whichever service
                    implements the indicated interface (contract).
                </para>
            </listitem>
            <listitem>
                <para>
                    Create a <emphasis>service assembly</emphasis> module (via Maven's <literal>servicemix-service-assembly</literal> archetype) to which we
                    add, as dependencies, the above service unit.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    
    <para>
        Our Maven project structure is as follows:
        <programlisting><![CDATA[
requestServiceViaBus/
    pom.xml
    requestServiceViaBus-sa/
        pom.xml
    unitConverter-endpoint-http/
        pom.xml
        src/
            main/
                resources/
                    xbean.xml
        ]]></programlisting>
    </para>
    
    <para>
        The high-level project's POM:
        <programlisting language="XML">
            <xi:include href="src/requestServiceViaBus/pom.xml" parse="text"/>
        </programlisting>
    </para>
    
    <section>
        <title>Modules</title>
        <section>
            <title>unitConverter-endpoint-http</title>
            <para>
                The service unit's POM (generated by Maven) for our HTTP consumer (listener) is as follows:
                <programlisting language="XML">
                    <xi:include href="src/requestServiceViaBus/unitConverter-endpoint-http/pom.xml" parse="text"/>
                </programlisting>
            </para>
            <para>
                The deployed artifact, <literal>xbean.xml</literal>, indicates to the HTTP binding component that we
                wish to expose (at a specified URL) a SOAP endpoint which receives <literal>UnitConverter</literal>
                messages and places them on the ESB for routing to any service which implements that contract.
                <programlisting language="XML">
                    <xi:include href="src/requestServiceViaBus/unitConverter-endpoint-http/src/main/resources/xbean.xml" parse="text"/>
                </programlisting>
            </para>
            <note>
                <para>
                    The endpoint and service names make up the logical name <emphasis>of this consumer endpoint we are deploying</emphasis>.
                    It is purely an internal name, and bears no relation to the service/endpoint names declared in the WSDL of the external service
                </para>
            </note>
        </section>
        
        <section>
            <title>requestServiceViaBus-sa</title>
            <para>
                The service assembly simply contains a POM (generate by Maven) which we update to refer to the modules which we wish to include in this service
                assembly. This is done in the <emphasis>dependencies</emphasis> section. The <literal>pom.xml</literal>:
                <programlisting language="XML">
                    <xi:include href="src/requestServiceViaBus/requestServiceViaBus-sa/pom.xml" parse="text"/>
                </programlisting>
            </para>
        </section>
    </section>
    
    <section>
        <title>Building and Deploying</title>
        <para>
            Running <literal>mvn install</literal> on the top-level project builds al sub-components,
            and installs them in the local maven repository.
        </para>
        <para>
            The service assembly can be deployed, either by running the Maven <literal>jbi:projectDeploy</literal> goal
            in the service assembly's directory, or simply by copying the service assembly <literal>requestServiceViaBus-sa-1.0-SNAPSHOT.jar</literal>
            from the service assembly's <literal>target</literal> directory to your ESB's hot deploy directory.
        </para>
        <para>
            Depending on the ESB, the service assembly may or not be automatically started, which means the ESB administration should be
            used (via Ant, JMX, or vendor tool) to start the assembly.
        </para>
    </section>
    
    <section>
        <title>Testing the service</title>
        <para>
            Using your favourite web services testing tool, we may now send a request message to the URL exposed by our consumer endpoint
            (<literal>http://localhost:8192/utilities/unitConverter</literal>):
            <programlisting language="XML"><![CDATA[
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
    <SOAP-ENV:Header/>
    <SOAP-ENV:Body>
        <convert xmlns="http://example.co.za/unitconverter/">
            <unitConversionRequest>
            <from xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Distance" unit="mile">
                    <magnitude>60</magnitude>
                </from>
                <to>kilometer</to>
            </unitConversionRequest>
        </convert>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
]]></programlisting>
            which is routed to the external service provider by the ESB, and to which we receive a reply. We may now in the future
            replace the service provider with a different provider (external, or our own implementation), without affecting clients.
            This illustrates the value of using the ESB as a mechanism to de-couple clients and service providers, contributing considerably
            to organisational agility.
        </para>
    </section>

</section>