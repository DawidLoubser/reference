<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">

    <title>Publishing an external service to the ESB</title>

    <para>
        Consider the scenario where an implementation of a <literal>UnitConverter</literal> service
        exists at some external location on the internet. We wish to connect that service to our
        services infrastructure, in order for our own components to be able to make use of such a service
        without them each having to perform point-to-point integration to the service. Furthermore, if
        we later discover a better implementation of the service, or decide to implement our own,
        we can change service providers without having to update any client services.
    </para>

    <figure>
        <title>JBI Example: Publishing an external service to the ESB</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="externalService.png"/>
            </imageobject>
        </mediaobject>
    </figure>
    
    <para>
        We need to
        <itemizedlist>
            <listitem>
                <para>Create a high-level Maven project (with a <literal>pom.xml</literal>) describing
                our project</para>
            </listitem>
            <listitem>
                <para>Create a service unit which we will deploy to the <literal>servicemix-http</literal>
                    binding component. We can do so via the Maven archetype <literal>servicemix-http-provider-service-unit</literal>.</para>
            </listitem>
            <listitem>
                <para>
                    Modify the resource which is deployed to the binding component (<literal>xbean.xml</literal>) to indicate that
                    it must expose a <emphasis>provider</emphasis> endpoint, and tell it which service contract (interface name) it
                    provides to our infrastructure.
                </para>
            </listitem>
            <listitem>
                <para>
                    Create a <emphasis>service assembly</emphasis> module (via Maven's <literal>servicemix-service-assembly</literal> archetype) to which we
                    add, as dependencies, the above service unit.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    
    <para>
        Our Maven project structure is as follows:
        <programlisting><![CDATA[
publishExternalServiceToBus/
    pom.xml
    publishToExternalService-sa/
        pom.xml
    unitConverter-proxy/
        pom.xml
        src/
            main/
                resources/
                    xbean.xml
        ]]></programlisting>
    </para>
    
    <para>
        The high-level project's POM:
        <programlisting language="XML">
<xi:include href="src/publishExternalServiceToBus/pom.xml" parse="text"/>
        </programlisting>
    </para>
    
    <section>
        <title>Modules</title>
        <section>
            <title>unitConverter-proxy</title>
            <para>
                The service unit's POM (generated by Maven):
                <programlisting language="XML">
                    <xi:include href="src/publishExternalServiceToBus/unitConverter-proxy/pom.xml" parse="text"/>
                </programlisting>
            </para>
            <para>
                The deployed artifact, <literal>xbean.xml</literal>, indicates to the HTTP binding component that we
                wish to plug in an external service, implementing the <literal>UnitConverter</literal> interface
                (as per the unit converter's WSDL) running at a particular location.
                <programlisting language="XML">
                    <xi:include href="src/publishExternalServiceToBus/unitConverter-proxy/src/main/resources/xbean.xml" parse="text"/>
                </programlisting>
            </para>
            <note>
                <para>
                    The endpoint and service names make up the logical name <emphasis>of this proxy endpoint we are deploying</emphasis>,
                    which could be used to hard-wire other services on the ESB to. It is purely an internal name, and bears no relation to
                    the service/endpoint names declared in the WSDL of the external service
                </para>
            </note>
        </section>
        
        <section>
            <title>publishToExternalService-sa</title>
            <para>
                The service assembly simply contains a POM (generate by Maven) which we update to refer to the modules which we wish to include in this service
                assembly. This is done in the <emphasis>dependencies</emphasis> section. The <literal>pom.xml</literal>:
                <programlisting language="XML">
                    <xi:include href="src/publishExternalServiceToBus/publishToExternalService-sa/pom.xml" parse="text"/>
                </programlisting>
            </para>
            <para>
                Upon packaging, the necessary <literal>jbi.xml</literal> file will be generated by the servicemix / maven tooling,
                to indicate which service unit(s) - only one in this project - should go to which service engine(s).
            </para>
        </section>
    </section>
    
    <section>
        <title>Building and Deploying</title>
        <para>
            Running <literal>mvn install</literal> on the top-level project builds all sub-components,
            and installs them in the local maven repository.
        </para>
        <para>
            The service assembly can be deployed, either by running the Maven <literal>jbi:projectDeploy</literal> goal
            in the service assembly's directory, or simply by copying the service assembly <literal>publishToExternalService-sa-1.0-SNAPSHOT.jar</literal>
            from the service assembly's <literal>target</literal> directory to your ESB's hot deploy directory.
        </para>
        <para>
            Depending on the ESB, the service assembly may or not be automatically started. If not, your ESB administration should be
            used (via Ant, JMX, or vendor-specific tool) to start the assembly.
        </para>
    </section>
    

</section>
