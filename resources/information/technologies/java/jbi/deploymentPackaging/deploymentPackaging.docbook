<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0">
    <title>Service deployment and packaging</title>
    <indexterm>
        <primary>JBI</primary>
        <secondary>packaging</secondary>
    </indexterm>
    
    <para>
        A typical JBI project might consist of several <emphasis>service units</emphasis>, all of which
        should be deployed / managed together as one integration solution. To this end, several service units
        are grouped together in a <emphasis>service assembly</emphasis>, a ZIP file together with some metadata
        which may be deployed / undeployed as a single unit.
    </para>
    
    
    <section>
        <title>Service units</title>
        <indexterm>
            <primary>JBI</primary>
            <secondary>service unit</secondary>
            <tertiary>packaging</tertiary>
        </indexterm>
        
        <para>
            A service unit contains artifacts which have meaning to the service engine for which it is destined,
            such as XSLT documents for a transformation engine, or Java classes for a Java container. The structure and/or
            contents are thus dictated by the service engine in question.
        </para>
        <para>
            Each service unit must, however, contain a metadata file in <literal>META-INF/jbi.xml</literal> which indicates
            (by referring to service contracts, and/or specific service endpoint names) which services the unit
            <emphasis>provides</emphasis> and <emphasis>consumes</emphasis>. It is common for the <literal>jbi.xml</literal>
            file to be generated by tools.
        </para>
        
        <figure>
            <title>Packaging a JBI Service Unit</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="packaging-serviceUnit.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            An example of a <literal>jbi.xml</literal> file for a service unit is as follows:
        </para>
        
        <programlisting language="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jbi xmlns="http://java.sun.com/xml/ns/jbi" version="1.0">
  <services xmlns:my="http://my.own/namespace/" binding-component="false">
    <provides interface-name="my:ServiceProviderA" service-name="my:ServiceProviderAService" endpoint-name="ServiceProviderAEndpoint"/>
  </services>
</jbi>
]]></programlisting>
        <note>
            <para><literal>service-name</literal> and <literal>endpoint-name</literal> is as per a WSDL contract, and
            may be used to uniquely identify a service on the ESB</para>
        </note>
    </section>
    
    
    <section>
        <title>Service Assemblies</title>
        <indexterm>
            <primary>JBI</primary>
            <secondary>service assembly</secondary>
            <tertiary>packaging</tertiary>
        </indexterm>
        
        <para>
            A service assembly contains an assembly of services, in the form of already-packaged <emphasis>service units</emphasis>:
        </para>
        
        <figure>
            <title>Packaging a JBI Service Assembly</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="packaging-serviceAssembly-bare.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        
        <para>
            A service assembly (itself a ZIP or JAR file) contains only one artifact in addition to the service units: A <literal>jbi.xml</literal>
            file which
            <itemizedlist>
                <listitem>
                    <para>lists each service unit, as well as the name of the component to which it should be deployed, and</para>
                </listitem>
                <listitem>
                    <para>optionally contains <emphasis>service connections</emphasis>, where the assembler has <quote>hard-wired</quote>
                    together specific service endpoints (as opposed to relying on the ESB's automatic message routing based on the
                    service interface type)</para>
                </listitem>
            </itemizedlist>
        </para>
        
        <figure>
            <title>Packaging a JBI Service Assembly (Detail)</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="packaging-serviceAssembly-detail.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        
        <para>
            An example of a <literal>jbi.xml</literal> file (without service connections) for a service assembly is as follows:
        </para>
        
        <programlisting language="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jbi xmlns="http://java.sun.com/xml/ns/jbi" version="1.0">
  <service-assembly>
    <identification>
      <name>my-integration-assembly</name>
      <description>My simple integration assembly</description>
    </identification>
    <service-unit>
      <identification>
        <name>serviceA-proxy</name>
        <description>A proxy for an external service provider</description>
      </identification>
      <target>
        <artifacts-zip>serviceA-proxy-1.0.zip</artifacts-zip>
        <component-name>servicemix-http</component-name>
      </target>
    </service-unit>
    <service-unit>
      <identification>
        <name>serviceB</name>
        <description>A BPEL-based implementation of ServiceB</description>
      </identification>
      <target>
        <artifacts-zip>serviceB.zip</artifacts-zip>
        <component-name>ode-bpel</component-name>
      </target>
    </service-unit>
  </service-assembly>
</jbi>
]]></programlisting>
    </section>
    
    <section>
        <title>Deployment</title>
        <indexterm>
            <primary>JBI</primary>
            <secondary>deployment</secondary>
        </indexterm>
        
        <para>
            A service assembly can be deployed through one of a number of mechanisms, such as
            <itemizedlist>
                <listitem>
                    <para>dropping the file in a <emphasis>hot deploy</emphasis> directory
                    monitored by the JBI server,</para>
                </listitem>
                <listitem>
                    <para>using the standard Apache Ant tasks to deploy over the network via JMX</para>
                </listitem>
                <listitem>
                    <para>using Apache Maven to deploy over the network via JMX,</para>
                </listitem>
                <listitem>
                    <para>using a ESB vendor-provided tool, usually in the form of plug-ins that integrate with your Java IDE</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Each service unit will be deployed to its respective JBI component (binding component or service engine): 
        </para>
        <figure>
            <title>JBI Deployment</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="deployment-artifacts.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        
        <section>
            <title>Run-time endpoint activation</title>
            <para>
                As each service unit is received by a JBI component, it must immediately perform
                <emphasis>run-time endpoint activation</emphasis> whereby the provided / consumed
                services are published to the ESB, which may then couple them together.
            </para>
            
            <figure>
                <title>JBI Run-time endpoint activation</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="deployment-components.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
        
    </section>
    
</section>