<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Optimistic concurrency control</title>
    <para>
        For highly scalable systems one usually requires optimistic concurrency control with versioning.
        Version or timestamp checking is used to to detect 
        <itemizedlist>
            <listitem><para>
                conflicting updates across transactions, and to        
            </para></listitem>
            <listitem><para>
                prevent lost updates within a transaction.
            </para></listitem>
        </itemizedlist>
    </para>
    <para>
        The behaviour is really the same as in concurrent version control systems like subversion or CVS. Different
        persistence contexts obtain their own detached copy of the entities. Which ever persistence context
        commits first will merge their changes into the global persistence context and persist its domain to the
        database.
    </para>
    <para>
        Subsequent entity managers who commit may encounter a conflict when they merge their changes back
        into the global context. If this is the case, an exception is thrown. Otherwise the changes made within 
        that transaction are persisted through to the database.
    </para>
</section>
