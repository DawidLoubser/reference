<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Collapsing Multi-Valued Paths into Single-Valued Paths via Collection Variables</title>
    <para>
        SELECT clauses are restricted to single-valued paths. The same is largely true for WHERE 
        clauses. So, how do we handle queries along multi-valued paths?
    </para>
    <para>
        In JPQL this is done by defining collection variables via an  
        <literal>IN</literal> clause. Consider, for example the invalid query
        <programlisting><![CDATA[
SELECT client.bonds.account FROM Client client      -&gt; INVALID
]]></programlisting>
        The correct form of this query in JPQL is
        <programlisting><![CDATA[
SELECT bonds.account FROM Client c, IN(c.bonds) bonds      -&gt; VALID
            ]]></programlisting>
    </para>
    <para>
        Here the <literal>IN</literal>-clause defines a collection variable,
        <literal>bonds</literal>, which, for each client, resembles the client's bonds.
    </para>
    <para>
        In a similar way we can fix the following invalid EJB-QL statement 
        <programlisting><![CDATA[
SELECT p.presenters.course.name FROM Presentation p   -&gt; INVALID            
]]></programlisting>
        by defining a collection variable,<literal>ps</literal> , via an  
        <literal>IN</literal> clause
        <programlisting><![CDATA[
SELECT ps.course.name FROM Presentation p, IN(p.presenters) ps   -&gt; VALID
        ]]></programlisting>
    </para>
    
</section>    