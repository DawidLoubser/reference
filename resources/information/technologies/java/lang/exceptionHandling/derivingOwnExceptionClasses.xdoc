<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.exceptionHandling.derivingOwnExceptionClasses"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Deriving your own Exception Classes">Deriving your own Exception Classes</title>
  <para>
    You would have to derive your exception class from one of the existing exception
    classes. To decide which one, try and ask yourself the â€œis a" question. For
    example, your class might read a setup file. This file should be in a certain format and
    if that format is incorrect, you might want to throw a <literal>FileFormatException</literal>. 
    You would most probably decide to derive
    this exception class from <literal>IOException</literal>.
    <programlisting><![CDATA[
class FileFormatException extends IOException
{
   public FileFormatException() {}
   public FileFormatException(String message) { super(message); }
}
    ]]></programlisting>
  </para>  
  <para>
    Note that we supply the two standard constructors supplied with all of Java's exception
    classes. If the exception is thrown but not caught, this message is automatically printed
    when the application aborts. You can access this message via the <literal>getMessage()</literal> 
    method defined in <literal>Throwable</literal>.
    <programlisting><![CDATA[
 ...
 boolean fileNotOpened = true;
 
 while (fileNotOpened)
 {
   try
   {
     fileNotOpened = false;
     ...
   }
   catch (FileFormatException exception)
   {
     System.out.println("The following exception was thrown: "
                         + exception.toString());
     fileNotFound = true;
   }
 }
 ...
    ]]></programlisting>
   </para>  
   <para>
     Note that exception classes are just like any other class, just that they are subclasses
     of <literal>Throwable</literal>. They can have various constructors and
     various methods. For example, we could include the <literal>File</literal> variable which 
     caused the<literal>FileFormatException</literal> with our exception class:
     <programlisting><![CDATA[
class FileFormatException extends java.io.IOException
{
   public FileFormatException() {}
   public FileFormatException(String message) { super(message); }
   public FileFormatException(String message, File file)
   {
     super(message);
     this.file = file;
   }
 
   public File getFile() {return file;}
 
   private File file;
}
     ]]></programlisting>
  </para>  
  <para>
    On the client side we catch the <literal>FileFormatException</literal>
    object and can send messages (e.g. <literal>getFile()</literal>) to the
    exception just as we would to any other object.
  </para>
  <para>
    Always think how much control you want to give clients for distinguishing
    exceptions. For the above problem it would be better to write the <literal>FileFormatException</literal> 
    to be able to catch all types of file
    format exceptions and then to subclass it with <literal>MyFileFormatException</literal>. 
    This will allow clients to distinguish
    between various types of <literal>FileFormatException</literal>s as well
    as allowing to work with file format exceptions at the more abstract <literal>FileFormatException</literal> 
    level. For example, in the following code
    snippet we treat <literal>MyFileFormatException</literal>s in one
    particular way, all other <literal>FileFormatExceptions</literal> in
    another and all other <literal>IOException</literal>s in a third way.
    <programlisting><![CDATA[
try
{
  ...
}
catch (MyFileFormatException e) { ... }
catch (FileFormatException e)   { ... }
catch (IOException e)           { ... }
    ]]></programlisting>
  </para>  
</section>