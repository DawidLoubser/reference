<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns4855:section xmlns:ns4855="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.lang.arrays.usingArrays">
  <ns4856:title xmlns:ns4856="http://docbook.org/ns/docbook">Using Arrays</ns4856:title>
  <ns4857:para xmlns:ns4857="http://docbook.org/ns/docbook">
    Array elements are referenced via the standard array element access operator (square
    brackets). It should be remembered though that the index starts at zero and not at one.
    Thus, the elements of the vector
    <ns4858:programlisting xmlns:ns4858="http://docbook.org/ns/docbook">
double[] vec = new double[20];
    </ns4858:programlisting>
    are indexed from 0 to 19. In order to retrieve the third element we say
    <ns4859:programlisting xmlns:ns4859="http://docbook.org/ns/docbook">
double thirdElement = vec[2];
    </ns4859:programlisting>
    and the first element can be assigned via
   <ns4860:programlisting xmlns:ns4860="http://docbook.org/ns/docbook">
vec[0] = 17;
   </ns4860:programlisting>
  </ns4857:para>  
  <ns4861:para xmlns:ns4861="http://docbook.org/ns/docbook">
    The length of an array is available in a public
    data field called <ns4862:literal xmlns:ns4862="http://docbook.org/ns/docbook">length</ns4862:literal>. For example,
    <ns4863:programlisting xmlns:ns4863="http://docbook.org/ns/docbook">
System.out.println("The length of vec is " + vec.length);
    </ns4863:programlisting>
    prints out the length of <ns4864:literal xmlns:ns4864="http://docbook.org/ns/docbook">vec</ns4864:literal>.
  </ns4861:para>
  <ns4865:para xmlns:ns4865="http://docbook.org/ns/docbook">
    To resolve elements of a multidimensional array one simply supplies all the relevant
    indeces. For example, the 4'th element of second row of a matrix is retrieved via
    <ns4866:programlisting xmlns:ns4866="http://docbook.org/ns/docbook">
double x = matrix[1][3];
    </ns4866:programlisting>
  </ns4865:para>
  
  <ns4867:section xmlns:ns4867="http://docbook.org/ns/docbook">
    <ns4868:title xmlns:ns4868="http://docbook.org/ns/docbook">An Example Application</ns4868:title>
    <ns4869:para xmlns:ns4869="http://docbook.org/ns/docbook">
      The following is an application which reads in 2 matrices of user-defined
      dimensions and calculates and prints the product of the two matrices:
      <ns4870:programlisting xmlns:ns4870="http://docbook.org/ns/docbook"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" parse="text" href="src/MatrixProduct.java"/></ns4870:programlisting>
    </ns4869:para>  
    <ns4871:para xmlns:ns4871="http://docbook.org/ns/docbook">
      An example listing of the user input/output is shown below:
      <ns4872:programlisting xmlns:ns4872="http://docbook.org/ns/docbook">
 Enter matrix 1:
 no of rows = 2
 no of columns = 2
 Enter rows of matrix with spaces between elements:
 Enter row 0:
 1 2
 Enter row 1:
 2 3
 
 Enter matrix 2:
 no of rows = 2
 no of columns = 3
 Enter rows of matrix with spaces between elements:
 Enter row 0:
 1 2 3
 Enter row 1:
 3 4 5
 
 The product is:
 7.0, 10.0, 13.0
 11.0, 16.0, 21.0
     </ns4872:programlisting>
  </ns4871:para>
</ns4867:section>
</ns4855:section>