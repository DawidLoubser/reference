<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.arrays.usingArrays"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Using Arrays">Using Arrays</title>
  <para>
    Array elements are referenced via the standard array element access operator (square
    brackets). It should be remembered though that the index starts at zero and not at one.
    Thus, the elements of the vector
    <programlisting><![CDATA[
double[] vec = new double[20];
    ]]></programlisting>
    are indexed from 0 to 19. In order to retrieve the third element we say
    <programlisting><![CDATA[
double thirdElement = vec[2];
    ]]></programlisting>
    and the first element can be assigned via
   <programlisting><![CDATA[
vec[0] = 17;
   ]]></programlisting>
  </para>  
  <para>
    The length of an array is available in a public
    data field called <literal>length</literal>. For example,
    <programlisting><![CDATA[
System.out.println("The length of vec is " + vec.length);
    ]]></programlisting>
    prints out the length of <literal>vec</literal>.
  </para>
  <para>
    To resolve elements of a multidimensional array one simply supplies all the relevant
    indeces. For example, the 4'th element of second row of a matrix is retrieved via
    <programlisting><![CDATA[
double x = matrix[1][3];
    ]]></programlisting>
  </para>
  
  <section>
    <title role="An Example Application">An Example Application</title>
    <para>
      The following is an application which reads in 2 matrices of user-defined
      dimensions and calculates and prints the product of the two matrices:
      <programlisting><xi:include parse="text" href="src/MatrixProduct.java"/></programlisting>
    </para>  
    <para>
      An example listing of the user input/output is shown below:
      <programlisting><![CDATA[
 Enter matrix 1:
 no of rows = 2
 no of columns = 2
 Enter rows of matrix with spaces between elements:
 Enter row 0:
 1 2
 Enter row 1:
 2 3
 
 Enter matrix 2:
 no of rows = 2
 no of columns = 3
 Enter rows of matrix with spaces between elements:
 Enter row 0:
 1 2 3
 Enter row 1:
 3 4 5
 
 The product is:
 7.0, 10.0, 13.0
 11.0, 16.0, 21.0
     ]]></programlisting>
  </para>
</section>
</section>