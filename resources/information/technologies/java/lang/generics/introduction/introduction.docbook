<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="resources.information.technologies.java.lang.generics.introduction.introduction">
    
    <title role="Introduction">Introduction</title>
    <para>
        Generics (also known as <emphasis>parameterised types or methods</emphasis> or
        <emphasis>template classes and methods</emphasis>) enable one to define type parameters for
        classes, interfaces, instance methods or class functions, facilitating a compact way to
        define a class which can be used in a type-safe way with a range of parameter types.
        Generics improves type safety and reduces
        code bulk.
    </para>
    <para>
        A well known example for generic classes and methods is provided by the <emphasis>Standard
        Template Library (STL)</emphasis> of C++. Here all collection classes as well as the
        collection algorithms are defined using generics. The result is that
        one can define, for example, a collection of accounts. That collection will only accept
        accounts as elements. When extracting accounts there is no need for either casting or
        type verification.
    </para>
  <!-- Superfluous? para> 
        A further advantage of the standard template library of C++ is that collection classes are not restricted
        to holding only objects (they can hold primitive variables too). Also conversely, the
        collection algorithms themselves may be applied not only to collection classes, but also to
        primitive arrays (the latter is achieved by identifying the conceptual similarity between
        pointers and iterators and making iterators implement pointer arithmetic operators).
    </para-->
    <para>
        Similarly, the Java Collections Framework (in
        <literal>java.util</literal>) has been rewritten with support for
        generic types (without breaking backwards-compatibility). This provides Java
      with type-safe collections (similarly to how Java arrays are,
      indeed, tye-safe). The use of generic collections, together with the
      <emphasis>for-each</emphasis> looping construct, may significantly reduce code bulk
      compared to early Java applications that make use of collections. 
    </para>
    <para>
        Java's support for collections takes many of the concepts found in C++ to a further level.
        However, in order to remain backward compatible, Java had to also sacrifice some features
        which are available in languages like C++. One important difference is that in C++ the
        generics is achieved via class, method or function templates which the compiler will use to
        generate concrete realisations for all those types required by the user. In Java, on the
        other hand, generics is purely a code feature. No concrete, type-specific classes are
        generated and the template parameters do not feature in the compiled code. Instead, the
        compiled code uses the same type-inpecific class as the normal, non-generic code, and is
        made safer and more convenient only in that the Java compiler inserts and manages the
        type-casting code.
    </para>
  
  <!-- TODO: First off, what is generics? -->
    
    <section>
        <title>Generics versus interfaces</title>
        <para>
            In languages like C++, generics have been supported for a long time. Java only
            introduced generics with Java 5. Prior to Java 5 one had to either
            <itemizedlist>
                <listitem><para>
                    sacrifice type safety, thereby delaying many errors which could be trapped at
                    compile time to run-time errors, or 
                </para></listitem>
                <listitem><para>
                    moved to contract-based development via interfaces.
                </para></listitem>
            </itemizedlist>
            The latter approach is in many case still preferable to the templates approach. However,
            for many problems (and particularly for collections, and other
            general infrastructure elements) generics provides a clean, compact
            and type-safe solution which is less cumbersome than contracts.
        </para>
    </section>
    
</section>    