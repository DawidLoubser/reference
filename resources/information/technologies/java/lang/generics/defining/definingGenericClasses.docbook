<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="resources.information.technologies.java.lang.generics.defining.definingGenericClasses">
    <title>Defining generic classes</title>
  <indexterm>
    <primary>Generic types</primary>
    <secondary>defining</secondary>
  </indexterm>
    <para>
        A generic class/interface (or parameterised class/interface) defines a class which the
        compiler will add type checking for the different types the user is using. Note that one cannot use
        primitives for the type parameter of a  generic class or interface. Using wrapper classes
        has, though, been made less cumbersome with the support for auto boxing.
    </para>
    <para>
        In order to define a generic type one lists the type parameters comma delimited within angle
        brackets. For example, in the code listing below we define a generic, but type-safe stack
        class using one template type parameter, <literal>T</literal>:
        <programlisting language="Java">
<xi:include parse="text" href="../examples/stackClass/Stack.java"/>
        </programlisting>
    </para>
    
</section>    