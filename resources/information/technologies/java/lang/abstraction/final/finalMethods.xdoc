<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.final.finalMethods"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Final Methods">Final Methods</title>
  <para>
    Final methods may not be overidden. Declaring a method <literal>final</literal> 
    gives you the peace of mind that any object which is an
    instance of that class (i.e. an instance of the class itself or one of its subclasses)
    executes your method body upon receiving the corresponding message. This is the most
    important reason for wanting to declare a method <literal>final</literal>.
  </para>
  <para>
    You also might want to declare a method a final for a more technical reason, that of
    efficiency. If you have a reference to your class you know it will either be a null
    reference or it will refer to an instance of either your class itself or one of its
    subclasses. If you have declared one or more of your methods as <literal>final</literal> 
    the compiler knows that that particular method body will
    be called irrespective of whether the reference will point to one of the current or future
    subclasses and hence that method can be linked in at compile time resulting in more
    efficient code. Of course, that method can never be overridden by any subclass your
    children or children's children and hence you must be pretty certain that it will fulfill
    the requirements for a long-long time.
  </para>
  <para>
    To declare a method as final you simply insert the <literal>final</literal> keyword 
     among the method qualifiers:
     <programlisting><![CDATA[
public final checkPassword() {...}
     ]]></programlisting>
  </para>
</section>