<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.abstraction.subClassing.polymorphism">
  <title>Polymorphism </title>
  <para>
    Polymorphism can be seen as message abstraction. You send an abstract message to an
    object, and the recipient of the message interprets the message within its own context.
    Even if the message was sent though an object reference of an abstract type, the message
    is of course received by a concrete class, which has its own (often specialised) behaviour
    to realise the service.
  </para>
  <para>
    A very simple illustration of polymorphism at work is shown below:
    <programlisting language="Java">
Person p;
 
p = new Person("Peter Smith", "631112 5225 087");
p.speak();
 
p = new Employee("Tandi Ndlovu", "732232 1121 087", 8000.00, "ACME");
p.speak();
    </programlisting>
    which would produce the following output:
    <programlisting>
Yo, my name is Peter Smith
Thank you for supporting ACME, my name is Tandi Ndlovu - how can I help you?"
    </programlisting>
  </para>
  <para>
    In both cases we request the <literal>speak()</literal> service, but in the
    first case, the recipient is a <literal>Person</literal>, and in the second
    case it is an <literal>Employee</literal>, which has specialised behaviour.
    From a client perspective, however, we did not expect (or even know of) the
    specialised behaviour if we consider that both messages were sent via an
    object reference of type <literal>Person</literal>.
  </para>
  <para>
    Note that a language which supports polymorphism must allow for dynamic binding
    (run-time linking). Take the above example: We could have asked the user at run-time
    whether he/she wants to create a <literal>Person</literal> or a <literal>Employee</literal>. 
    Hence, only at run-time would it be known whether
    the <literal>speak()</literal> method of <literal>Person</literal> or <literal>Employee</literal> should
    be called.
  </para>
</section>