<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.subClassing.polymorphicCollections"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Polymorphic Collections">Polymorphic Collections</title>
  <para>
    Let us further illustrate polymorphism via a simple polymorphic collections, an array.
    <note><para>
      In practice one often uses the Java 2 collection classes instead of arrays.
    </para></note>
    Consider the following example code:
<programlisting><xi:include parse="text" href="src/PolyArray.java"/></programlisting>
  </para>  
  <para>
    In the above program we add persons and employees to our polymorphic collection of persons.
    Then we print out each person. When an object is sent to a text stream 
    (like <literal>System.out</literal>), then it's <literal>toString()</literal> method is 
    automatically called to obtain a string representation for the object. 
    The toString() method is resolved polymorphically (via dynamic
    binding at run-time), i.e. at run-time the message is sent to the object and the object
    uses its own <literal>toString()</literal> method to provide the requested service. If it does not have a
      <literal>toString()</literal> method the corresponding method of its
    superclass is used. If no other class in the hierarchy has a <literal>toString()</literal> 
    method, the inherited <literal>toString()</literal> method of <literal>Object</literal> is used which 
    simply prints out the name of the class, and its hash code (discussed later). 
    The output of the program is listed below:
    <programlisting><![CDATA[
781123 2235 087: Jane Cole
680201 1178 023: Rashad Naidoo, salary = R11,000 (Employee)
590821 3343 087: Pieter Smit, salary = R9,500 (lecturer)
601230 1218 078: Benny Moloto    ]]></programlisting>
  </para>
  <para>
    This same program, using the <literal>for-each</literal> loop introduced in Java 5,
    can be simplified as follows:
<programlisting><xi:include parse="text" href="src/PolyArrayJava5.java"/></programlisting>    
  </para>
</section>