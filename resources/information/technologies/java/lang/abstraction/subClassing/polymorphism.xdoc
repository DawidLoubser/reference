<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.subClassing.polymorphism"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Polymorphism ">Polymorphism </title>
  <para>
    Polymorphism can be seen as message abstraction. You send an abstract message to an
    object and the recipient of the message interprets the message within its own context.
  </para>
  <para>
    A very simple illustration of polymorphism at work is shown below:
    <programlisting><![CDATA[
Person person = null;  // Initialising reference to null reference
 
person = new Person("Peter Smith", "631112 5225 087");
System.out.println( person.toString() );
 
person = new Employee("Tandi Ndlovu", "732232 1121 087", 8000.00,
                      "programmer");
System.out.println( person.toString() );
    ]]></programlisting>
  </para>
  <para>
    In both cases we say <literal>person.toString()</literal>, but in the
    first case the recipient of the <literal>toString()</literal> message is
    an instance of <literal>Person</literal>, while in the second case the
    recipient is a specialised person, an <literal>Employee</literal>. The recipient of the message
    interprets the message within its own context, and may provide the service differently, as long as it does
    not violate the service contract (i.e. method arguments, return type). 
    Thus the <literal>Person.toString()</literal> method will be called in the first instance,
    while the <literal>Employee.toString()</literal> method will be called in
    the second.
  </para>
  <para>
    Note that a language which supports polymorphism must allow for dynamic binding
    (run-time linking). Take the above example. We could have asked the user at run-time
    whether he/she wants to create a <literal>Person</literal> or a <literal>Employee</literal>. 
    Hence, only at run-time would it be known whether
    the <literal>toString()</literal> method of <literal>Person</literal> or <literal>Employee</literal> should
    be called.
  </para>
</section>