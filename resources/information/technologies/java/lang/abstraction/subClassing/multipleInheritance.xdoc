<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.subClassing.multipleInheritance"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Multiple Inheritance in Java</title>
  <para>
    Even though Java does support multiple inheritance of interfaces, it
    does not support multiple inheritance of classes, i.e. every class can have at most one superclass.
  </para>
  <para>
    When doing object oriented modeling one finds quite regularly that the correct model
    for certain situations is one where an object is a specialization of multiple other
    objects. In such cases a Java implementation would not be a direct mapping of the design
    classes onto implementation classes. There are a few ways to address the problem. Even
    though they can usually address the problem satisfactorily from a client perspective, there
    is usually at least some code duplication on the implementation side.
  </para>
  <para>
    Let us look at an example where multiple inheritance provides the natural model, that
    of an employed client. No matter how you look at the poor fellow, an employed client is an
    <literal>Employee</literal> and is a <literal>Client</literal>. Both, <literal>Employee</literal> and
    <literal>Client</literal> are, say, <literal>Person</literal>s. 
  </para>
  <figure>
    <title>An employed client is a client and an employee.</title>
    <graphic fileref="employedClient.jpg"/>
  </figure>
  <para>
    Furthermore both, a <literal>Client</literal> and an <literal>Employee</literal> 
    reference should be able to refer to an employed
    client. This is really only achievable by having an interface driven design and
    implementation. These and other approaches are discussed in detail in the Advanced Java course.
  </para>
  <para>
    A direct implementation of this design is not possible in Java. One
    has to make the uncomfortable decision of whether the person is more an employee, or more a
    client and then select the corresponding superclass. For the other side, one can define a
    client interface, say <literal>ClientInterface</literal> and have both, the <literal>Client</literal> 
    and <literal>EmployedClient</literal> classes implement that interface. Both classes
    need implementations for the corresponding client interface methods, usually resulting in
    code duplication. Some of the code duplication can be avoided at the cost of more
    complex designs. 
  </para>
</section>