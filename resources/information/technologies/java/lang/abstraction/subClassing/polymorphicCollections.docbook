<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.abstraction.subClassing.polymorphicCollections">
  <title>Polymorphic Collections</title>
  <para>
    Let us further illustrate polymorphism via a simple polymorphic collections, an array.
    <note>
         <para>
      In practise one often uses the <literal>java.util</literal> Collections Framework instead of arrays,
       due to their greater flexibility and features.
    </para>
      </note>
    Consider the following example code:
<programlisting language="Java">
<xi:include parse="text" href="src/PolyArray.java"/>
      </programlisting>
  </para>  
  <para>
    In the above program we add persons and employees to our polymorphic collection of persons.
    Then we ask each person to speak. The <literal>speak()</literal> service is resolved 
    polymorphically (via dynamic binding at run-time), i.e. at run-time the message is sent 
    to the object and the object uses its own <literal>speak()</literal> method to provide 
    the requested service. If it does not have a <literal>speak()</literal> method, the corresponding method of its
    superclass is used. 
    The output of the program is listed below:
    <programlisting>
Yo, my name is Jane Cole
Thank you for supporting ABC Training, my name is Rashad Naidoo - how can I help you?"
Thank you for supporting CNA, my name is Pieter Smit - how can I help you?"
Yo, my name is Benny Moloto
</programlisting>
  </para>
  <para>
    This same program, using the <literal>for-each</literal> loop introduced in Java 5,
    can be simplified as follows:
    <programlisting  language="Java">
<xi:include parse="text" href="src/PolyArrayJava5.java"/>
      </programlisting>    
  </para>
</section>