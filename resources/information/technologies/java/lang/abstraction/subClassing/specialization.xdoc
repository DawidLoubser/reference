<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.subClassing.specialization"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Specialisation through Subclassing</title>
  <para>
    Java allows you to define objects at various levels of abstraction. For example, You
    might view a particular manager as a <literal>Manager</literal>, an
    <literal>Employee</literal>, a <literal>Person</literal> or simply as an <literal>Object</literal>. 
    This is a process from very concrete to more and more abstract.
  </para>
  <para>
    The reverse direction can be viewed as specialisation. A <literal>Manager</literal> is a special type 
    of <literal>Employee</literal> which is a special type of <literal>Person</literal> which is a special 
    type of <literal>Object</literal>.
  </para>
  <para>
    Note that we can identify a specialisation relationship as a special kind of 
    <quote><emphasis>is a</emphasis></quote> relationship and this should 
    be the criterion for deciding on subclassing.
  </para>
  <para>
    Subclassing is achieved in Java via the <literal>extends</literal> keyword:
    <programlisting><![CDATA[
public class Person {...}
 
public class Employee extends Person {...}
        
public class Manager extends Employee {...}
    ]]></programlisting>
  </para>  
  <para>
     Here <literal>Manager</literal> is a subclass of <literal>Employee</literal> which 
     is a subclass of <literal>Person</literal>. Conversely, <literal>Person</literal>
     is the superclass of <literal>Employee</literal> which is the superclass
     of <literal>Manager</literal>. Note that we did not have to specify that
     <literal>Person</literal> extends Object. If no superclass is
     specified, the compiler automatically inserts <literal>extends
     Object</literal> the ultimate base class for all classes.
    </para>
    <para>
      The language relies on <emphasis>you</emphasis> to design your class hierarchies in
      such a way that the subclass is a sensible specialisation of the superclass. This is best
      illustrated by the following simple statements:
      <programlisting><![CDATA[
Employee employee;
 
employee = new Manager();
      ]]></programlisting>
    </para>  
    <para>
      We first declare a reference to an <literal>Employee</literal>. This reference can refer
      to any object which is an <literal>Employee</literal>. In the second
      statement we create a <literal>Manager</literal> and assign the <literal>Employee</literal>-reference 
      to refer to the manager. The compiler is
      quite happy because <literal>Manager</literal> is a subclass of <literal>Employee</literal> 
      and he/she trusts you in having applied the <quote><emphasis>is a</emphasis></quote> criterion for subclassing.
    </para>
    <para>
      Quite generally the following rule should hold. Everywhere where an <literal>Employee</literal> 
      is required you should be able to supply any <literal>Employee</literal>, whether it is a vanilla 
      <literal>Employee</literal> or a specialised <literal>Employee</literal> like <literal>Manager</literal> or
      <literal>Programmer</literal>. We can thus work with employees at
      various levels of abstraction. Let us have a look at the intestines of a simple <literal>Person</literal> class.
      <programlisting><xi:include parse="text" href="src/Person.java"/></programlisting>
    </para>
    <para>
        Let us now look at the subclass, <literal>Employee</literal>:
      <programlisting><xi:include parse="text" href="src/Employee.java"/></programlisting>
    </para>

        <para/>
 <para>
    An <literal>Employee</literal> inherits the attributes, <literal>name</literal> and 
   <literal>idNumber</literal> from the
   <literal>Person</literal> class, but cannot access them directly.
    Instead it has to access them via the public <literal>getName()</literal>
    and <literal>getIdNo</literal> methods.
 </para>
  <para>
    Note that the first statement in the first <literal>Employee</literal> constructor specifies that the superclass, 
    (<literal>Person</literal>), should be instantiated via that constructor which
    takes two strings as arguments. When we instantiate a class we automatically instantiate
    all its superclasses (otherwise an employee would not have any components for the <literal>name</literal> 
    and the <literal>idNumber</literal>). If
    you do not specify how the superclass should be instantiated, the compiler will try and
    instantiate it via the default constructor of the class. If no default constructor exists,
    the compiler will inform you of that fact with an error message. The rest of the
    constructor body simply initializes its own attributes.
  </para>
  <para>
    We have a second constructor, allowing the user to omit a job description. In the
    body we simply call the first constructor of the <literal>Employee</literal> class, supplying 
    "Employee" for the default job description.
  </para>
  <para>
    Both, the <literal>this()</literal> and <literal>super()</literal> statements must be the first statements 
    in the constructor.
  </para>
  <para>
    Note that the <literal>Person</literal> class has a method, <literal>toString</literal>, allowing the user 
    to obtain a string representation
    of the class. The <literal>Employee</literal> class would inherit this
    functionality. The developers have, however, choosen to supply a separate <literal>toString()</literal> method 
    for the <literal>Employee</literal> class which overrides the <literal>Person</literal>'s<literal> toString()</literal>
    method. In its function body it first calls <literal>Person</literal>'s
      <literal>toString()</literal> method via the <literal>super</literal> keyword and then appends 
    its own information to that
    information which every person has.
  </para>
  <!-- EEK! This is definitely out... (and examples changed accordingly to use String 
    <para>
    Note that we use the <literal>StringBuffer</literal> class instead
    of the <literal>String</literal> class. The main difference between these
    two classes is that <literal>StringBuffer</literal> is mutable,
    while <literal>String</literal> is immutable. The advantage of using
    <literal>StringBuffer</literal> is thus that we can modify the string
    it holds and we do not have to create a new string everytime we want to modify the string,
    <abbrev>i.e.</abbrev> it is one of efficiency. The <literal>StringBuffer</literal> class is
    a clean class in the sense that you could write such a class yourself. Recall that the
    <literal>String</literal> class was dirty in the sense that operators
    were overloaded for the class, a syntax not supported by the language. Thus when using the
      <literal>StringBuffer</literal> class the assignment operator on <literal>StringBuffer</literal> 
    references is simply reference assignment as in
    normal Java syntax and instead of the addition operator we now have to use the 
    <literal>append()</literal> method.
  </para>
    -->
</section>