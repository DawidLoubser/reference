<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.introduction.introduction"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Introduction">Introduction</title>
  <para>
    In many ways the power of object-orientation comes from the support for abstraction,
    enabling developers to work at very abstract and general levels and facilitating the
    development of very generic solutions. Of course, at times one has to work at a very
    specific level and that too is cleanly facilitated through object-orientation.
  </para>
  <para>
    There are mainly two mechanisms through which abstraction is achieved in Java,
    superclasses and interfaces. The former has more an implementation focus while the latter is
    driven more by client needs. We shall revisit the concepts behind these different forms of
    abstraction and the advantages and disadvantages of each in the Advanced course.
  </para>
</section>