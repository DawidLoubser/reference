<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.abstraction.introduction.introduction">
  <title>Introduction</title>
  <para>
    In many ways the power of object-orientation comes from the support for abstraction,
    enabling developers to work at very abstract and general levels and facilitating the
    development of very generic solutions. Of course, at times one has to work at a very
    specific level and that too is cleanly facilitated through object-orientation.
  </para>
  <para>
    There are mainly two mechanisms through which abstraction is achieved in Java:
    <itemizedlist>
      <listitem>
        <para>specialisation (classes extending one another), and</para>
      </listitem>
      <listitem>
        <para>interfaces</para>
      </listitem>
    </itemizedlist>
    The former has more an implementation focus while the latter is driven more by 
    client needs. As such, interfaces are ultimately more significant, and have a greater
    impact on the design and implementation of Java components.
  </para>
</section>