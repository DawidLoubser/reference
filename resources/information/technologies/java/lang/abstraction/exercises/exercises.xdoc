<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.abstraction.exercises.exercises"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Exercises">Exercises</title>
  <para>
    <orderedlist>
      <listitem>
        <para>
          Define special types of accounts (Credit cards and cheque accounts). Cheque accounts
          have a cheque fee with every debit. Furthermore, cheque accounts may not have a negative
          balance. Credit cards on the other hand can have a negative balance up to some card
          limit. Make your account class abstract, requiring that all accounts can be credited and
          debited. 
        </para>
      </listitem>
      <listitem>
        <para>
          Define an interface <literal>Sortable</literal> which specifies
          that any class which implements <literal>Sortable</literal> must have
          the following service:
          <programlisting><![CDATA[
public int compareTo(Sortable arg) throws IncompatibleType;
          ]]></programlisting>
          which returns -1 if the argument object., <literal>arg</literal>, is less
          than the <literal>this</literal> object, 0 if they are equal and +1
          otherwise. The service will throw an <literal>IncompatibleType</literal> 
          exception if the argument object cannot be
          compared to the <literal>this</literal> object. Now, let Person
          implement sortable such that the comparison is done lexicographically first on the
          surname and then on the first names (the <literal>Person</literal>
          class should have the appropriate attributes). Define also an <literal>Account</literal> 
          class and accounts are sorted on their balance. Now
          write a little <literal>BubbleSort</literal> class which implements the
          <literal>Sorter</literal> interface specifying that every <literal>Sorter</literal> 
          must provide a service
          <programlisting><![CDATA[
public void sort(Sortable[] array) throws IncompatibleType;
          ]]></programlisting>
          Test your sorter by sorting an array of persons and an array of accounts respectively. </para>
      </listitem>
    </orderedlist>
  </para>
</section>