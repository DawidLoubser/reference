<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section
        xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xml:id="resources.information.technologies.java.lang.annotations.introduction.introduction"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    <title>Introduction</title>

    <para>
        At its core, Java is an imperative programming language. For tasks where a more declarative approach
        would be preferable, one traditionally had to rely heavily on configuration files - usually XML-based, on source
        code pre-processors, or specific naming conventions, to convey any deeper meaning with one's code
        that might be used by frameworks to make our lives easier.
    </para>

    <para>
        <emphasis>Java Annotations</emphasis> provides a standard mechanism to embed rich, strongly-typed, compiler-verified
        into Java code, which literally revolutionised Java when it was introduced in version 5.
    </para>

    <section>
        <title>Example uses of annotations</title>
        <para>
            The uses of annotations in Java are many-fold;
            <itemizedlist>
                <listitem>
                    <formalpara>
                        <title>Dependency injection</title>
                        <para>Instead of creating objects, annotated instance variables where a dependency injection framework
                        will automatically provide a suitable object instance.</para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Specify binding to other data languages</title>
                        <para>
                            Classes and their properties are annotated to indicate how they are to be represented in another
                            language (such as XML, using JAXB annotations). Object state can then automatically be transferred
                            between, say, a Java object instance, and an XML document instance.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Specifying strong object constraints</title>
                        <para>
                            Java's type system does not make it possible to express that a certain String must adhere to
                            the valid pattern of an e-mail address, or that a collection should not be empty, without introducing
                            large amounts of custom classes. Using Java annotations, one can specify stronger constraints
                            for the properties of a class, which can be enforced by validation frameworks (such as Bean Validation).
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Requesting enterprise infrastructure services</title>
                        <para>
                            We can apply annotations to a normal method, to request that an environment does not allow it
                            to be executed by users not in a particular authenticated security role, or that we want the
                            service to participate as part of the higher-level transaction that was started by it's caller.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Lifecycle callbacks and control</title>
                        <para>
                            Many frameworks, like Java EE (EJB), distinguish between the lifecycle of conceptual business objects,
                            and the individual objects in a pool that has been created for better performance/scalability. Constructors
                            are not useful in a situation like that, and it's tedious to have to implement framework-specific lifecycle
                            interfaces. With annotations, any number of our own methods can be executed at certain lifecycle events.
                        </para>
                    </formalpara>
                </listitem>
            </itemizedlist>
        </para>
    </section>

</section>    
  