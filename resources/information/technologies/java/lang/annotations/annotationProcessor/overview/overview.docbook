<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- Author: Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Overview</title>
    <para>
        As of JDK 1.6, Java supports the interception of the compilation process through the insertion of processors
        which need to implement <literal>javax.annotation.processing.AbstractProcessor</literal>.
        <note>
            <para>
                Even though the <literal>AbstractProcessor</literal> class is defined in the <literal>javax.annotation</literal>
                package, it is actually not exclusively for annotation processing, but can be used for performing any additional
                tasks during compilation.
            </para>    
        </note>
    </para>
    
    <section>
        <title>Processing annotations at class or instance level</title>
        <para>
            Some annotations are processed at run-time against instances of a class. For example, to perform
            instance state validation, one could, at run time, identify and execute all services of an object which have
            been annotated as an integrity test.
        </para>
        <para>
            Other annotations are processed against the classes, during either pre-compilation, compilation, 
            or during class loading. These operations are not done against specific instances (objects) of the class,
            but against the class itself.
        </para>
    </section>
    
    <section>
        <title>What are annotation processors used for?</title>
        <para>
            Annotation processors are provided to the compiler to process annotations during the compilation process. The
            purpose of annotation processors could include
            <itemizedlist>
                <listitem><para>
                    To validate that annotations have been correctly applied.
                </para></listitem>
                <listitem><para>
                    To generate related classes from the annotations (e.g. test classes, adapters, interceptors which address non-functional
                    concerns like authorization, logging, transaction management, ...)
                </para></listitem>
                <listitem><para>
                    To generate new classes which have additional code (e.g. methods, inserted code lines, ...).
                </para></listitem>
                <listitem><para>
                    To generate other artifacts like documentation artifacts.
                </para></listitem>
            </itemizedlist>
        </para>
        
        <note>
            <para>
                Compilation processors cannot be used to modify the class which is being compiled. They can, however, generate other classes which contain the
                code of the compiled class plus additional code inferred from the annotations and have these new classes submitted for compilation.
            </para>                 
        </note>    
    </section>    
</section>    