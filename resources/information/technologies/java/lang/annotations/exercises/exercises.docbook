<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  xml:id="resources.information.technologies.java.lang.annotations.exercises.exercises">
    
    <title>Exercises</title>
    <para>
        <orderedlist>
            <listitem><para>
                Think of three example applications of annotations. Discuss in that context the
                benefits and drawbacks of annotations.
            </para></listitem>
            <listitem><para>
                Define a @Status annotation which could be used to <quote>mark up</quote> the development
                status of your code. It contains, as parameters
                <orderedlist>
                    <listitem><para>a version number as a <literal>String</literal>,</para></listitem>
                    <listitem><para>
                        a maturityLevel which is one of
                        <itemizedlist>
                            <listitem><para>DEVELOPMENT,</para></listitem>
                            <listitem><para>TESTED_BY_TECHNICAL_TEAM</para></listitem>
                            <listitem><para>USER_TESTED.</para></listitem>
                        </itemizedlist>
                    </para></listitem>
                    <listitem><para>
                        and a lastChanged field (representing a date).
                    </para></listitem>
                </orderedlist>
                Specify <literal>Development</literal> as the default <literal>maturityLevel</literal> and make the
                version number field mandatory.
            </para></listitem>
            <listitem><para>
                Assume you want to be able to add integrity checks to your classes, i.e. tests which check whether the
                instance (object) of a class is in a valid state. Multiple methods could be annotated with an
                <literal>@IntegrityTest</literal> annotation. A method annotated as an <literal>@IntegrityTest</literal>
                would take no parameters and return a <literal>true</literal> or <literal>false</literal> depending
                on whether the object is in a valid state or not.                
                <orderedlist>
                    <listitem><para>
                        Define an <literal>@IntegrityTest</literal> annotation with the correct annotation target
                        and retention policy.
                    </para></listitem>
                    <listitem><para>
                        and an <literal>Account</literal> class which
                        has two integrity tests called <literal>consistentBalance()</literal> and
                        <literal>notOverDrawn()</literal> which check that
                        <orderedlist>
                            <listitem><para>
                                the balance is equal to the sum of the credits minus the sum of the debits, and that
                            </para></listitem>
                            <listitem><para>
                                the balance is not less than the minimum balance for the account.
                            </para></listitem>
                        </orderedlist>
                    </para></listitem>
                    <listitem><para>
                        Write a test class which gets an account and executes all integrity tests for the account, throwing an exception
                        if the account is not in a valid state.
                    </para></listitem>
                    <listitem><para>
                        Write an <literal>IntegrityTestValidator</literal> annotation processor (extending <literal>AbstractProcessor</literal>)
                        which is used by the compiler to check that only methods which get no parameters and return a boolean have been
                        annotated as <literal>@IntegrityTest</literal>s.
                    </para></listitem>
                </orderedlist>
            </para></listitem>

            <listitem><para>
                Java, like all other widely used object oriented languages, does not differentiate
                at language level between association, aggregation and composition relationships.
                Create annotations that can be applied either to fields or methods, indicating the nature
                of the relationship to that component:
                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>@Composition</literal>, <literal>@Aggregations</literal> or <literal>@Association</literal>
                            (perhaps with information distinguishing between 'weak' and 'strong' association, i.e. whether the field
                            contains a Java object reference to the target, or just an identifier to some target).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>@Multiplicity</literal>, allowing one to specify the standard UML multiplicities (*, n, n..m)
                            in a form that makes sense to you.
                        </para>
                    </listitem>
                </itemizedlist>
            </para></listitem>
        </orderedlist>
        
    </para>
</section>    
