<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.wrapperClasses.autoBoxing.autoBoxing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Autobox and Unbox</title>
    <para>The j2se features, autobox and unbox, are simply wrapper classes that allow primitive values to be accessed as 
        objects and vice versa, e.g. retrieving the primitive int from an Integer. Autoboxing and unboxing now provides 
        a means to write simpler code and wraps the conversion between the object and the primitive.
    </para>
    <para>
        Before autoboxing was available a developer would typically convert from a primitive to the required object by 
        creating an instance of the object and passing the primitive as a parameter in the constructor for instance. In order 
        to gain access to a primitive from a particular object, a method is invoked on the object. Take note of the example 
        where an Integer object is created from the int primitive. The int value is then accessed by calling the intValue() method
        from the Integer class.
        <programlisting><xi:include parse="text" href="src/BeforeAutoBox.java"/></programlisting>
    </para>
    <para>
        The following listing illustrates a simple example of autoboxing. Essentially autoboxing wraps how one would previously 
        convert between a primitive and an object. Take note that the Integer object is <emphasis>directly</emphasis> assigned 
        to the primitive int value. This is completely legal and simplifies the code, i.e the primitive value is 'autoboxed' into the object.
        <programlisting><xi:include parse="text" href="src/AutoBoxInt.java"/></programlisting>        
    </para>
    <para>
        The following listing illustrates an example of unboxing. Take note that the Double object is directly accessed. 
        There is no need to call the doubleValue() method on the Double object because the object is 'unboxed' into the
        primitive double value.
        <programlisting><xi:include parse="text" href="src/UnboxDouble.java"/></programlisting>      
    </para>
    <para>Autoboxing and unboxing must, however, be used with care. Do not assume that objects can be compared as 
        primitive types such as indicated below. The rules for comparing objects still remains, i.e use the equals() method to 
        compare objects and not the == operator.
        <programlisting><xi:include parse="text" href="src/WatchOut.java"/></programlisting>
    </para>
    <para>
        Method overloading must also be considered carefully when autoboxing. If 2 methods exist as 
        listed below then which one is called when an <emphasis>int</emphasis> parameter is passed? 
        <programlisting><xi:include parse="text" href="src/OverloadedMethods.java"/></programlisting>
         The results reveal that the int parameter is promoted to a long and the first method is called. 
        This supports backward compatibility to earlier versions of java. 
    </para>   
</section>