<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.basicLanguage.strings"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="Strings">Strings</title>
    <para>Strings in Java are actually objects which have attributes and offer
        services. However, String objects are in many ways different to all
        other objects and since strings are used so frequently, we shall discuss
        them upfront, before we discuss objects and classes. The
        <literal>String</literal> class behaves differently to any class you
        could write because it has many operators overloaded for it while Java
        itself does not support operatior overloading.</para>
    <para>Strings in Java are <emphasis>immutable</emphasis> (i.e. They cannot
        be changed after being created). You create a string once and it will
        contain the same characters until that string is removed from memory
        (garbage collected). Consider, for example the following Java statement.</para>
    <para/>
    <para>
        <programlisting>
 String name = "Peter Smith";
    </programlisting>
    </para>
    <para>To the right-hand side of the assignment, we create an immutable
        string object whose value is "Peter Smith". To the left hand side we
        create a variable, <literal>name</literal> which is a reference to a
        <literal>String</literal>. It is important to realize that
        <literal>name</literal> is not a <literal>String</literal> itself, but
        only a reference to a <literal> String</literal> which can be changed to
        refer to another String:</para>
    <para/>
    <para>
        <programlisting>
String name = "Tandi Nquenya";
    </programlisting>
    </para>
    <para>We have not modified the <literal>String</literal> object. Instead we
        created a new <literal>String</literal> and set the reference variable,
        <literal>name</literal> to refer to this new <literal>String</literal>.
        If there is no other reference which refers to the original string, then
        the latter will be removed from memory by the garbage collector.</para>
    <para>The plus operator, â€˜<literal>+</literal>', is defined for
        <literal>String</literal>s to do string concatenation. Consider the
        following code snippet:</para>
    <para/>
    <para>
        <programlisting>
String firstName = "Jan";
String surName   = "Meintjies";

String name = firstName + " " + surName;
    </programlisting>
    </para>
    <para>The last statement creates a new <literal>String</literal> which has
        as its value "Jan Meintjies". Note that unlike C++, Java does not
        support operator overloading and the definition of the
        <literal>+</literal>-operator for string concatenation is an exception
        to the language rules.</para>
    <para/>
</section>
