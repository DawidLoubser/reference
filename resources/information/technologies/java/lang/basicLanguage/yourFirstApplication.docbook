<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.basicLanguage.yourFirstApplication">
    <title>Your First Java Application</title>
    <para>Below we show the Java version of the standard <quote>hello world</quote> program.</para>
    <para>
        <programlisting language="Java">
public class HelloWorld
{
    public static void main(String[] args)
    {
        System.out.println("Hi there, mate!");
    }
}
        
        </programlisting>
    </para>
    <para> Note that everything is defined in a class. In Java, one may not define any free-standing
        (global) variables, constants or functions. Everything has to be encapsulated within a class
        (or, later, an interface).</para>
    <para>Our <literal>main</literal> function (the starting point of any program) thus cannot be a 
        free-standing set of instructions - we place it within a class (its owner). The name of the 
        class containing the main program, is the name of the application (as executed by the user). 
        In our case, the name of the class is <literal>HelloWorld</literal>. To specify
        the definition of a new class, one uses the keyword <literal>class</literal> followed by the
        name of the class. Additionally one can specify the access level of the class. We have
        declared our class <literal>public</literal> so that it is publicly accessible (there are several
        additional access levels)</para>
    <para>Directly after the name of the class you will notice the opening of a curly bracket, which
        is closed again at the end of the class definition. Curly brackets are used in Java to specify 
        a block. In our case the contents of the class is grouped within a block. The syntax for the
        definition of a class is thus</para>
    <para>
        <programlisting language="Java">
access-level class NameOfClass
{

}
    </programlisting>
    </para>
    <para>One of the ways in which Java forces you to develop your applications modular is by
        requiring that there may be only one public class (or interface) per compilation unit, i.e.
        per file. Furthermore, the name of the file must be the same as the name of the public class
        (interface), with a <literal>.java</literal> extension added to the class name. Hence, the
        <literal>HelloWorld</literal> class must be saved in a file named <literal>HelloWorld.java</literal>.</para>
    <para>Our <literal>HelloWorld</literal> class has only one member, the public method
        <literal>main()</literal>. A method is a service supplied by the class.
        We shall return to methods and class attributes in the
        following chapter. The general syntax for defining a method is</para>
    <para/>
    <para>
        <programlisting>
access-level class NameOfClass
{

    access-level return-type methodName (arguments)
    {
    
    }
}
    </programlisting>
    </para>
    <para>Our main function is publicly accessible. It returns <literal>void</literal> which is
        Java's way for specifying absolutely nothing. It has as arguments an array of strings.
        Arrays are denoted in Java by a pair of square brackets. We shall return to arrays in one of
        the following chapters. The name of the array of strings is args. As we shall see later,
        this array will hold any command-line parameters passed to your application.</para>
    <para>The body of a method is, once again, defined in a block delimited by curly brackets. The
        body (i.e. function body) contains statements specifying the tasks which should be performed
        when the method is called. Every statement is terminated by a semicolon. In our
        <literal>HelloWorld</literal> application there is only one statement:</para>
    <para>
        <programlisting>
 System.out.println("Hi there, mate!");
    </programlisting>
    </para>
    <para>
        <literal>System.out</literal> is Java's standard output stream (usually the screen or console from whence the application was invoked).
        <literal>System.out</literal> is a standard Java object which supplies a number of services.
        One of the services is to print lines onto the standard output stream (the screen). We thus
        ask the standard output stream to print a line for us containing the text "Hi there, mate!".
        This is done by sending a <literal>println(...)</literal> message to the object <literal>System.out</literal>.</para>
    <para/>
    <xi:include href="./yourFirstApplication/comments.docbook"/>    
    <xi:include href="./yourFirstApplication/compiling.docbook"/>    
    <xi:include href="./yourFirstApplication/executing.docbook"/>    
    <xi:include href="./yourFirstApplication/obtainingJDK.docbook"/>
    <xi:include href="./yourFirstApplication/usingJDKDocumentation.docbook"/>    
</section>