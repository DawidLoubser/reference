<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.basicLanguage.programFlow.iterativeStatements">
    <title>Iterative Statements</title>
    <para>Java supplies three iterative statements, a <literal>while</literal> loop, a
        <literal>do-while</literal> loop and a<literal>for</literal> loop.</para>
    <para/>
    <section>
        <title>While Loops</title>
        <para>A while loop is used to perform a block of statements (or a single statement) while
            some or other condition is true. The syntax for a while-loop is simply</para>
        <para/>
        <para>
            <programlisting language="Java">
while (&lt;expression&gt;)
{
&lt;statements&gt;
}
</programlisting>
        </para>
        <para>While loops are used for example to read from a file while the end of the file has not
            been reached. Below we show a simple example:</para>
        <para/>
        <para>
            <programlisting language="Java">
final double xMin = 0;
final double xMax = 10;
final double step = 0.1;

double x = xMin, sum=0;

while (x &lt;= xMax)
{
    sum += x*x;
    x   += step;
}

System.out.println("Sum = " + sum);
</programlisting>
        </para>
        <para/>
    </section>
    <section>
        <title>Do-While Loops</title>
        <para>Do-while loops are similar to while loops, except that the condition for performing
            another iteration is performed at the end of the loop and hence the block of statements
            within the loop is performed at least once, even if the condition evaluates to false to
            start of with.</para>
        <para>Below we rewrite the previous example in the form which uses a do-while loop:</para>
        <para>
            <programlisting language="Java">
double x = xMin, sum=0;

do
{
    sum += x*x;
    x   += step;
}
while (x &lt; xMax);

System.out.println("Sum = " + sum);
            </programlisting>
        </para>
    </section>
    <section>
        <title>For Loops</title>
        <para>Finally, the <literal>for</literal> statement acts like a while loop, only that the
            initialization and step statements can be inserted into the loop statement itself. The
            syntax for a <literal>for</literal> loop is</para>
        <para>
            <programlisting language="Java">
 for(&lt;initialization&gt;; &lt;loop condition&gt;; &lt;step&gt;)
 {
   /* statements */
 }
</programlisting>
        </para>
        <para> Mapping out previous example onto a <literal>for</literal> loop yields:</para>
        <para>
            <programlisting>
double sum=0;

for (double x = xMin; x &lt;= xMax; x += step)
    sum += x*x;

System.out.println("Sum = " + sum);
            </programlisting>
        </para>
    </section>
    <section>
        <title>Breaking out of Blocks</title>
        <para>One can break out of a block of statements (typically an iterative block) using Java's
            <literal>break</literal> statement. This is usually not the preferred method and should
            only be used if other methods are excessively cumbersome. Mapping our example onto an
            infinite while loop with a break statement yields:</para>
        <para/>
        <para>
            <programlisting>
double x = xMin, sum=0;

while (true)
{
    sum += x*x;
    x   += step;
    if (x &gt; xMax)
        break;
}
 
 System.out.println("Sum = " + sum);
            </programlisting>
        </para>
    </section>
    
    <!-- New in Java 5 -->
    <xi:include href="iterative/forEach.docbook"/>
    
</section>