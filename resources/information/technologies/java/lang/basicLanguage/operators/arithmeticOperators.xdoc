<?xml version="1.0" encoding="UTF-8"?>
<section
    id="resources.information.technologies.java.lang.basicLanguage.operators.arithmeticOperations"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Arithmetic Operators</title>
    <para>Addition, subtraction, multiplication and division is supported via the standard
        <literal>+</literal>, <literal>-</literal>, <literal>*</literal> and <literal>/</literal>
        operators with the standard precedence levels. The operator, <literal>%</literal> is used to
        calculate the remainder (the mod) of two integral operands (<literal>11 % 4 = 3</literal>).</para>
    <para>Java also supplies the operate-and-assign operators supplied with C and C++:
        <literal>+=</literal>, <literal>-=</literal>, <literal>*=</literal>, <literal>/=</literal>
        and <literal>%=</literal>. For example, <literal>x += y</literal> is equivalent to<literal>x
            = x + y</literal>.</para>
    <para/>
    <section>
        <title role="Pre and Post Increment/Decrement Operators">Pre and Post Increment/Decrement Operators</title>
        <para>Java also defines pre and post increment/decrement operators, <literal>++</literal> and<literal>-</literal>.</para>
        <para>In the case of the pre increment operator, the operator is inserted before the
            operand. Consider, for example, the following code snippet:</para>
        <para>
            <programlisting>
int k = 3;

int l = ++k;
              </programlisting>
        </para>
        <para>After these two statements both, <literal>k</literal> and <literal>l</literal>, will
            have value <literal>4</literal>. Let us see what happens. Firstly, the pre-increment
            operator takes presedence over the assignment operator. It increments the operand,
            <literal>k</literal> and returns the result (4). The value of <literal>l</literal> is
            then set equal to the return value of the pre-increment operator.</para>
        <para>Now let us have a look at the post-increment operator. Consider the following code snippet:</para>
        <para>
            <programlisting>
 int k = 3;
 
 int l = k++;
              </programlisting>
        </para>
        <para>After these two statements <literal>k</literal> will have value 4, but
            <literal>l</literal> will have value 3. Once again, the pre-increment operator takes
            presedence over the assignment operator. It increments the operand,
            <literal>k</literal>, but returns the original value of <literal>k</literal> prior to it
            having been incremented.</para>
        <para/>
    </section>
</section>
