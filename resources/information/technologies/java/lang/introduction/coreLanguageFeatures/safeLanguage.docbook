<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Java as a &quot;safe&quot; programming language</title>
  <para>
    In languages such as <literal>C</literal> and <literal>C++</literal>, the developer is fully
    responsible for allocating and freeing computer memory for every object he creates, a delicate
    and error-prone task (with so-called <quote>memory leaks</quote> having the capability to bring down
    entire applications or event the operating system). In Java, the process knowns as <emphasis>Garbage Collection</emphasis> 
    completely and automatically manages memory. This significantly contributus to the fact that languages
    such as <literal>C</literal> are almost never used for business applications, as the complexity would be
    overwhelming.
  </para>
  <para>
    In this spirit, Java does not have <emphasis>pointers</emphasis> (which can access arbitrarily access memory), but rather
    <emphasis>references</emphasis>. They are guaranteed to access only memory which they should access (i.e. which contains
    valid Java objects). All the traditional <quote>unsafe</quote> structures, such as Arrays and character strings, are implemented in Java 
    as first-class objects, with bounds checking to prevent any type of out-of-range memory access. It is thus impossible for applications
    to interfere with each other at a memory-access level.
  </para>
  <!-- para> I think this goes under 'Security', not 'Safety'.
    Java Security Managers prevent any unsolicited direct access to protected resources 
    like files or internet connections.
  </para-->
</section>
