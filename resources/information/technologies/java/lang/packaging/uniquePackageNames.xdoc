<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.packaging.uniquePackageNames"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Creating Unique Package Names">Creating Unique Package Names</title>
  <para>
    One of the reasons for packaging is to avoid name conflicts between classes of the
    same name by locating them in different packages. Of course the package names themselves
    could still pollute the global name space. You could create a package called <literal>movie.utilities</literal>,
    and so could your neighbour.
  </para>
  <para>
    Anybody wanting to use both packages would have a problem. To avoid this, the <emphasis>de-facto</emphasis>
    standard involves using you or your company's domain name (registered with IANA). For example,
    our institution owns the domain
    <programlisting><![CDATA[
solms.co.za    
    ]]></programlisting>
  </para>
  <para>
    We now use this (in reverse form, from most to least significant) as the base of our package
    names. For example, all our packages start with:
    <programlisting><![CDATA[
za.co.solms
      ]]></programlisting>
    such as
    <programlisting><![CDATA[
za.co.solms.lang.annotations
za.co.solms.util.collections
za.co.solms.xml.schema.visualisation
      ]]></programlisting>
  </para>
  <note>
    <para>
      At first, such long package names may seem cumbersome. Modern development tools, such as <emphasis>Eclipse</emphasis>,
      however typically take care of all packaging tasks (such as assigning to, and importing).
    </para>
  </note>
</section>