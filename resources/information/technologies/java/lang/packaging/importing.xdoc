<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.packaging.importing"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Importing from Packages">Importing from Packages</title>
  <para>
    In order to make all classes within a particular package available for use, we use the <literal>import</literal>
    statement. This effectively instructs the compiler where to go and look for classes to which we
    simply refer to by name (unqualified). For example:
    <programlisting><![CDATA[
import java.util.*;
    ]]></programlisting>
  </para>
  <para>
    We can also import a single class from a package (in this case, <literal>ArrayList</literal>, a
    Java Collections Framework class to provide better list functionality than
    standard Java arrays do).
    <programlisting><![CDATA[
import java.util.ArrayList;
    ]]></programlisting>
  </para>
  <para>
    Alternatively we can resolve a class
    by providing a complete name and package context of a class when we use it: 
    <programlisting><![CDATA[
java.util.ArrayList myFriends = new java.util.ArrayList();
    ]]></programlisting>
  </para>
  <para>
    We can now use a combination of import statements, as well as full qualification, to
    resolve name conflicts:
    <programlisting><![CDATA[
import java.util.*;
import java.io.*;

public static void main(String[] args)
{
  File myFile = new File("fileName.txt");          // from java.io
  ArrayList myFriends = new ArrayList();           // from java.util
      
  za.co.solms.io.File f = new za.co.solms.io.File("../../foo.txt");
...
}
      ]]></programlisting>
    This may be because an independant class, called <quote>File</quote>, exists,
    which either has a different meaning, or improved functionality.
  </para>
</section>