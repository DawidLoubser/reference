<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns7089:section xmlns:ns7089="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.lang.packaging.importing">
  <ns7090:title xmlns:ns7090="http://docbook.org/ns/docbook">Importing from Packages</ns7090:title>
  <ns7091:para xmlns:ns7091="http://docbook.org/ns/docbook">
    In order to make all classes within a particular package available for use, we use the <ns7092:literal xmlns:ns7092="http://docbook.org/ns/docbook">import</ns7092:literal>
    statement. This effectively instructs the compiler where to go and look for classes to which we
    simply refer to by name (unqualified). For example:
    <ns7093:programlisting xmlns:ns7093="http://docbook.org/ns/docbook">
import java.util.*;
    </ns7093:programlisting>
  </ns7091:para>
  <ns7094:para xmlns:ns7094="http://docbook.org/ns/docbook">
    We can also import a single class from a package (in this case, <ns7095:literal xmlns:ns7095="http://docbook.org/ns/docbook">ArrayList</ns7095:literal>, a
    Java Collections Framework class to provide better list functionality than
    standard Java arrays do).
    <ns7096:programlisting xmlns:ns7096="http://docbook.org/ns/docbook">
import java.util.ArrayList;
    </ns7096:programlisting>
  </ns7094:para>
  <ns7097:para xmlns:ns7097="http://docbook.org/ns/docbook">
    Alternatively we can resolve a class
    by providing a complete name and package context of a class when we use it: 
    <ns7098:programlisting xmlns:ns7098="http://docbook.org/ns/docbook">
java.util.ArrayList myFriends = new java.util.ArrayList();
    </ns7098:programlisting>
  </ns7097:para>
  <ns7099:para xmlns:ns7099="http://docbook.org/ns/docbook">
    We can now use a combination of import statements, as well as full qualification, to
    resolve name conflicts:
    <ns7100:programlisting xmlns:ns7100="http://docbook.org/ns/docbook">
import java.util.*;
import java.io.*;

public static void main(String[] args)
{
  File myFile = new File("fileName.txt");          // from java.io
  ArrayList myFriends = new ArrayList();           // from java.util
      
  za.co.solms.io.File f = new za.co.solms.io.File("../../foo.txt");
...
}
      </ns7100:programlisting>
    This may be because an independant class, called <ns7101:quote xmlns:ns7101="http://docbook.org/ns/docbook">File</ns7101:quote>, exists,
    which either has a different meaning, or improved functionality.
  </ns7099:para>
</ns7089:section>