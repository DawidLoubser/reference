<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.classes.basic.classMembers.utilityClasses">
  <title>Utility Classes </title>
  <para>
    A utility class is one which is never instantiated and simply serves as a container
    for class services. In effect one defines a stand-alone class library.
  </para>
  <para>
    Consider, for example, Java's <literal>Math</literal> class defined
    in the <literal>java.lang</literal> package. It contains a collection of
    commonly used mathematical functions like the square root, trigonometric functions,
    exponentiation and logarithmic functions. If you have a look at the class (it suffces to
    have a look at the documentation), you will see that it simply contains static methods,
    i.e. class services for the individual functions.
    <programlisting language="Java">
public class Math
{
   public static double sqrt(double x) {...}
 
   public static double exp(double x) {...}
 
   public static double sin(double x) {...}
 
   ...
}
    </programlisting>
  </para>
  <para>
    These services are of course requested by sending the appropriate message to the 
    <literal>Math</literal> class, for example
    <programlisting>
double y = 1.2345;
 
double exp_y = Math.exp(y);
    </programlisting>
  </para>
  <para/>
  <para>
    These class methods are particularly efficient because they are linked statically (i.e. at
    compile-time) while most instance methods are linked dynamically (i.e. at run-time) in
    order to support polymorphism.
  </para>
  <para>
    Since a utility class is simply a holder for quasi-stand-alone functions, it does not
    make sense to instantiate the class. Java, however, automatically writes a default
    constructor for you in case you do not write a constructor at all. This is rather a
    nuisance. To disable the default constructor you either declare the whole class abstract
    or if that goes against your aesthetics, you simply declare a private default constructor.
  </para>
</section>