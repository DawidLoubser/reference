<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.classes.basic.usingClasses.sendingMessages">
        <title>Sending a Message to an Object</title>
  <para>
    Object offer services. For example instances of our <literal>Account</literal> 
    class offer the services to credit and debit the
    account as well as services for querying the account number or balance. 
    In object-oriented development services are requested by sending service request messages
    to service providers, <abbrev>i.e.</abbrev> to an object which offers such a service.
    This approach is quite different from calling functions as will be appreciated once polymorphism has
    been discussed.
  </para>
  <para>
    To send a message to an object we need to have a reference for that object. It is
    like when you want to send a letter or e-mail to somebody -- you need to know their
    address. Consider, below we make use of the <literal>credit()</literal>
    service of an account 
   <programlisting language="Java">
acc1.credit(200);
    </programlisting>
     by sending a <literal>credit(200)</literal> message to that account which is referenced
      by<literal>acc1</literal>.
  </para>
  <para>
    The <literal>credit()</literal> service does not return anything. It
    simply performs some operation and returns. Other services might return something to the
    client, i.e. to the point from where the service is requested. For example, the 
    <literal>getBalance()</literal> service returns a double:
   <programlisting language="Java">
double myBalance = acc1.getBalance();
</programlisting>
   </para>
</section>