<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.classes.basic.this.callingOneConstructorFromAnother">
  <title>Calling one Constructor from Another</title>
  <para>
    Consider again the listing of the <literal>Account1</literal> class
    in the previous section. In the first constructor
    <programlisting language="Java">
public Account1(String accountNumber)
{
this( accountNumber, 0.0 );
}
    </programlisting>
    we call the second constructor, sending a balance of zero.
    This prevents us form having to duplicate the set-up code
    in the constructors. The second constructor performs the
    actual state set-up work:
    <programlisting language="Java">
public Account1(String accountNumber, double initialBalance)
{
  accountNo = accountNumber;
  balance   = initialBalance;
}
    </programlisting>
    which creates an account with a certain initial balance we have as first statement the line
  </para>
  <para>
    Here, <literal>this</literal> refers to the constructor of the same class which takes
    a<literal>String</literal> and a <literal>double</literal> as arguments. Calling one constructor from
    another reduces code duplication and makes it easier to have a consistent behaviour for
    your classes.
  </para>
</section>