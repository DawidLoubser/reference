<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.classes.basic.definingClasses.constructors"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title role="Constructors">Constructors</title>
  <para>
    Constructors enable the user of a class to create instances of that class.
    Constructors are defined as methods which have the same name as the class itself and no
    return value, not even <literal>void</literal>.
  </para>
  <para>
    Our <literal>Account</literal> class has two constructors, one
    receiving the account number as argument and the second receiving the account number and
    initial balance as arguments. The former assumes the initial balance of the account to be zero.
  </para>
  <para>
    Note that we have two methods with the same name but with different arguments. This is
    called method overloading. Java identifies a method not only by its name but by its name,
    argument-types and return-value-type. If any of these are different, it is a different method.
  </para>
  
  <section>
    <title role="Automatic Default Constructor">Automatic Default Constructor</title>
    <para>
      If you do not write a constructor at all, Java will go ahead and write a default
      constructor for. A default constructor is a constructor which takes no arguments.
      Consider the following class:
<programlisting><xi:include parse="text" href="../../src/Greeter.java"/></programlisting>    
    </para>

    <para>
      We have not defined any constructor whatsoever. Hence, the obliging Java compiler will
      write a default constructor with an empty body for you. It looks like this:
      <programlisting><![CDATA[
public Greeter() {}
      ]]></programlisting>
    </para>
    <para>
      To convince ourselves that this is
      indeed the case, let us write some client code which uses this default constructor:
<programlisting><xi:include parse="text" href="../../src/GreeterTest.java"/></programlisting>    
    </para>

    <para>
      Compiling and running the application yields the following output:
      <programlisting><![CDATA[
Hi there, mate.
Hi there, mate.
Hi there, mate.
      ]]></programlisting>
    </para>
    <para>
      However,
      note that the rules for the automatic generation of the default constructor are as
      follows: Java will generate one for you if and only if there is no other constructor
      defined for the class. Thus, if some years later somebody adds another constructor to
      the class, as is shown below
<programlisting><xi:include parse="text" href="../../src/Greeter2.java"/></programlisting>    
    </para>

    <para>
      the default constructor is no longer automatically created resulting in a lot of errors
      in all the client code. Note that the the errors are not introduced directly by the
      additions, only because the default constructor is no longer automatically generated by
      the compiler.
    </para>
    <para>
      To avoid this situation we suggest that you should always write a default
      constructor if you want one and if you don't want to allow clients to instantiate your
      class you disable it. This is often done in utility classes which are not meant to be instantiated
      but simply act as function wrappers and in classes which should not be instantiated through
      constructors (like singletons).
    </para>
  </section>
</section>