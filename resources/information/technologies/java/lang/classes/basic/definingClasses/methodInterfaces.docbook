<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.lang.classes.basic.definingClasses.methodInterfaces">

  <title>Defining services</title>
  
  <indexterm>
    <primary>services</primary>
    <secondary>defining</secondary>
  </indexterm>
  
  <para>
    A service (often called method) interface or header specifies how users can request
    the service. The interface of a service is defined by 
    
    <itemizedlist>
      <listitem>
        <para>the name of the service,</para>
      </listitem>
      <listitem>
        <para>the types and order of any arguments which must be supplied by the client, and</para>
      </listitem>
      <listitem>
        <para>the type of the return value (if any).</para>
      </listitem>
    </itemizedlist>
      The syntax for a service interface definition is
    <programlisting>
&lt;accessLevel&gt; &lt;ReturnType&gt; &lt;serviceName&gt;(Arg1Type arg1Name, Arg2Type arg2Name, ...)
    </programlisting>
  </para>
  
  <section>
      <title>Method names</title>
      <para>The method name should start with a lower case letter with word boundaries
      capitalised. Otherwise the same rules hold as those for all other Java identifier names. 
    </para>
  </section>
  
  <section>
      <title>Access levels</title>
      <para>
      For the time being we shall look at only two access levels, <literal>public</literal> 
      and <literal>private</literal>. The
      former specifies that a class member is publically accessible from anywhere. The latter
      specifies that a member can only be accessed from within the class itself. The other two access 
      levels in Java (<literal>package</literal> and <literal>protected</literal>) will be covered in 
      greater detail later.
    </para>
  </section>
  
  <section>
      <title>Return types</title>
      <para>The return type can be any basic data type or user-defined data type or <literal>void</literal>. 
      The latter means that nothing is returned. User
      defined data types are really classes. 
    </para>
      <para>
      Consider our <literal>Account</literal> class. The <literal>credit()</literal> and <literal>debit()</literal>
      methods of our account class return nothing while the <literal>getBalance()</literal> method returns 
      a <literal>double</literal> and the <literal>getAccountNumber()</literal> method returns a <literal>String</literal>.
    </para>
  </section>
  
  <section>
      <title>Method Arguments</title>
      <para>
      The method arguments are listed after the method name within round brackets. For
      each argument one specifies the data type (primitive or user-defined) followed by the
      local variable name.
    </para>
      <para>
      The <literal>credit()</literal> and <literal>debit()</literal> methods in the <literal>Account</literal> class 
      both receive a <literal>double</literal> as argument and the local variable name for the
      method is in both cases <literal>amount</literal>.
    </para>
      <para>
      The query methods, <literal>getAccountNumber()</literal> and
      <literal>getBalance()</literal> do not take any arguments but return
      a <literal>String</literal> and <literal>double</literal> respectively.
    </para>
  </section>
</section>