<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.ooLanguage.innerClasses.definingAndUsingInnerClasses"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  
    <title role="Defining and using Inner Classes">Defining and using Inner Classes</title>

<para>Consider first the following simple example. A book has a classification
which encapsulates the ISBN number and the shelf position. Assume the
latter is a function of the shelf position and the ISBN number.</para>

<para>Only books should have permission to set up their own classification. hence
book classifications should only be created from within the book class
(or one of the more specialized book classes, <abbrev>i.e.</abbrev> from within one of
the subclasses of <emphasis role="verb">Book</emphasis>). We thus define <emphasis role="verb">Classification</emphasis> as an
inner class of <emphasis role="verb">Book</emphasis>:
<programlisting>
<xi:include parse="text" href="../source/Book.java"/>
</programlisting>
</para>    
<para>Being an inner class, it has access to all the members (methods and data
fields) of the outer class within which it is defined. For example,
within the <emphasis role="verb">Classification</emphasis> class we directly acces the author
data field of the book class in which it is defined.</para>

<para>If we run the following little main program
<programlisting>
<xi:include parse="text" href="../source/BookTest.java"/>
</programlisting>
</para>
<para>we obtain the following output

<programlisting><![CDATA[
William Doors: Plug and Pray (Will-1128 -> ISBN 0-7803-1128-0)
]]></programlisting>
</para>    
</section>
