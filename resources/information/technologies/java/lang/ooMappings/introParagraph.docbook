<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns0:para xmlns:ns0="http://docbook.org/ns/docbook"
          xml:id="resources.information.technologies.java.lang.ooMappings.introParagraph"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    Java, like most of the current-object oriented programming languages, only has intrinsic support
    for
    <ns1:itemizedlist xmlns:ns1="http://docbook.org/ns/docbook">
        <ns2:listitem xmlns:ns2="http://docbook.org/ns/docbook">
            <ns3:formalpara xmlns:ns3="http://docbook.org/ns/docbook">
                <ns4:title xmlns:ns4="http://docbook.org/ns/docbook">dependency</ns4:title>
                <ns5:para xmlns:ns5="http://docbook.org/ns/docbook">Typically implemented by providing an object with a
                    reference to another
                    object, which it does not maintain after using it.
                </ns5:para>
            </ns3:formalpara>
        </ns2:listitem>
        <ns6:listitem xmlns:ns6="http://docbook.org/ns/docbook">
            <ns7:formalpara xmlns:ns7="http://docbook.org/ns/docbook">
                <ns8:title xmlns:ns8="http://docbook.org/ns/docbook">association</ns8:title>
                <ns9:para xmlns:ns9="http://docbook.org/ns/docbook">By maintaining an object reference to another object
                    as part of
                    the state of an object (i.e. an object attribute).
                </ns9:para>
            </ns7:formalpara>
        </ns6:listitem>
        <ns10:listitem xmlns:ns10="http://docbook.org/ns/docbook">
            <ns11:formalpara xmlns:ns11="http://docbook.org/ns/docbook">
                <ns12:title xmlns:ns12="http://docbook.org/ns/docbook">specialisation</ns12:title>
                <ns13:para xmlns:ns13="http://docbook.org/ns/docbook">By one class extending (sub-classing) another
                    class.
                </ns13:para>
            </ns11:formalpara>
        </ns10:listitem>
        <ns14:listitem xmlns:ns14="http://docbook.org/ns/docbook">
            <ns15:formalpara xmlns:ns15="http://docbook.org/ns/docbook">
                <ns16:title xmlns:ns16="http://docbook.org/ns/docbook">realisation</ns16:title>
                <ns17:para xmlns:ns17="http://docbook.org/ns/docbook">By implementing interfaces.</ns17:para>
            </ns15:formalpara>
        </ns14:listitem>
    </ns1:itemizedlist>

    There is no built-in support (at basic language level) for the
    <ns18:emphasis xmlns:ns18="http://docbook.org/ns/docbook">aggregation</ns18:emphasis>
    and
    <ns19:emphasis xmlns:ns19="http://docbook.org/ns/docbook">composition</ns19:emphasis>
    relationships. These are, however, two very important
    and commonly-used relationships at a design level, and they each prescribe well-defined
    rules and behaviour - this needs to be coded into the class implementations by developers.
    <ns20:note xmlns:ns20="http://docbook.org/ns/docbook">
        <ns21:para xmlns:ns21="http://docbook.org/ns/docbook">
            This poses a significant development and maintenance overhead, as significantly more
            code needs to be developed and maintained. Furthermore, leaving the implementation to
            individual developers introduces the risk that the relationships are not always
            correctly implemented.
        </ns21:para>
        <ns22:para xmlns:ns22="http://docbook.org/ns/docbook">
            With Java 5 one can use annotations to effectively extend the language itself, by introducing further
            metadata and meaning to code. One could thus, in principle, create annotations such as<ns23:literal
                xmlns:ns23="http://docbook.org/ns/docbook">@Association</ns23:literal>,
            <ns24:literal xmlns:ns24="http://docbook.org/ns/docbook">@Aggregation</ns24:literal>
            and<ns25:literal xmlns:ns25="http://docbook.org/ns/docbook">@Composition</ns25:literal>, and apply
            them to the relevant fields. The appropriate code could then be inserted either at source code level by a
            suitable pre-processor, or at byte code level by a class loader which understands these annotations.
            This, however, remains an ongoing area of study, and developers have to manually code the behaviour at the
            present time.
        </ns22:para>
    </ns20:note>
</ns0:para>