<?xml version="1.0" encoding="UTF-8"?>
<para id="resources.information.technologies.java.lang.ooMappings.introParagraph"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  
  Java, like most of the current-object oriented programming languages, only has intrinsic support
  for
  <itemizedlist>
    <listitem>
      <formalpara>
        <title>dependency</title>
        <para>Typically implemented by providing an object with a reference to another
        object, which it does not maintain after using it.</para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>association</title>
        <para>By maintaining an object reference to another object as part of
        the state of an object (i.e. an object attribute).</para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>specialisation</title>
        <para>By one class extending (sub-classing) another class.</para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>realisation</title>
        <para>By implementing interfaces.</para>
      </formalpara>
    </listitem>
  </itemizedlist>
  
  There is no built-in support (at basic language level) for the <emphasis>aggregation</emphasis> 
  and <emphasis>composition</emphasis> relationships. These are, however, two very important
  and commonly-used relationships at a design level, and they each prescribe well-defined
  rules and behaviour - this needs to be coded into the class implementations by developers.
  <note>
    <para>
      This poses a significant development and maintenance overhead, as significantly more
      code needs to be developed and maintained. Furthermore, leaving the implementation to
      individual developers introduces the risk that the relationships are not always 
      correctly implemented.  
    </para>
    <para>
      With Java 5 one can use annotations to effectively extend the language itself, by introducing further
      metadata and meaning to code. One could thus, in principle, create annotations such as <literal><![CDATA[@Association]]></literal>,
      <literal><![CDATA[@Aggregation]]></literal> and <literal><![CDATA[@Composition]]></literal>, and apply
      them to the relevant fields. The appropriate code could then be inserted either at source code level by a
      suitable pre-processor, or at byte code level by a class loader which understands these annotations.
      This, however, remains an ongoing area of study, and developers have to manually code the behaviour at the
      present time.
    </para>
  </note>
</para>
