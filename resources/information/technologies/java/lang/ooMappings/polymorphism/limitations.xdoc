<?xml version="1.0" encoding="UTF-8"?>
  <section id="resources.information.technologies.java.lang.ooMappings.polymorphism.limitations"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Java's limitations on polymorphism</title>
    <para>
      Java supports a limited form of polymorphism which enables callers to
      abstract from any particular realization of a service provider (using either subclassing or
      preferably interfaces). This is achieved via run-time binding which links the method for that
      particular service provider from which the service is requested at run time.
    </para>
    
    <section>
      <title>Lack of polymorphism on message arguments</title>
      <para>
        Java, like most C++ derived languages, does not support polymorphism on message arguments,
        <abbrev>i.e.</abbrev> there is no dynamic binding (run-time linking) for different method
        argument types.
      </para>
      <para>
        More pure object oriented technologies like UML, Smalltalk, ... do assume polymorphism on
        message arguments, though. This is, in our opinion, one of the more severe drawbacks of the
        current Java language and results in messy implementations (look, for example, at any Java
        implementation of the classical Visitor pattern).
      </para>
      
      <section>
        <title>Processing events at various levels of abstraction</title>
        <para>
          One of the consequences of lack of polymorphism on message arguments is that it becomes
          messy to process events at various levels of abstraction. Thus, if we want to register to
          receive from some event source a particular type of event which may have various
          specializations, then we would have one event handler service which processes such events.
        </para>
        <para>
          Within the event handler we would have to inspect the type of event before deciding how we
          would process it. If we had polymorphism on message arguments we could have an event handler
          object which would have different event handler services for the various event
          specializations:
          <programlisting><![CDATA[
class EventHandler
{
   public void processWindowEvent(WindowEvent event) {...}
            
   public void processWindowEvent(WindowClosingEvent event) {...}           
            
   public void processWindowEvent(WindowSizingEvent event) {...}           
            
   public void processWindowEvent(WindowHideEvent event) {...}           
}            
            ]]></programlisting>
          In this example <literal>WindowClosingEvent</literal>s,
          <literal>WindowSizingEvent</literal>s and <literal>WindowHideEvent</literal>s would be
          processed in their specific way, while all other window events (<abbrev>i.e.</abbrev>
          instances of <literal>WindowEvent</literal> and any further subclass of
          <literal>WindowEvent</literal> which does not have its own event handler service) would be
          handled by the generic event handler method
          <programlisting><![CDATA[
   public void processWindowEvent(WindowEvent event) {...}
            ]]></programlisting>
        </para>
      </section>
    </section>
  
  <section>
    <title>Using the command pattern</title>
    <para>
      There are several drawbacks with the normal method syntax for requesting services including:
      <itemizedlist>
        <listitem><para>
          The interface becomes brittle as it has to be changed every time a new service is added to
          a class.
        </para></listitem>
        <listitem><para>
          It is difficult to process requests at different levels of abstraction.
        </para></listitem>
      </itemizedlist>
    </para>
    <para>
      In order to address the above shortcomings, one often makes use of the command pattern. In
      this scenario the service provider provides a generic service processing commands with
      different commands processed in different ways:
      <programlisting><![CDATA[
class ServiceProvider
{
   public processRequest(Request request)
   {
        ...
   }     
}        
        ]]></programlisting>
      There would be different subclasses of <literal>Request</literal> and these special types of
      requests would be processed in different ways.
    </para>
    
    <section>
      <title>Processing requests at different levels of abstraction</title>
      <para>
        Considern the following example:
        A bank could provide a service to process <literal>LoanApplication</literal>s. There
        could be several different specializations of loan applications including, say, 
        <literal>HomeLoanApplication</literal>, 
        <literal>PersonalLoanApplication</literal>, <literal>VehicleLoanApplication</literal> and
        <literal>OverdraftAppication</literal>.
      </para>
      <para>
        We could have special ways business processes for processing, say, home and vehicle loan
        applications, while all other loan applications, no matter which, are processed in some
        default way. If we had polymorphism on message arguments we could do the following:
        <programlisting><![CDATA[
class LoanApplicationProcessor
{
 
  public LoanApplicationResult process(LoanApplication application)
  {
     ...
  }
 
  public LoanApplicationResult process(HomeLoanApplication application)
  {
     ...
  }
          
 
  public LoanApplicationResult process(VehicleLoanApplication application)
  {
     ...
  }
          
}          
          ]]></programlisting>
      </para>  
    </section>
  </section>
</section>  