<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.innerClasses.innerVersusStaticNestedClasses"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Inner classes versus static nested classes</title>
  <para>
    Static nested classes are class (static) members of the outer class while inner classes are instance
    (non-static) members of the outer class. Thus, analogous to an instance variable which exists only within the
    context of an instance of the class, an inner class instance also exists within the context of
    that class in which it is defined. 
  </para>
  
  <section>
    <title>Member accessibility</title>
    <para>
      The nested class, irrespective of whether it is a static nested or an inner class, has access
      to the private members of its nesting context. Hence an instance of a static nested class
      which exists within the outer class itself, has access to the private members of the outer class.
    </para>
    <para>
      Similarly, an inner class instance exists within the context of an instance of its outer
      class and has access to the private members of its outer class instance.
    </para>
  </section>
  
  <section>
    <title>Packaging versus scoping and encapsulation</title>
    <para>
      <emphasis>Static nested classes provide essentially a packaging construct while inner classes provide an
        encapsulation and scoping construct</emphasis>. Depending on whether your aim is improved control of
      scoping or packaging, one would choose the one or the other.
    </para>
  </section>
  
  
</section>  