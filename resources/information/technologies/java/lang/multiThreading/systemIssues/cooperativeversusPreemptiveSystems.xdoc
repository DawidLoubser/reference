<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.tecnologies.java.lang.multiThreading.systemIssues.cooperativeversusPreemptiveSystems"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
 xmlns:xi="http://www.w3.org/2001/XInclude">
 
    <title role="Cooperative versus Preemptive Systems">Cooperative versus Preemptive Systems</title>

<para>In cooperative systems a thread must yield control to the thread scheduler
before another thread can get a slice of the processing time.  When a 
currently executing thread yields control, that waiting thread which has the 
highest priority will be given control.</para>

<para>In preemptive systems, on the other hand, threads are preempted by the thread
scheduler, giving other threads a slice of the processing resources even when
the thread does not yield control. Most systems today are either preemptive 
systems (<abbrev>e.g.</abbrev> Windows NT) or use a combination of preemptive and cooperative 
multi threading (<abbrev>e.g.</abbrev> most Unix systems).</para>

<para>The advantage of preemptive systems is that they are easier to code and that
they are generally safer. They do, however, have significant overheads over
cooperative systems.</para>

<para>Cooperative systems are typically very fast. They put, however, quite a burden
on the programmer. Tasks which require a significant amount of time to complete
have to be broken up into slices between which control is given bask to the
thread scheduler.</para>
    
</section>
