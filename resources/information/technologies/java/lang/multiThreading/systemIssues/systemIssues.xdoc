<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.tecnologies.java.lang.multiThreading.systemIssues.systemIssues"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title role="System Issues">System Issues</title>

<para>Even though Java's threading support hides many of the system issues, the degree
  and efficiency with which they are implemented is largely dictated by the
  multi-threading ability of the underlying operating system. 
  If the threading support had been implemented
entirely within the Java Virtual Machine (VM), it could have been independent 
of any system issues. However, such a design would have virtually precluded 
any parallelism within the application. This is because the operating system
would see the VM as a single-threaded application (the threads would be not
visible for the operating system) and would most likely assign it to a single
processor.</para>

<para>Hence, in order to allow for true parallelism, the Java VM maps Java threads
onto OS threads. This has the consequence that threads are no longer entirely
platform independent and one has to be aware of system issues.</para>
    
    <xi:include href="concurrencyVersusParalellism.xdoc"/>
    
    <xi:include href="processesVersusThreads.xdoc"/>
    
    <xi:include href="cooperativeversusPreemptiveSystems.xdoc"/>
    
    <xi:include href="priorityMappings.xdoc"/>
    
    <xi:include href="atomicity.xdoc"/>
    
    <xi:include href="lessonsFromSystemIssues.xdoc"/>
    
</section>
