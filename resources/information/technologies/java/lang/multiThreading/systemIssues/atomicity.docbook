<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xml:id="resources.information.tecnologies.java.lang.multiThreading.systemIssues.atomicity">

  <title>Atomicity</title>

  <para> An <emphasis>atomic</emphasis> operation is one which cannot be
    interrupted by another thread. The importance of atomicity comes into
    play when one decides which blocks of code (or which services) are to
    be synchronized (<abbrev>i.e.</abbrev> protected from being
    interrupted). Statements or blocks of code which are atomic need not
    be synchronized and hence do not require the non-neglegibe overhead of
    synchronization.</para>

  <para>In Java, methods which do some computation using only local
    variables (and recall that method arguments are local variables) and
    which modify an instance attribute <emphasis>only in the last
      statement</emphasis> are regarded as atomic, i.e. they will not be
    interrupted by another thread.</para>

</section>
