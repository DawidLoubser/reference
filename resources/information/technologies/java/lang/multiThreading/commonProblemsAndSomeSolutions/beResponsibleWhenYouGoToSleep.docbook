<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xml:id="resources.information.tecnologies.java.lang.multiThreading.commonProblemsAndSomeSolutions.beResponsibleWhenYouGoToSleep">

  <title role="Be Responsible when you go to Sleep">Be Responsible when
    you go to Sleep</title>

  <para>The services <emphasis role="verb">stop()</emphasis>, <emphasis
      role="verb">suspend()</emphasis> and <emphasis role="verb"
    >resume()</emphasis> have been declared deprecated. The <emphasis
      role="verb">sleep()</emphasis> methods, on the other hand have not
    been declared deprecated with Java 2, but they can be nearly as
    dangerous. Recall that while <emphasis role="verb">wait()</emphasis>
    releases the monitor of the object for which it is called, the
      <emphasis role="verb">sleep()</emphasis> service is supplied by the
      <emphasis role="verb">Thread</emphasis> class and does not release
    any monitors automatically.</para>

  <para>If a thread which owns the monitor to a resource falls asleep
    before releasing the resource, the resource is out of commission for
    potentially a very long time. One should thus always consider
    releasing the lock on any resources owned by a thread before falling
    asleep (Allan Holub's analogy is of a person entering a bathroom,
    locking the door and falling asleep).</para>

</section>
