<?xml version="1.0" encoding="UTF-8"?>
<section
    id="resources.information.tecnologies.java.lang.multiThreading.makingGuiApplicationsLivelyThroughMultiThreading.makingGuiApplicationsLivelyThroughMultiThreading"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Making GUI Applications Responsive with Multi-Threading</title>
    <para>It is not particularly exciting for users to look at an hourglass cursor, while the
        application is apparently busy with some (from a user perspective) mysterious activity. 
        Well-written GUI applications should be responsive all the time, if for nothing else then to allow the user
        to abort the task the application is currently busy with.</para>
    <para>Furthermore, often you would want to have certain tasks run in the background so that you
        can do further activities while that task is busy.</para>
    <para>In this section we develop a simple word counter application which counts the number of
        occurances of each word in a file. The application will have several threads, one counting
        the words and populating a tree map with the words as keys and counters counting the number
        of occurances of that word as values. One execution thread will now and then grab the
        monitor for the tree map and sum up the total no of words counted thus far. Further
        execution threads will display the current count for specific words and finally the user
        interface itself is in a separate execution thread, enabling the user to query the current
        count of any other word during the counting process. Furthermore, the user can stop the word
        counting thread (as well as all the word count reporting threads) at any time. The user
      interface is shown in figure: WordCounterApp. </para>
  <!--
    <figure>
        <title>Word Counter</title>
        <graphic fileref="source/WordCounterApp.gif" align="center" />
    </figure>
    -->
    <para>The word counter application does the counting of words in a low priority background
        thread and has threads for reporting the total word count as well as the word counts for
        some individual words. </para>
    <section>
        <title>Word Counter Application</title>
        <xi:include href="theWordCounter.xdoc" />
        <xi:include href="theTotalWordCountPanel.xdoc" />
        <xi:include href="theIndividualWordCountPanels.xdoc" />
        <xi:include href="theWordCounterApplication.xdoc" />
    </section>
</section>
