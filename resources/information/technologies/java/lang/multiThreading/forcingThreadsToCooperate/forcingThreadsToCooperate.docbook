<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xml:id="resources.information.tecnologies.java.lang.multiThreading.forcingThreadsToCooperate.forcingThreadsToCooperate">

  <title>Forcing your Threads to cooperate</title>

  <para>When several threads access the same resource, they must be forced
    to collaborate. Certain resources may be used by only one thread at a
    time.</para>

  <para>The classical example is that of a railroad. The threads are the
    trains and the shared resource is the railway line. There may be
    certain sections of a track like crossing or single-track
    tunnels/bridges which only one train at a time my use. The train
    entering such a section acquires a mutual exclusion semaphore (mutex
    -- the term actually originates from this example) preventing any
    other train to enter that section of track which is protected by a
    specific monitor.</para>

  <para>Another example is that of aeroplanes. There may be multiple
    pilots, each of which can send a wide variety of messages to the
    plane. These typically include the main pilot, the co-pilot and the
    auto-pilot (<abbrev>i.e.</abbrev> the <quote>real</quote> main pilot). The object
    offering the range of services is the aircraft.</para>
  <para>Certain services like modifying the air conditioning or the
    brightness of the instruments for themselves can be processed in
    parallel. Many other services may require a mutual exclusion semaphore
    (mutex), <abbrev>i.e.</abbrev> they may only be accessed by one thread
    at a time.</para>

</section>
