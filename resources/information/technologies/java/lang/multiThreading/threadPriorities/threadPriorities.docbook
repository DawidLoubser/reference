<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xml:id="resources.information.tecnologies.java.lang.multiThreading.threadPriorities.threadPriorities">
    
    <title>Thread Priorities</title>

<para>When you spawn a new thread the spawned thread initially has the same
priority as the thread which spawned it. This priority can be modified 
via the instance service <emphasis role="verb">setPriority(int)</emphasis> the argument is an 
integer between the minimum and maximum priority. The latter are supplied
as class constants of the <emphasis role="verb">Thread</emphasis> class:
</para>
    
<para><programlisting language="Java"><![CDATA[
public final static int  MIN_PRIORITY = 1;
public final static int  MAX_PRIORITY = 10;
public final static int NORM_PRIORITY = 5;

public final void setPriority (int newPriority);
public final int  getPriority ();
]]></programlisting></para>

<para>Since the <emphasis role="verb">setPriority()</emphasis> and <emphasis role="verb">getPriority()</emphasis> methods are
instance methods, the currently executing thread has to send these
messages to the <emphasis role="verb">Thread</emphasis> object from which the thread was launched.</para>

<para>In general, higher priority threads preempt lower priority threads 
immediately, while lower priority threads hardly ever preempt higher
priority threads. The latter only happens when Java's thread scheduler
gets the impression that some of the lower priority threads are starving
(do not receive any processor resources at all).</para>

    <para>
The above, however, is not 100% platform-independent: We have seen that some
systems like Windows NT perform priority mapping, and allow for priority
boosting. This results in you not being able to rely on thread priorities
and the safest is to restrict yourself to maximum, minimum and normal
priorities.</para>
    
</section>