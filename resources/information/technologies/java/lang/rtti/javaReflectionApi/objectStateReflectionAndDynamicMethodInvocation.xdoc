<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.lang.rtti.javaReflectionApi.objectStateReflectionAndDynamicMethodInvocation"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/dist/resources/components/za/co/solms/solmsDoc/schema/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title role="Object State Reflection and Dynamic Method Invocation">Object State Reflection and Dynamic Method Invocation</title>

<para>Once we have a class descriptor for a class we can query the fields and
methods. Each field can be further queried for its modifiers. Furthermore,
we can use the <emphasis role="verb">field.get(Object o)</emphasis> service to request the value
of that field for a specified object. Note, however, that we are still
subjected to the standard access control, <abbrev>i.e.</abbrev> that we cannot violate
the <emphasis role="verb">private</emphasis>, <emphasis role="verb">package</emphasis> or <emphasis role="verb">protected</emphasis> access restrictions.
</para>
<para>Furthermore, once we have a method as an object, we can invoke that method
on an object via <emphasis role="verb">method.invoke(Object object, Object[] parameters)</emphasis>.
</para>
<para>In the following example we
<itemizedlist>
  <listitem><para>query an object for all its methods</para></listitem>
  <listitem><para>identify the query methods adhering to the JavaBeans naming convention</para></listitem>
  <listitem><para> and the published state of the object (<abbrev>i.e.</abbrev> the state published via
        the getter methods.</para></listitem>
</itemizedlist>
    </para>
<para>
<programlisting>
<xi:include parse="text" href="../source/QueryState.java"/>
</programlisting>    
</para>
</section>
