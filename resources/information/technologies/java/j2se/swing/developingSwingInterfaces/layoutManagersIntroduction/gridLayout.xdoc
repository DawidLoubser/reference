<?xml version="1.0" encoding="UTF-8"?>
<section
    id="resources.information.technologies.java.j2se.swing.developingSwingInterfaces.layoutManagersIntroduction.gridLayout"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="GridLayout">GridLayout</title>
    <para>This layout places components into grid positions on a regular grid with a number of rows
        and columns -- see figure reffigTestLayout. This layout is particularly useful for a panel
        of buttons, e.g. for the button panel of a calculator. Components are added from left to
        right and then from top to bottom. Components can only occupy a single grid position and
        must be inserted in the correct order. Grid positions cannot be skipped (except by
        inserting, say, an empty label into a grid position).</para>
    <para>The result is illustrated in figure. We used the code in section and replaced the code
        between the asterisk lines with the following small example: </para>
    <para>
        <programlisting>
setTitle("Testing GridLayout");
getContentPane().setLayout(new GridLayout(3,2));
getContentPane().setBackground(Color.white);
getContentPane().add(new JButton("button 1"));
getContentPane().add(new JButton("button 2"));
getContentPane().add(new JButton("button 3"));
getContentPane().add(new JButton("button 4"));
getContentPane().add(new JButton("button 5"));
        </programlisting>
    </para>
    <para> In the above example, we requested 3 rows and 2 columns. One can optionally specify only
        the number of rows or only the number of columns (one of the two must always be specified).
        <literal>GridLayout</literal> will adjust the free parameter (e.g. the number of columns)
        according to the number of components in the container. For example, if you specify 3 rows
        and leave the number of columns unspecified, and if you then add 7 components to the
        container, 4 rows will be used. To leave the number of rows or columns unspecified we set
        the corresponding argument to zero. For example,</para>
    <para/>
    <para>
        <programlisting>
getContentPane().setLayout(new GridLayout(0,2));
        </programlisting>
    </para>
    <para>would have specified that we would like two columns and that the number of rows should be
        determined according to the number of components. One can also request horizontal and
        verytical spacing betweens the components by supplying these as third and fourth arguments
        to the <literal>GridLayout</literal> constructor. For example, in the following line</para>
    <para/>
    <para>
        <programlisting>
getContentPane().setLayout(new GridLayout(0,2,10,5)); 
        </programlisting>
    </para>
    <para>we request 10 pixels for the horizontal gap and 5 pixels for the vertical gap.</para>
    <para/>
</section>
