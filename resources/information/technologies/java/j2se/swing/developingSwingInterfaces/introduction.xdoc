<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.swing.introductions"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="Developing Swinging User-Interfaces">Developing Swinging User-Interfaces</title>
    <para>The original Java user interface library, the Abstract Windows Toolkit (AWT) is a simple,
        platform-independent class library. There were, however, many deficiencies which have been
        impressively addressed in the Java Foundation Classes (JFC) library.</para>
    <para>The JFC contains the following features: 
        <itemizedlist>
            <listitem><formalpara>
                <title>The Abstract Windows Toolkit</title>
                <para>The AWT has been
                    added to the JFC. It contains very basic components (buttons, windows, text fields, ...) and
                    its main purpose is a foundation for the swing components.</para>
            </formalpara>                
            </listitem>
            <listitem><formalpara>
                <title>The Swing Components </title>
                <para>These form a sophisticated library of GUI components including borders, buttons, checkboxes, combo boxes,
                    icons, labels, lists, list boxes, menus, menubars, menu items, popup menus, radio buttons,
                    progress bars, scroll panes and viewports, scrollbars, tabbed panes, tables, text areas,
                    text components, text fields, trees and HTML viewers. All the components are Java Beans
                    written in pure Java and all components can be navigated with your mouse as well as with
                    your keyboard.</para>
            </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Pluggable Look &amp; Feel Support</title>
                    <para>You can select from a variety of looks and feels for your user interface. It can be a platform-specific look-and-feel like Motif,
                        Windows or MacOS or a uniform look &amp; feel like the Java Look &amp; Feel. Future
                        look-and-feels may even include sound.  </para>
                </formalpara>                
            </listitem>
            <listitem><formalpara>
                <title>Java 2D</title>
                <para>This rich set of classes enabling
                    developers to easily incorporate high-quality 2D graphics, text, and images in their user
                    interfaces. It includes powerful support for line art (supporting general shapes, stroke
                    styles and coordinate transformations), text, and images. There is very extensive support
                    on the image processing side including general convolutions, edge-detection, sharpening and
                    posterization of images. Finally, Java 2D supports accurate color space definition and
                    conversion.</para>
            </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Drag &amp; Drop</title>
                    <para>Drag &amp; Drop enables data transfer both between Java
                        applications and applets as well as between native and Java applications. 
                        </para>
                </formalpara>                
            </listitem>
            <listitem><formalpara>
                <title>Accessibility API</title>
                <para>This API provides a clean interface which allows assistive technologies such as screen
                    readers, screen magnifiers, Braille displays, speech recognition systems, to interact and
                    communicate with JFC and AWT components.</para>
            </formalpara>
            </listitem>
        </itemizedlist>
        </para>
    <para>In this chapter we will revisit the container-component design framework of Java as well
        as the delegation-based event handling model introduced with Java 1.1. We shall then discuss
        the use of Swing components.</para>
    <para>Java 2 still supports the AWT components. However, in general one should use Swing
        components instead. The simplest way of transforming a AWT-based to a swing-based
        application/applet is simply to import the swing class libraries and to rename all AWT
        components by inserting a â€˜J' infront of the class names. Thus a <literal>Button</literal> 
        becomes a <literal>JButton</literal>, a <literal>TextField</literal> a <literal>JTextField</literal>
        and a <literal>Panel</literal> becomes a <literal>JPanel</literal>.
    </para>
    <para>Unlike AWT components, Swing components are implemented in pure Java (no native code).
        Even simple Swing components are much more sophisticated than their AWT counterparts (in the
    cases where there are AWT counterparts). </para>
</section>