<?xml version="1.0" encoding="UTF-8"?>
<section
    id="resources.information.technologies.java.j2se.swing.developingSwingInterfaces.buttons.toggleButtons"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="Toggle Buttons and Borders">Toggle Buttons and Borders</title>
    <para>While a press button pops up after being released, toggle buttons remain in one of two
        states until the state is modified. Both, radio buttons and check boxes are toggle buttons.</para>
    <para>Check boxes are stand-alone toggle buttons which present a binary choice to the user.
        Users may either check or uncheck the check box. A special case of a check box is the
        <literal>JCheckBoxMenuItem</literal> which is a checkbox within a menu. If one has a group
        of check boxes, one might want to weigh it up against a list box with multiple selections enabled.</para>
    <para>Radio buttons, on the other hand, occur in groups. They are mutually exclusive (only one
        radio button is checked at any time). A group of radio buttons presents the user with an
        n-ary choice. A special case of radio button is the <literal>JRadioButtonMenuItem</literal>
        which is a radio button within a menu. The choice offered by a group of radio buttons can
        often be presented more compactly in the form of a drop-down list box (choice box).</para>
    <para>We shall use the following example program, not only to demonstrate toggle buttons, but
        also to demonstrate Java's support for borders.</para>
    <para/>
    <para>
        <programlisting>
<xi:include href="./src/TestToggleButton.java" parse="text"/>  
        </programlisting>
    </para>
    <para> The resultant user interface is shown in figure below.</para>
    <figure>
        <title>Toggle Buttons</title>
        <graphic fileref="ToggleButtons.jpg"/>
    </figure>
    <para>Borders are created by the <literal>BorderFactory</literal>. The reason for this is that
        it can make certain that you dont create more than one object representing the same border
        (and borders are typically used very frequently). We use a titled border around the check
        boxes and an empty border to create a spacer between the components and the frame window.
        The radio buttons are in a panel whose border can be changed by the radio buttons
        themselves. Note that we use action events for handling the radio button state changes, but
        that we use the<literal>itemStateChanged()</literal> event for observing a change in the
        state of the check boxes. </para>
</section>
