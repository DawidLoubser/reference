<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns3930:section xmlns:ns3930="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2se.swing.developingSwingInterfaces.buttons.toggleButtons">
    <ns3931:title xmlns:ns3931="http://docbook.org/ns/docbook">Toggle Buttons and Borders</ns3931:title>
    <ns3932:para xmlns:ns3932="http://docbook.org/ns/docbook">While a press button pops up after being released, toggle buttons remain in one of two
        states until the state is modified. Both, radio buttons and check boxes are toggle buttons.</ns3932:para>
    <ns3933:para xmlns:ns3933="http://docbook.org/ns/docbook">Check boxes are stand-alone toggle buttons which present a binary choice to the user.
        Users may either check or uncheck the check box. A special case of a check box is the
        <ns3934:literal xmlns:ns3934="http://docbook.org/ns/docbook">JCheckBoxMenuItem</ns3934:literal> which is a checkbox within a menu. If one has a group
        of check boxes, one might want to weigh it up against a list box with multiple selections enabled.</ns3933:para>
    <ns3935:para xmlns:ns3935="http://docbook.org/ns/docbook">Radio buttons, on the other hand, occur in groups. They are mutually exclusive (only one
        radio button is checked at any time). A group of radio buttons presents the user with an
        n-ary choice. A special case of radio button is the <ns3936:literal xmlns:ns3936="http://docbook.org/ns/docbook">JRadioButtonMenuItem</ns3936:literal>
        which is a radio button within a menu. The choice offered by a group of radio buttons can
        often be presented more compactly in the form of a drop-down list box (choice box).</ns3935:para>
    <ns3937:para xmlns:ns3937="http://docbook.org/ns/docbook">We shall use the following example program, not only to demonstrate toggle buttons, but
        also to demonstrate Java's support for borders.</ns3937:para>
    <ns3938:para xmlns:ns3938="http://docbook.org/ns/docbook"/>
    <ns3939:para xmlns:ns3939="http://docbook.org/ns/docbook">
        <ns3940:programlisting xmlns:ns3940="http://docbook.org/ns/docbook">
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" href="./src/TestToggleButton.java" parse="text"/>  
        </ns3940:programlisting>
    </ns3939:para>
    <ns3941:para xmlns:ns3941="http://docbook.org/ns/docbook"> The resultant user interface is shown in figure below.</ns3941:para>
    <ns3942:figure xmlns:ns3942="http://docbook.org/ns/docbook">
        <ns3943:title xmlns:ns3943="http://docbook.org/ns/docbook">Toggle Buttons</ns3943:title>
        <mediaobject xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook"><imageobject><imagedata fileref="ToggleButtons.jpg"/></imageobject></mediaobject>
    </ns3942:figure>
    <ns3944:para xmlns:ns3944="http://docbook.org/ns/docbook">Borders are created by the <ns3945:literal xmlns:ns3945="http://docbook.org/ns/docbook">BorderFactory</ns3945:literal>. The reason for this is that
        it can make certain that you dont create more than one object representing the same border
        (and borders are typically used very frequently). We use a titled border around the check
        boxes and an empty border to create a spacer between the components and the frame window.
        The radio buttons are in a panel whose border can be changed by the radio buttons
        themselves. Note that we use action events for handling the radio button state changes, but
        that we use the<ns3946:literal xmlns:ns3946="http://docbook.org/ns/docbook">itemStateChanged()</ns3946:literal> event for observing a change in the
        state of the check boxes. </ns3944:para>
</ns3930:section>