<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.swing.developingSwingInterfaces.jlabels"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="JLabel">JLabel</title>
    <para>
        <literal>JLabel</literal> is useful for displaying static text or images. The following
        program shows a various labels:</para>
    <para>
        <programlisting>
<xi:include href="./src/TestLabel.java" parse="text"/>                 
        </programlisting>
    </para>
    <para> The resultant GUI is shown in figure below. The first label is a standard text label. The second label contains only an icon.
        The third label is a text label with an icon with the default placement of the two (the icon
        appears to the left of the text label). In the fourth and final label we specify both, the
        vertical and horizontal text positions, such that the text is centered under the icon. Note
        that <literal>JLabel</literal> is, like all swing components, a component and a container. </para>
    <figure>
        <title>Basic Layouts</title>
        <graphic fileref="JLabel.jpg"/>
    </figure>
    <para>Note that we use a box layout with the different components differently alligned. We
        specified left-alignment for the first, center-alignment for the second and right-alignment
        for the third label. To understand how the placement of the components comes about, we have
        drawn in diagram the dashed line around which the alignment occurs. We have also shown an
        example with only two images with the one being left aligned and the other being right-aligned.</para>
    <para>The above specifies the alignment of the components from the border layout's point of
        view. Each label has an allotted space and one can still specify the horizontal alignment
        within the space assigned for the label. This done via an additional argument to the
        constructor (we supplied <literal>JLabel.CENTER</literal>) for this argument.
        <literal>JLabel</literal> also has a method for setting the vertical alignement within the
        space assigned for the label. These alignment specifications are required when the space
        assigned to the label is more than its natural space (the required space). This is the case
        when one specifies a preferred or minimum size for the label or when one uses the grid or
        border layout managers which assign as large an area for the component as is possible.</para>
    <para>The <literal>JLabel</literal> class also supplies services for setting or querying the
        text label or the icon and for specifying a gap which should be left between the icon and
        the text label. assigned spaces.</para>
    <para>Finally note that we did not define a size for our frame window. Instead we sent the
        <literal>pack()</literal> message to this container which sets the size to the required
        size. </para>
</section>
