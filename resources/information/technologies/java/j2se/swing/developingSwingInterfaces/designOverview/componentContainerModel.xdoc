<?xml version="1.0" encoding="UTF-8"?>
<section
    id="resources.information.technologies.java.j2se.swing.developingSwingInterfaces.designOverview.componentContainerModel"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="The Component-Container Model">The Component-Container Model</title>
    <para>The central GUI object is a <literal>Component</literal> which is a displayable GUI
        object. Examples of components are <literal>Button</literal> and <literal>TextField</literal>.</para>
    <para>A <literal>Container</literal> can hold a collection of components. Examples of containers
        are <literal>Window</literal>, <literal>Panel</literal> and <literal>Applet</literal>. </para>
    <figure id="resources.information.technologies.java.j2se.swing.developingSwingInterfaces.designOverview.componentContainerModel.containerComponentModelDiagram">
        <title>Component Container Model</title>
        <graphic fileref="./ComponentContainer.jpg"/>
    </figure>
    <para>In the AWT design a <literal>Container</literal> is defined as a specialization (subclass)
        of <literal>Component</literal>. This is a classical container-component design pattern.
        The fact that a <literal>Container</literal> is a <literal>Component</literal> and that 
        it can contain further <literal>Component</literal>s has the handy consequence of being 
        able to nest containers (because a container is a component).</para>
    <para>Note that this is an example where we effectively have multiple inheritance in Java. A
        <literal>JComponent</literal> is a <literal>Component</literal> and is a
        <literal>Container</literal>. This works because the two subclasses of
        <literal>JComponent</literal> subclass each other. In general, like
        for <literal>EmployedClient</literal>, one cannot model multiple inheritance in this way.
        This is because an <literal>Employee</literal> is not necessarily a
        <literal>Client</literal> and vice versa. In the above design a <literal>Container</literal>
        is always a <literal>Component</literal> and things work out.</para>
    <para>Each container positions its components within itself according to some algorithm
        specified by a <literal>LayoutManager</literal>. </para>
</section>
