<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.tecnologies.java.j2se.java2D.drawingShapes.drawingShapes"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title role="Drawing Shapes">Drawing Shapes</title>

<para>Java 2D supplies a general <emphasis role="verb">Shape</emphasis> interface which is implemented by
a collection of standard shapes like lines, rectangles, ellipses, arcs, ...</para>

<para>The outline of 2-dimensional shapes is drawn with the current stroke of the
graphics context. One thus first creates a <emphasis role="verb">BasicStroke</emphasis> object, sets
the current stroke of the graphics context via the <emphasis role="verb">setStroke(stroke)</emphasis>
method, creates a specific <emphasis role="verb">Shape</emphasis> object and draws it via the 
<emphasis role="verb">draw(shape)</emphasis> service of the graphics context.
</para>
<para>The standard shapes supplied with Java 2D come in low and high-precision 
versions. For example, <emphasis role="verb">Rectangle2D</emphasis> is an abstract base class with
nested concrete subclasses <emphasis role="verb">Rectangle2d.Double</emphasis> and 
<emphasis role="verb">Rectangle2D.Float</emphasis> (these are static nested classes, see section
on Static Nested Classes).</para>

<para>All shapes implement the <emphasis role="verb">Shape</emphasis> interface which contains methods for 
checking for inclusion, checking for shape bounds, checking for intersection
and for obtaining a path iterator for the shape.</para>

    <section>
        <title> </title>
    <xi:include href="methodsCheckingForInclusion.xdoc"/>
    <xi:include href="methodsCheckingForIntersection.xdoc"/>
   </section> 
    <xi:include href="obtainingBoundsForAShape.xdoc"/>
    <xi:include href="obtainingPathIteratorForAShape.xdoc"/>
    <xi:include href="standardShapes.xdoc"/>
    
</section>
