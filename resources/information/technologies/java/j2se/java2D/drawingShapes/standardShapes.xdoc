<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.tecnologies.java.j2se.java2D.drawingShapes.standardShapes"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title role="Standard Shapes">Standard Shapes</title>

<para>Java 2D supports a range of standard shapes which is sufficient for most
purposes. Each of these shapes implements the <emphasis role="verb">Shape</emphasis> interface. You 
create the shape via one of its constructors, specify the stroke to be used
via the <emphasis role="verb">setStroke</emphasis> method of the graphics context and draw the shape via 
the <emphasis role="verb">draw(shape)</emphasis> service of the graphics context.</para>
<para>
The following list enumerates the standard shapes supplied with Java 2D. For
each of these shapes there is a low and high-precion implementation in the
form of <emphasis role="verb">Shape.Float</emphasis> and <emphasis role="verb">Shape.Double</emphasis> (<abbrev>e.g.</abbrev> <emphasis role="verb">Arc2D.Float</emphasis>
and <emphasis role="verb">Arc2D.Double</emphasis>).</para>
<para>
<itemizedlist>
  <listitem><formalpara><title>Point2D:</title> <para> simply a point in two dimensional space.</para></formalpara></listitem>
  <listitem><formalpara><title>Line2D: </title><para> a straight line is created by specifying the two end points.</para></formalpara></listitem>
  <listitem><formalpara><title>Rectangle2D: </title><para> a rectangle is created by specifying the top left
                       corner, the width and the height.</para></formalpara></listitem>
  <listitem><formalpara><title>Ellipse2D: </title><para> an ellipse is created by specifying the top left
                     corner, the width and the height of a bounding rectangle.</para></formalpara></listitem>
  <listitem><formalpara><title>Arc2D: </title><para> an arc is created by specifying 
              <itemizedlist>
                   <listitem><para>The coordinates of the top left corner.</para></listitem>
                   <listitem><para>The width of the full ellipse of which this arc is a 
                         partial section.</para></listitem>
                   <listitem><para>The height of the full ellipse of which this arc is 
                         a partial section.</para></listitem>
                   <listitem><para>The starting angle of the arc in degrees. </para></listitem>
                   <listitem><para>The angular extent of the arc in degrees. </para></listitem>
                   <listitem><para>The closure type for the arc. This is either
                         <emphasis role="verb">Arc.OPEN</emphasis>, <emphasis role="verb">Arc.CHORD</emphasis> or <emphasis role="verb">Arc.PIE</emphasis>.</para></listitem>
               </itemizedlist>        
                 The various closure types of arcs are illustrated in figure: Shape Test
      <xref linkend="resources.information.tecnologies.java.j2se.java2D.paintStyles.paintStyles.shapeTest_gif"/>
  </para></formalpara></listitem>
  <listitem><formalpara><title>QuadCurve2D:</title> <para> This is a quadratic parametric curve (<abbrev>i.e.</abbrev> section of 
                 a parabola). Since a parabola has three parameters (<literal><![CDATA[$y = 
                 ax^2  bx  c$]]></literal>), it is uniquely specified by three points.
                 A quad-curve is defined by the two end points and a 
                 control point. Quad curves are illustrated in figure:
                 ShapeTest.</para></formalpara></listitem>
  <listitem><formalpara><title>CubicCurve2D: </title><para> This is a cubic parametric curve (<abbrev>i.e.</abbrev> section of 
                 a cupbic polynomial). There are four parameters supplied
                 by the two end points and two further control points.</para></formalpara></listitem>
  <listitem><formalpara><title>GeneralPath: </title><para> This is a general path specified by a collection of
                 path segments each of which is either a <emphasis role="verb">Line2D</emphasis>,
                 <emphasis role="verb">QuadCurve2D</emphasis> or <emphasis role="verb">CubicCurve2D</emphasis>.</para></formalpara></listitem>
  <listitem><formalpara><title>Area: </title><para> Area is not a simple shape but a composite shape. It is
                a vehicle through which several shapes are combined
                via boolean operations. The resulting shape can be the result
                of adding two shapes, subtracting one shape from another,
                obtaining the intersection of two shapes, or performing an
                exclusive or operation on two shapes.</para></formalpara></listitem>
</itemizedlist>
</para>
<para>The exercises at the end of the chapter provide you with opportunities for
using the standard shapes.
</para>    
    <xi:include href="bezierCurves.xdoc"/>
</section>
