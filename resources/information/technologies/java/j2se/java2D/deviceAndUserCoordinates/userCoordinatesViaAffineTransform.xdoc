<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.tecnologies.java.j2se.java2D.deviceAndUserCoordinates.userCoordinatesViaAffineTransform"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    
   <title role=" User Coordinates via AffineTransform"> User Coordinates via AffineTransform</title>

<para>The AffineTransform class represents a 2D affine transform that performs a 
linear mapping from 2D coordinates to other 2D coordinates that preserves the 
"straightness" and "parallelness" of lines. Affine transformations can be 
constructed using sequences of translations, scales, flips, rotations, and 
shears. </para>

    <figure id="resources.information.tecnologies.java.j2se.java2D.deviceAndUserCoordinates.userCoordinatesViaAffineTransform.transformTest_gif">
        <title>TransformTest</title>
      <graphic fileref="Java2D/TransformTest.gif"/>
</figure>
    <para>Affine transformations.</para>
<para>
Affine transformations can be represented by $(3 \times 2)$ matrix which
transforms one coordinate system to another in the following way:
<literal><![CDATA[
\[
  \left[ \begin{array}{c} x' \\ y' \\ 1 \end{array} \right] =
  \left[ \begin{array}{cc} m_{11} & m_{12} \\ m_{21} & m_{22} \end{array}
   \right] \cdot
   \left[ \begin{array}{c} x \\ y \\ 1 \end{array} \right]
\]


%        [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
%        [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
%        [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]]]>
</literal>
</para>
<para>One can either use the general matrix representation of the affine transform
or one can use the more user friendly services for scaling, translating, 
rotating and shearing as we have done in the following listing (see also
    figure <xref linkend="resources.information.tecnologies.java.j2se.java2D.deviceAndUserCoordinates.userCoordinatesViaAffineTransform.transformTest_gif"/>). Note that 
these transformations can be applied to any graphics object including images
and fonts.
<programlisting>
<xi:include parse="text" href="TransformTest.java"/>
</programlisting>
</para>

</section>
