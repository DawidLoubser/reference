<?xml version="1.0" encoding="UTF-8"?>
<!-- @author dawidl
     @depends General TCP/IP networking -->
<section id="resources.information.technologies.java.j2se.networking.introduction.introduction"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Networking and Java</title>
    
    <para>
        From the very beginning, the standard Java support technologies has seen networking
        as a central concern. This has resulted in Java being, at its core, better equipped to do
        any type of networked communication, than almost any other language in existence.
    </para>
    <para>
        There are a few reasons for this networking convenience:
        <itemizedlist>
            <listitem>
                <para>
                    Standardised <emphasis>low-level</emphasis> networking (such as <abbrev>TCP</abbrev>, <abbrev>UDP</abbrev>)
                    implemented in a very intuitive and feature-rich manner, available on all platforms as part of the
                    Java runtime (from Cellular telephone, to Mainframe).
                </para>
            </listitem>
            <listitem>
                <para>
                    Cutting-edge <emphasis>networking-related frameworks</emphasis>, such as <emphasis>Jini</emphasis> (automatic discovery and spontaneous interaction
                    between entities), <emphasis>JavaSpaces</emphasis> (distributed / grid systems), <emphasis>Java WebStart</emphasis> (networked
                    application delivery and launching), <emphasis>RMI: Remote Method Invocation</emphasis> (published, networked objects that
                    remove the complexity of networking altogether), etc.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>A rich I/O framework</emphasis> to easily assemble complex pipelines using the <emphasis>decorator</emphasis> and 
                    <emphasis>pipes and filters</emphasis> design patterns. This abstract framework is as at home on network
                    streams, as it is on files.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>Built-in multi-threading features</emphasis> (essential, especially for networked servers) that help the developer
                    write safe, high-performance, concurrent code by making use of standard implementations for things such
                    as <emphasis>thread pools</emphasis>, <emphasis>recurring tasks</emphasis>, <emphasis>read/write locks</emphasis>,
                    etc.
                </para>
            </listitem>
        </itemizedlist>
    </para>

</section>
