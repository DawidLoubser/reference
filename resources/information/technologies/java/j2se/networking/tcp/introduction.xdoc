<?xml version="1.0" encoding="UTF-8"?>
<!-- @author dawidl
     @depends General TCP/IP networking -->
<section id="resources.information.technologies.java.j2se.networking.tcp.introduction"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Introduction</title>
    
    <para>
        The <literal>java.net.Socket</literal> and <literal>java.net.ServerSocket</literal> are the
        two primary TCP constructs in Java. A <literal>Socket</literal> represents one end of a
        bi-directional connection, and both clients and servers use the same Socket to communicate.
    </para>
    <para>
        A client typically constructs a <emphasis>Socket</emphasis> literally, and connects it to some remote address.
        A server, on the other hand, typically creates a <emphasis>ServerSocket</emphasis>, which listens
        for incoming connections. For each established connection, a new server-side <emphasis>Socket</emphasis>
        is created (already connected to the client Socket), which the server uses to obtain the <literal>Inputstream</literal>
        and <literal>OutputStream</literal> used to exchange information.
    </para>
    <note>
        <para>
            Either the client, the server, or anything in between, may cause a connection 
            to be closed (often unexpectedly). Both client and server
            should be designed with this in mind.
        </para>
    </note>
    <figure>
        <title>TCP/IP in Java (Overview)</title>
        <graphic fileref="images/tcpOverview.jpg"/>
    </figure>
    
    
</section>
