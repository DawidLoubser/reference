<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.networking.addressing.addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Addressing network entities</title>
    
    <para>
        The Java <literal>InetAddress</literal> class (in <literal>java.net</literal>) provides
        a generic representation of a network address. Instances can be created using either an
        <abbrev>IP</abbrev> address, or a host name. It can then be requested to perform a lookup
        of the corresponding representation of the address. This is typically used to establish
        a <emphasis>socket</emphasis>, or send <emphasis>UDP</emphasis> packets to, the host.
    </para>
    
    <para>
        Two subclasses, <literal>Inet4Address</literal> and <literal>Inet6Address</literal>, provide
        <literal>IPv4</literal> and <literal>IPv6</literal> functionality respectively, though one
        typically creates an address using one of the abstract factory methods in <literal>InetAddress</literal>,
        such as:
        <programlisting><![CDATA[
InetAddress myAddress = InetAddress.getByName( "myserver.com" ); 
        ]]></programlisting>
    </para>
    <para>
        In this way, java developers are abstracted from the differences between <literal>IPv4</literal> and <literal>IPv6</literal>,
        and older code should seamlessly transition to newer networked environments.
    </para>
    
    <xi:include href="hostLookup.xdoc"/>
</section>
