<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- @author Dawid Loubser --><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="resources.information.technologies.java.j2se.io.newIO.charsets.introduction">
    
    <title>Introduction</title>    
    <para>
        In Java, a character set is a mapping between Unicode characters (or a subset of them) and bytes. 
        The <literal>java.nio.charset</literal> package of NIO provides facilities for identifying character 
        sets and providing encoding and decoding algorithms for new mappings.
    </para>
    <para>
        The primary purpose of the <emphasis>charset</emphasis> package is to map between <literal>bytes</literal>
        (usually in a ByteBuffer) which represent encoded text, and <emphasis>16-bit Unicode Text</emphasis> (also
        called UTF-16) which represents characters and glyphs for all the known languages. In the early days of
        computing, certain character encodings could be assumed, e.g. <literal>ASCII</literal> or 
        <literal>EBCDIC</literal>. In the modern, internationally networked world, however, there is no telling what
        kinds of text need to be processed - everything from ISO Latin, to Chinese (which are all subsets
        of <literal>Unicode</literal>).
    </para>
    <para>
        Java is an inherently internationalized language because it is universally based on <emphasis>Unicode</emphasis>. The
        <literal>Charset</literal> and <literal>Charset[En/De]coder</literal> classes formally adds this
        support to the NIO API, which otherwise generally only caters for primitive types.
    </para>
</section>