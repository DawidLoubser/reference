<?xml version="1.0" encoding="UTF-8"?>
<!-- @author Dawid Loubser -->
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="resources.information.technologies.java.j2se.io.newIO.channels.introduction">
    
    <title>Introduction</title>
    <para>
        The existing <literal>java.io</literal> classes do not know how to read or write Buffers. 
        In Java NIO, <emphasis>Channels</emphasis> read data into Buffers and send data from Buffers. 
        Channels join Streams and Readers as a key I/O construct. A channel might be thought of as a 
        connection to some device, program, or network. At the top level, the <emphasis>java.nio.channels.Channel</emphasis> 
        interface just knows whether it is open or closed.
    </para>
    <para>
        Most Channels are safe for multi-threaded access: one thread can be blocked on an operation (such as reading), 
        while another thread can close the channel. When the channel closes, the blocked thread awakens with an exception indicating 
        that the channel closed. This is one of their distinct advantages over the low-level streams in the <literal>java.io</literal>
        package, such as <literal>FileInputStream</literal>, <literal>SocketInputStream</literal>, etc.
    </para>
</section>