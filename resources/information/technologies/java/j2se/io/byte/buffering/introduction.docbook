<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="resources.information.technologies.java.j2se.io.byte.buffering.introduction">
    
    <title>What is Buffering?</title>
    
    <para>
        A simple byte-for-byte file copy program displays dysmal performance when compared to
        the operating-system <emphasis>copy</emphasis> utilities. This is because there are many software and hardware
        layers that Java I/O operations have to pass through in order to function. (i.e. Operating System,
        BIOS, Hardware Controllers, Physical Hard Drive...). Almost all I/O operations traverse many layers,
        and the efficiency of them all can be greatly increased through buffering.
    </para>
    <para>
        Buffering increases efficiency by taking advantage of the fact that almost all devices support two
        modes of byte I/O:
        <itemizedlist>
            <listitem>
                <para>Operations that transport a single byte</para>
            </listitem>
            <listitem>
                <para>Operations that transport groups (arrays) of bytes</para>
            </listitem>
        </itemizedlist>
        Instead of traversing all the layers for every byte, buffering traverses those layers once for a group
        of bytes (the amount of which can usually be specified - the <emphasis>buffer size</emphasis>, or <literal>(n)</literal>
        for the discussion that follows). For reading, this means that <literal>(n)</literal> bytes are pre-read, even though you 
        may only want to process them byte-for-byte in your application. For writing, buffering means that the bytes are physically 
        written to the destination (in chunks of data) only after you have written <literal>(n)</literal> bytes to your ouput stream.
    </para>
</section>