<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="resources.information.technologies.java.j2se.io.byte.basicFileCopy">
    
    <title>Copying a file byte-for-byte</title>
    
    <para>
        As an example of basic byte I/O in Java (where we do not try to interpret or modify 
        the byte streams) we will write a simple file copy program, similar to your operating
        system's <literal>cp</literal> or <literal>copy</literal> command.
    </para>
    <para>
        Our program will do the following:
        <itemizedlist>
            <listitem>
                <para>Read two command-line parameters, one for source file, the other for 
                the destination</para>
            </listitem>
            <listitem>
                <para>Create two low-level File streams for input and output</para>
            </listitem>
            <listitem>
                <para>Repeatedly read a single byte from the input stream, and write the same 
                byte onto the output stream, until <literal>-1</literal> is read (which indicates
                end-of-stream)</para>
            </listitem>
            <listitem>
                <para>Expect and handle I/O errors, as well as inform the user of these</para>
            </listitem>
        </itemizedlist>        
        Below is a possible implementation of such a Copy program:
    </para>
    
    <para>
        <programlisting language="Java">
<xi:include href="src/Copy.java" parse="text"/>
        </programlisting>
    </para>
    
    <note>
        <para>
            Notice how we catch exceptions at <emphasis>different levels of abstraction.</emphasis>
            We wish to catch (and ignore) any <literal>EOFException</literal>, which indicates an
            end-of-file condition. <literal>EOFException</literal> extends ("<literal>is a</literal>")
            <literal>IOException</literal>, so we have to place the <literal>catch</literal> clause for
            it before catching any other I/O exceptions (which we do want to react on).
        </para>
        <para>
            Streams should always be closed, whether an error has occurred or not. This is done in a
            <literal>finally</literal> block. Because the stream <literal>close()</literal> services
            can yet again throw I/O exceptions, a standard technique is wrapping these statements yet
            again in <literal>try...catch</literal> blocks.
        </para>
    </note>
</section>