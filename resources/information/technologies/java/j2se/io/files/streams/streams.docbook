<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="resources.information.technologies.java.j2se.io.files.streams.streams">
    
        <title>File Streams</title>
        <para>
            <literal>FileInputStream</literal> allows the user to extract bytes from
            a file and <literal>FileOutputStream</literal> allow the user to write
            bytes to a file. Both are low-level streams, and are commonly created either 
            by specifying a file name or a file object (instance of
            <literal>java.io.File</literal>):
        </para>
        <para>
<programlisting language="Java">
public FileInputStream (String fileName);
public FileInputStream (File file);
...
</programlisting>
        </para>
        <para>
<programlisting language="Java">
public FileOutputStream (String fileName);
public FileOutputStream (File file);
 ...
</programlisting>
            File streams are straightforward implementations of <literal>java.io.InputStream</literal>
            and <literal>java.io.OutputStream</literal>, adding no significant new services.
        </para>
    <section>
        <title>Writing data to a file</title>
        <para>
            Writing data to a new file is simple using <literal>FileOutputStream</literal>: The default
            behaviour is to always start writing data to a new file (whether any data existed in the
            file already, or not). An overloaded constructor takes a <literal>boolean</literal> parameter
            <emphasis>append</emphasis>, through which can be specified that any written data should rather
            be appended to the existing data. If the file cannot be written to for any reason, a 
            <literal>java.io.IOException</literal> is thrown.
        </para>
    </section>
    
</section>