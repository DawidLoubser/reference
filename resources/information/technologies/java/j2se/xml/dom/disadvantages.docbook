<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
    xml:id="resources.information.technologies.java.j2se.xml.apis.dom.disadvantages"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Disadvantages of DOM</title>
    
  <indexterm>
    <primary>DOM</primary>
    <secondary>disadvantages</secondary>
  </indexterm>
    
    <para>
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Compromised design</title>
                    <para>
                        Because DOM is a cross-language standard with immense applicability across domains, it evolves
                        very slowly, and often takes a "lowest common denominator" approach. This means that DOM
                        does not take advantage of Java productivity features (such as Generics) to make usage more intuitive.
                        The API itself has also received a lot of criticism (also in the form of repeated attempts by the open-source
                        community to create alternatives, such as <literal>JDom</literal>, <literal>DOM4J</literal>, <literal>XOM</literal>,
                        etc) for it's non-intuitive design, and clumsy usage pattern (especially for creating new documents with deep
                        structure).
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Performance / Efficiency</title>
                    <para>
                        Though individual implementations may be tuned for good performance, the design itself
                        (in-memory tree structure), means that large documents
                        consume large amounts of memory and processing power.
                    </para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>
    
</section>
