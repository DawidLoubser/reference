<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
xml:id="resources.information.technologies.java.j2se.xml.apis.dom.overview.overview"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>DOM Overview</title>
  
  <indexterm>
    <primary>DOM</primary>
    <secondary>overview</secondary>
  </indexterm>
    
    <para>
        The <emphasis>Document Object Model</emphasis> is a W3C standard for representing
        an XML document in its entirety as an in-memory tree structure. A standard,
        object-oriented API (set of classes, interfaces, and services) is specified across
        languages, so that DOM usage is essentially identical in Java, ECMAScript (web browsers),
        C++, C#, and so forth.
    </para>
    <para>
        This is accomplished by the DOM specification being published in <literal>IDL</literal> (used
        for <abbrev>CORBA</abbrev>), a language-independent technology. Specific <emphasis>language mappings</emphasis>
        are then defined for the various languages.
    </para>
    <para>
        DOM in Java has the further advantage of being yet again an abstract, interface-driven
      API, accessed through the <literal>javax.xml.parser</literal> and <literal>org.w3c.dom</literal> packages. 
      Several DOM implementations exist,
        and the application is abstracted from these (i.e. they can be substituted at any time) by the usage of
        abstract <emphasis>factory</emphasis> methods to initialise the DOM implementation.
    </para>
    
    <section>
        <title>Typical DOM usage pattern</title>
        <para>
            Whether being used to read, write, or simply display, DOM is typically used as follows:
            <orderedlist>
                <listitem>
                    <formalpara>
                        <title>Obtain a reference to the DOM implementation</title>
                        <para>A <literal>javax.xml.parsers.DocumentBuilderFactory</literal> is typically used,
                        which can either produce <emphasis>document builders</emphasis>, or give us a direct handle
                        to the underlying <literal>DOMImplementation</literal>.</para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Construct a new document (read from stream, or construct in code)</title>
                        <para>
                            Use standard creation or parsing methods to produce a new in-memory tree, either populated
                            from existing data, or empty and ready for manipulation.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Manipulate or Navigate the document</title>
                        <para>
                            Using the DOM interfaces (<literal>Node</literal>, <literal>Element</literal>, <literal>Attr</literal>, etc)
                            elements can be navigated, modified, added, removed, or queried.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Serialize the document</title>
                        <para>Display the document, save it to file or network, or provide it as an input source
                        for another process, such as XSLT transformation.</para>
                    </formalpara>
                </listitem>
            </orderedlist>
        </para>
    </section>
    
    
</section>
