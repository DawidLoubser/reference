<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns2944:section xmlns:ns2944="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2se.security.introduction.byteCodeVerification">
    
    <ns2945:title xmlns:ns2945="http://docbook.org/ns/docbook">Byte Code Verification</ns2945:title>

<ns2946:para xmlns:ns2946="http://docbook.org/ns/docbook">The second layer in <ns2947:emphasis xmlns:ns2947="http://docbook.org/ns/docbook">Java</ns2947:emphasis>'s security model is a byte-code verification step
performed on the compiled class files as they are loaded by the class loader of
the <ns2948:emphasis xmlns:ns2948="http://docbook.org/ns/docbook">Java</ns2948:emphasis> Virtual machine. Firstly it ensures that corrupted class files do
not result an error in the <ns2949:emphasis xmlns:ns2949="http://docbook.org/ns/docbook">Java</ns2949:emphasis> interpreter itself. It also checks that  the
rules of the language are not broken. Note that it is not good enough to check this
only during compilation, because the byte code might be edited directly. Furthermore,
someone might write a compiler which omits many of these language checks (<ns2950:abbrev xmlns:ns2950="http://docbook.org/ns/docbook">i.e.</ns2950:abbrev>
checking that a reference to an object points to an object of the correct type --
that is either to the same class as the reference variable or to one of its descendants
or one of the classes which implement the interface if the reference is a reference to
an interface). This makes certain that objects cannot masquerade as object from a
different class.</ns2946:para>
    
</ns2944:section>