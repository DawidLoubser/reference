<?xml version="1.0" encoding="UTF-8"?>
<section id="esources.information.technologies.java.j2se.security.jaas.stackedAuthentication"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd">
    
    <title role="Stacked Authentication">Stacked Authentication</title>

<para>The <emphasis>LoginContext</emphasis> class also supports the notion of stacked authentication. 
In other words, an application may be configured to use more than one 
LoginModule. For example, one could configure both a Kerberos LoginModule 
and a smart card LoginModule under an application. </para>

<para>A typical caller instantiates this class and passes in a name and a 
CallbackHandler. LoginContext uses the name as the index into the 
Configuration to determine which LoginModules should be used, and 
which ones must succeed in order for the overall authentication to 
succeed. The CallbackHandler is passed to the underlying LoginModules 
so they may communicate and interact with users (prompting for a 
user name and password via a graphical user interface, for example). </para>

<para>Once the caller has instantiated a LoginContext, it invokes the login 
method to authenticate a Subject. This login method invokes the login 
method from each of the LoginModules configured for the name specified 
by the caller. Each LoginModule then performs its respective type of 
authentication (username/password, smart card pin verification, etc.). 
Note that the LoginModules will not attempt authentication retries or 
introduce delays if the authentication fails. Such tasks belong to the caller. </para>

<para>Regardless of whether or not the overall authentication succeeded, this 
login method completes a 2-phase authentication process by then calling 
either the commit method or the abort method for each of the configured 
LoginModules. The commit method for each LoginModule gets invoked if the 
overall authentication succeeded, whereas the abort method for each 
LoginModule gets invoked if the overall authentication failed. 
Each successful LoginModule's commit method associates the relevant 
Principals (authenticated identities) and Credentials (authentication 
data such as cryptographic keys) with the Subject. Each LoginModule's 
abort method cleans up or removes/destroys any previously stored 
authentication state. </para>

<para>If the login method returns without throwing an exception, then the 
overall authentication succeeded. The caller can then retrieve the 
newly authenticated Subject by invoking the getSubject method. 
Principals and Credentials associated with the Subject may be retrieved
by invoking the Subject's respective getPrincipals, getPublicCredentials, 
and getPrivateCredentials methods. </para>

<para>To logout the Subject, the caller simply needs to invoke the logout 
method. As with the login method, this logout method invokes the 
logout method for each LoginModule configured for this LoginContext. 
Each LoginModule's logout method cleans up state and removes/destroys 
Principals and Credentials from the Subject as appropriate. </para>

<para>Each of the configured LoginModules invoked by the LoginContext is 
initialized with a Subject to be authenticated, a CallbackHandler 
used to communicate with users, shared LoginModule state, and 
LoginModule-specific options. If the LoginContext was not provided 
a Subject then it instantiates one itself. </para>

<para>Each LoginModule which successfully authenticates a user updates the 
Subject with the relevant user information (Principals and Credentials). 
This Subject can then be returned via the getSubject method from the 
LoginContext class if the overall authentication succeeds. Note that 
LoginModules are always invoked from within an AccessController.doPrivileged 
call. Therefore, although LoginModules that perform security-sensitive 
tasks (such as connecting to remote hosts) need to be granted the relevant 
Permissions in the security Policy, the callers of the LoginModules do 
not require those Permissions. 
</para>
<para>A LoginContext supports authentication retries by the calling application. 
For example, a LoginContext's login method may be invoked multiple times 
if the user incorrectly types in a password. However, a LoginContext 
should not be used to authenticate more than one Subject. A separate 
LoginContext should be used to authenticate each different Subject. </para>

<para>Multiple calls into the same LoginContext do not affect the LoginModule 
state, or the LoginModule-specific options.</para>
    
</section>
