<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.security.encryption.symmetricKeyEncryption"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title role="Symmetric-Key Encryption">Symmetric-Key Encryption</title>

<para>Secret-Key or Parameter-based encryption uses a password or 
pass-phrase to generate a key for encrypting and decrypting byte streams. 
This is a symmetric key algorithm where the same key is used for
encryption and decryption. This is then the disadvantage of symmetric key
algorithms, <abbrev>i.e.</abbrev> that both sides have to have access to the same key and
that this key has to be transferred between the parties.</para>
    
<para>
However, symmetric key algorithms are still very widely used, particularly 
where the cost of cracking the key would outweigh the financial or other
benefit that can be gained from the encrypted information.</para>

<para>The Java Cryptography Extension (JCE) supports most of the common symmetric
key algorithms including
<itemizedlist>
  <listitem><formalpara><title>The Data Encryption Standard (DES)</title> <para>which uses a 56-bit secret key.</para></formalpara></listitem>
  <listitem><formalpara><title>Tripple-DES</title><para> which strengthens the DES algorithm by using 3 DES keys.</para></formalpara></listitem>
  <listitem><formalpara><title>RC2 and RC4</title><para> which can use keys up to 2048 bytes long.</para></formalpara></listitem>
  <listitem><formalpara><title>RC5</title><para> which allows the user to specify the key length.</para></formalpara></listitem>
</itemizedlist> 
</para>  

<para>Often another random value, 
called the <emphasis> salt</emphasis>, is used to increase the effort required to decrypt
a password-encrypted file. The salt and the password and the encryption
mode (encryption or decryption) are combined to create a cipher which is
the used to encrypt or decrypt a file.</para>

<para>The application listed below uses Parameter-Based Encryption to encrypt or
decrypt a byte stream (<abbrev>e.g.</abbrev> a file). The class can be used within the
context of another application or from command line. </para>

<para>The encrypter requires the input and output streams, a password and the mode
(encryption or decryption) as arguments.</para>

<para>To encrypt as file from command line you issue the command</para>

<para><programlisting><![CDATA[
java Encrypter encrypt <inputFileName> <outputFileName>
]]></programlisting></para>

<para>
You will then be asked to supply the pass-phrase or password. It will then
generate a new file which represents the encrypted version of the input file.</para>

<para>To decrypt an encrypted file you simply issue the command

<programlisting><![CDATA[
java Encrypter decrypt <inputFileName> <outputFileName>
]]></programlisting>
</para>
    
<para>Below we show a listing of the application. The main program simply gathers 
the required information (input and output streams, pass-phrase and mode)
and requests the <emphasis>encrypt</emphasis> service. The encrypter generates a cipher
from the key and a salt generated by calculating a digest for the key and
this cipher is used to encrypt or decrypt the byte stream:
<programlisting>
<xi:include parse="text" href="Encrypter.java"/>
</programlisting>
</para>
    
</section>
