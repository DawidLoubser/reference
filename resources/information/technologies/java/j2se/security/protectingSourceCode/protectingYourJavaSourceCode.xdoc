<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.security.protectingSourceCode.protectingYourJavaSourceCode"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title role="Protecting your Java Source Code">Protecting your Java Source Code</title>
    
<para>
Reverse engineering of compiled native code is typically quite difficult and
expensive because
<itemizedlist>
  <listitem><para>the compiled code is a large monolithic chunk for the entire application,</para></listitem>
  <listitem><para>the object code is usually stripped off ts symbol table such that
        variable, class and method names are obscured often referred to simply
        via their relative memory addresses,</para></listitem>
  <listitem><para>the compiled object code is very low-level and platform specific and hence
        it is difficult to extract the high-level application logic from it.</para></listitem>
</itemizedlist>
</para>    
<para>
On the other hand, Java applications and class libraries are distributed as
platform-independent byte code which contains a lot of the high-level information
contained in the source code. De compilation of byte code is much simpler and
several byte code decompilers exist. Examples of Java decompilers include
<orderedlist>
  <listitem><formalpara><title><emphasis> Mocha</emphasis></title><para> available from a number of sites.</para></formalpara></listitem>
  <listitem><formalpara><title><emphasis> JavaDis</emphasis></title> <para>available from <emphasis>www.wingsoft.com</emphasis>.</para></formalpara></listitem>
  <listitem><formalpara><title><emphasis> SourceAgain</emphasis></title><para> from <emphasis>www.ahpah.com/product.html</emphasis>.</para></formalpara></listitem>
  <listitem><formalpara><title><emphasis> DeCafe</emphasis></title><para> available from <emphasis>decafe.hypermart.net</emphasis>.</para></formalpara></listitem>
  <listitem><formalpara><title><emphasis> ClassCracker</emphasis></title><para> available from <emphasis>www.pcug.org.au/~mayon</emphasis>.</para></formalpara></listitem>
</orderedlist>
</para>    
<para>
Several approached to protecting your source code may be followed including:
<itemizedlist>
  <listitem><para>Compiling Java to native code.</para></listitem>
  <listitem><para>Localizing sensitive code on a server so that clients cannot access the 
        byte code.</para></listitem>
  <listitem><para>Using encryption/decryption.</para></listitem>
  <listitem><para>Using code obfuscators.</para></listitem>
</itemizedlist>
</para>
<para>Below we shall look at each of these weighing up the relative advantages and 
disadvantages.</para>
    
    <xi:include href="compilingToNativeCode.xdoc"/>
    
    <xi:include href="localizingSensitiveCodeOnTheServerSide.xdoc"/>
    
    <xi:include href="usingByteCodeEncryptionDecryption.xdoc"/>
    
    <xi:include href="codeObfuscators.xdoc"/>
</section>
