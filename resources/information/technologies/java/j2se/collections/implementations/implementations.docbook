<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns1156:section xmlns:ns1156="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.j2se.collections.implementations.implementations">
    <ns1157:title xmlns:ns1157="http://docbook.org/ns/docbook">Implementations</ns1157:title>
    <ns1158:para xmlns:ns1158="http://docbook.org/ns/docbook">Java 2 supplies a concrete implementation for the framework with
        concrete collection, iterator, and algorithms classes (in the <ns1159:literal xmlns:ns1159="http://docbook.org/ns/docbook">java.util</ns1159:literal> 
        package). The implementations are robust and very efficient.
    </ns1158:para>

    <!-- Table removed because it did not add much value vs. the complexity of converting it in time. This sections 
    needs to be reworked though -->
    
    <!--para>The following table lists the concrete implementations of the
        collection interfaces discussed in the previous sections. 
    </para-->
    
    <ns1160:para xmlns:ns1160="http://docbook.org/ns/docbook">Note that not all interfaces are implemented in all data structures.
        The omitted implementations are largely superfluous and in some
        instances don't even make sense. For example, it would not make sense
        implementing the <ns1161:literal xmlns:ns1161="http://docbook.org/ns/docbook">List</ns1161:literal> interface as a tree, because 
        a list requires indexed element access which is not practical for a tree.
    </ns1160:para>
    <ns1162:para xmlns:ns1162="http://docbook.org/ns/docbook">Note also that the original Java collections, 
        <ns1163:literal xmlns:ns1163="http://docbook.org/ns/docbook">Vector</ns1163:literal> and <ns1164:literal xmlns:ns1164="http://docbook.org/ns/docbook">Hashtable</ns1164:literal>, have been extended 
        to fit in the Java Collection Framework by implementing the <ns1165:literal xmlns:ns1165="http://docbook.org/ns/docbook">List</ns1165:literal> 
        and <ns1166:literal xmlns:ns1166="http://docbook.org/ns/docbook">Map</ns1166:literal> interfaces respectively.
    </ns1162:para>
    <ns1167:para xmlns:ns1167="http://docbook.org/ns/docbook">
        Using these concrete collection classes should be largely restricted
        to using the services specified in the interfaces they implement. Note
        that some of the constructors of the sorted collections (<ns1168:literal xmlns:ns1168="http://docbook.org/ns/docbook">TreeSet</ns1168:literal> and <ns1169:literal xmlns:ns1169="http://docbook.org/ns/docbook">TreeMap</ns1169:literal>) 
        take a <ns1170:literal xmlns:ns1170="http://docbook.org/ns/docbook">Comparator</ns1170:literal> as one of their arguments, while others do not. In the case where 
        no comparator is supplied the natural ordering of the objects will be used. If the 
        corresponding classes do not support a natural ordering (i.e. if they do not implement 
        the <ns1171:literal xmlns:ns1171="http://docbook.org/ns/docbook">Comparable</ns1171:literal> interface) and if a comparator is not supplied, the sorted collections 
        will throw a <ns1172:literal xmlns:ns1172="http://docbook.org/ns/docbook">ClassCastException</ns1172:literal>. </ns1167:para>
    
    <!-- Iterator Classes Section missing!!
    &Java_2_Collection_Framework_.Implementations.Iterator_Classes; 
    -->
</ns1156:section>