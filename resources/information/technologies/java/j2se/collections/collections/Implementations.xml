<?xml version="1.0" encoding="UTF-8"?>
<section id="Java_2_Collection_Framework_.Implementations">
      <title role="Implementations">Implementations</title>
      <para>Java 2 does supply a concrete implementation for the framework via concrete collection
        and iterator classes and concrete algorithms. The implementations are robust and very effcient.</para>
      <para>Table <ulink url="#x1-1680011">
          <!--ref: tabCollectionImplementations-->
        </ulink> lists the concrete implementations of the collection interfaces discussed in the
        previous sections.</para>
      <para/>
      <para/>
      <para/>
      <informaltable>
        <tgroup cols="6">
          <tbody>
            <row>
              <entry>
                <para/>
              </entry>
              <entry>
                <!-- cols="3"-->
                <para/>
              </entry> Implementations </row>
            <row>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>Hash Table</para>
              </entry>
              <entry>
                <para>Resizable</para>
              </entry>
              <entry>
                <para>Balanced Tree</para>
              </entry>
              <entry>
                <para>Linked List</para>
              </entry>
              <entry>
                <para>Legacy </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Interfaces</para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>Array </para>
              </entry>
              <entry>
                <para>(Sorted) </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>
            <row>
              <entry>
                <para>Set </para>
              </entry>
              <entry>
                <para>HashSet </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>TreeSet </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>
            <row>
              <entry>
                <para>List </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>ArrayList </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>LinkedList </para>
              </entry>
              <entry>
                <para>Vector </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>Map </para>
              </entry>
              <entry>
                <para>HashMap </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>TreeMap </para>
              </entry>
              <entry>
                <para/>
              </entry>
              <entry>
                <para>Hashtable</para>
              </entry>
            </row>
            <row>
              <entry>
                <para/>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <blockquote role="caption">
        <title role=" Table 5.1"> Table 5.1</title>
        <para>Java 2 implementations of the collection interfaces.</para>
      </blockquote>
      <para>Note that not all interfaces are implemented in all data structures. The omitted
        implementations are largely superfluous and in some instances don't even make sense. For
        example, it would not make sense implementing the <remark role="obeylines-h">List</remark>
        interface as a tree, because a list requires indexed element access which is not practical
        for a tree.</para>
      <para>Note also that the original Java collections, <remark role="obeylines-h">Vector</remark> and <remark role="obeylines-h">Hashtable</remark> have
        been extended to fit in the Java Collection Framework by implementing the <remark role="obeylines-h">List</remark> and<remark role="obeylines-h">Map</remark> interfaces respectively.</para>
      <para>Using these concrete collection classes should be largely restricted to using the
        services specified in the interfaces they implement. Note that some of the constructors of
        the sorted collections (<remark role="obeylines-h">TreeSet</remark> and<remark role="obeylines-h">TreeMap</remark>) take a <remark role="obeylines-h">Comparator</remark>
        as one of their arguments, while others do not. In the case where no comparator is supplied
        the natural ordering of the objects will be used. If the corresponding classes do not
        support a natural ordering (i.e. if they do not implement the <remark role="obeylines-h">Comparable</remark> interface) and if a comparator is not supplied, the
        sorted collections will throw a<remark role="obeylines-h">ClassCastException</remark>. </para>
      
    &Java_2_Collection_Framework_.Implementations.Iterator_Classes;
			</section>