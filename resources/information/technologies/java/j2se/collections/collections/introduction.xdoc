<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.j2se.collections.collections.collections.introductions"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title role="Introduction">Introduction</title>
    <para>Collections are simply groups of objects. For example, a company has a collection of
        employees and a course has a collections of students.</para>
    <para>One hardly ever encounters a non-trvial application which does not make extensive use of
        collections. A good collection library has thus wide-ranging benefits for developers.</para>
    <para>We have already discussed one type of collection, namely arrays. Arrays are random access
        collections which allow you to retrieve and set elements into any position. In many cases
        one would want to use something more powerful than an array and that is where the Java 2
        Collection Framework delivers.</para>
    <para>However, in some cases, arrays may still be the collection of choice. For starters, if one
        wants a collection of fixed size holding Java primitives like verb+int+ or
        <literal>double</literal>, then an array is certainly the most effcient choice. The
        collection classes can hold only objects, requiring you thus to wrap your primitives within objects.</para>
    <para>But even if your collection holds objects, there might, you might, all be it infrequently,
        prefer an array to one of the collection classes. Again the reason wuld be effciency. For
        fixed length random access collections an array still outperforms an
        <literal>ArrayList</literal> which is the array implementation within the Java 2 collection
        framework. However, the performance benefit is not large and in most cases the extra
        fexibility and power will make you choose one of the Java 2 collection classes instead.</para>
    <para>one frst has to wrap them within an object. This decreases the effciency of the collection
        and if that is an issue, on</para>
    <para>Prior to Java 2 there were a few collection classes included in the standard<literal>java.util</literal> library including 
        <literal>Vector</literal> (this is actually an array class),<literal>Stack</literal>, <literal>Hashtable</literal> as well as
        arrays which are implemented in Java as first class objects. These classes were, however,
        not built around a unified architecture. Interacting with a <literal>
        Vector</literal> required different messages to interacting with a stack.
        Furthermore, some standard collection types were not supported and only limited
        functionality was available for the existing collections.</para>
    <para>In collection framework introduced with Java 2 supplies a standard framework for
        interacting with collections. Hence, if we decide to substitute a<literal
       >LinkedList</literal> for <literal>ArrayList</literal> or
        a <literal>TreeSet</literal>, we may not have to modify any code at all
        (except for replacing the collection).</para>
    <para>Furthermore, if your method requires a collection as one of its arguments, you might not
        care whether it the supplied collection is a <literal>HashSet</literal> or
        a <literal>TreeSet</literal>, say. You can simply specify that your method
        wants a collection and leave it up to the clients what type of collections they want to use.</para>
    <para/>
</section>
