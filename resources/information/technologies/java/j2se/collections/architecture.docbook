<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.java.j2se.collections.collections.architecture">
    <title>The Java Collection Framework Architecture</title>
    <para>From Java 1.2 onwards, Java includes the Collections Framework, 
        which is a generic collection library for Java. Instead of using Arrays,
        it provides a set of classes and interfaces for us to us, to allow us to
        work with collections of objects.
    </para>
    <para>The architecture of the Java's collection framework is built on 3 pillars:
        
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Containers</title>
                    <para>Interfaces representing different types of containers which can contain objects, and offers
                    services around adding, removing, and accessing the contents.</para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Iterators</title>
                    <para>A standard interface for traversing (accessing) all the items in a collection,
                    regardless of the type of collection.</para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Algorithms</title>
                    <para>A set of utility services around collections, such as shuffling the contents, 
                        reversing the order, performing binary searches, etc.</para>
                </formalpara>
            </listitem>
        </itemizedlist>
        
    </para>
    <para>The specification for the above architecture is supplied with a collection of Java
        interfaces (in the <literal>java.util</literal> package) and the JDK 1.2 and later provides 
        very efficient default implementations for these interfaces.</para>
</section>