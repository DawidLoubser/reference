<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-2-18 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Exercises on multi-threading</title>

    <itemizedlist>
        <listitem><para>
            Write a thread class which adds every second 5 additional random numbers to a list of floating point numbers. Write a second thread class
            for a daemon tread
            which shows every 500 milli seconds the maximum and minimum of the sum of any 5 number group within the list. Create 10 instances of
            the producer threads and one consumer thread. Use locks to ensure that the list integrity is guaranteed and that each set of 5 consecutive
            numbers belongs to an original thread. i.e.
            make sure that the processes of adding 5 numbers and that of calculating the maximum and minimum are atomic.            
        </para></listitem>
        <listitem><para>
            Update the previous example using a thread pool executor.
        </para></listitem>
        <listitem><para>
            Write a thread which counts the number of occurances of different words in a file and builds up a map of words onto integers.
            Request the service in a deferred synchronous way where you show the current time for 5 seconds and then await the result from 
            your deferred synchronous request.
        </para></listitem>
        
    </itemizedlist>
    
    
</section>