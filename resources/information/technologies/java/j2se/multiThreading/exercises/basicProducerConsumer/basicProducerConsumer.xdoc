<?xml version="1.0" encoding="UTF-8"?>
<section
  id="resources.information.technologies.java.j2se.multiThreading.exercises.basicProducerConsumer.basicProducerConsumer"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
  xmlns:xi="http://www.w3.org/2001/XInclude" role="exercise">
<title>Basic Producer Consumer Problem</title>
  <para>
    Consider the problem of multiple producers submitting random readings into a
    <literal><![CDATA[SortedMap<Date,Double>]]></literal> and multiple consumers extracting every
    time the oldest value from that map and printing it out. 
    Implement both, the producer and the consumer as a <literal>Runnable</literal> and create a
    thread pool for each. Consumers will have to await on data being in the map and producers
    await to ensure that the map never grows to have more than 100 elements. Write an
    implementation using the Java threading class for thread pools, locks and conditions. 
  </para>
</section>
  