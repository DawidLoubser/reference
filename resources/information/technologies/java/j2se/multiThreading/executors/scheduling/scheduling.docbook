<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xml:id="resources.information.technologies.java.j2se.multiThreading.executors.scheduling.scheduling">
  <title>Scheduling</title>
  <para> Java provides for supports once off, fixed rate and fixed delay
    scheduling. Support for this required in the
      <literal>java.util.concurrent.ScheduledExecutorService</literal> and
    implemented in the
      <literal>java.util.concurrent.ScheduledThreadPoolExecutor</literal>
    class. </para>

  <section>
    <title>Fixed rate versus fixed delay scheduling</title>
    <para> When using <emphasis>fixed rate scheduling</emphasis>, the task
      is executed in regular intervals from the stating time of the first
      task. </para>
    <para> On the other hand, in fixed delay scheduling executes the
      executor will wait for a fixed period after completion of the
      previous task before starting it again. </para>
  </section>

  <section>
    <title>The ScheduledExecutorService</title>
    <para> The scheduled executor requires that the following four
      services are provided by implementors of this interface: <programlisting language="Java"><![CDATA[
package java.util.concurrent;
        
public interface ScheduledExecutorService extends ExecutorService
{
  /**
   * Creates and executes a ScheduledFuture that becomes active 
   * after the given delay.
   */        
  <V> ScheduledFuture<V> schedule(Callable<V> callable, 
                                  long delay, TimeUnit unit)
                                                   
  /**
   * Creates and executes a one-shot action that 
   * becomes enabled after the given delay.
   */        
 ScheduledFuture<?> schedule(Runnable command, 
                             long delay, TimeUnit unit)
          
  /**
   * Creates and executes a periodic action that becomes enabled first 
   * after the given initial delay, and subsequently with the given period; 
   * that is executions will commence after initialDelay then initialDelay+period, 
   * then initialDelay + 2 * period, and so on.
   */        
 ScheduledFuture<?> 	scheduleAtFixedRate(Runnable command, 
                                          long initialDelay, 
                                          long period, 
                                          TimeUnit unit)
        
  /**
   * Creates and executes a periodic action that 
   * becomes enabled first after the given initial delay, 
   * and subsequently with the given delay between the 
   * termination of one execution and the commencement of the next.
   */        
 ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, 
                                        long initialDelay, 
                                        long delay, 
                                       TimeUnit unit)
 }
      ]]></programlisting>
    </para>
  </section>


</section>
