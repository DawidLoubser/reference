<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>First Example</title>
    
    <indexterm>
        <primary>JAX-WS</primary>
        <secondary>example</secondary>
        <tertiary>simple</tertiary>
    </indexterm>
    
    <para>
        As a quick peek at what JAX-WS does for us, let's consider this simplistic scenario: We have
        a system that deals with music (such as a music player), and it wishes to defer the classification
        of the music to an expert with the required musical knowledge.
    </para>
    
    <section>
        <title>The Service Contract</title>
        <para>
            We find the following web service:
        </para>
        <figure>
            <title>Service Contract for a Musical Expert</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="serviceContract.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            The contract is split between an abstract WSDL (containing the business contract)        
            <programlisting language="XML">
<xi:include href="src/wsdl/musicExpert.wsdl" parse="text"/>
            </programlisting>
        </para>
        <para>
            and a concrete WSDL, specifying the SOAP binding (document/literal) and
            service endpoint URL:
            <programlisting language="XML">
<xi:include href="src/wsdl/musicExpert-soap.wsdl" parse="text"/>
            </programlisting>
        </para>
        <para>
            We obtain a copy of this contract, and store it in our Java project directory.
        </para>
    </section>
    
    <section>
        <title>Generating the Java artifacts</title>
        <para>
            The official JAX-WS reference implementation (http://jax-ws.dev.java.net/) provides the <literal>wsimport</literal>
            (Web Service Import) tool. One provides one or more WSDL documents, and the tool generates equivalent
            Java elements for the service interface, exchanged value objects and faults, and also generates
            a service proxy which knows how to marshall and send messages to the service in question.
        </para>
        <para>
            The compiler can be invoked in a number of ways, but for this simple example, we just run it in a
            terminal as:
            <programlisting><![CDATA[
wsimport.sh -keep  musicExpert-soap.wsdl 
parsing WSDL...


generating code...


compiling code...


            ]]></programlisting>
        </para>
        <note>
            <para>
                The <literal>-keep</literal> argument instructs the compiler to not delete the <literal>.java</literal>
                generated source files, in order for us to take a look at what has been generated:
            </para>
        </note>
        <figure>
            <title>JAX-WS Generated Files for the Musical Expert</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="generatedFiles.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Taking a look at some of the generated types, we see that they are simple Java types, with the addition
            of (often a large number of) Annotations, metadata which in this case tells JAX-WS how to bind the
            elements in question to XML.
        </para>
        <programlisting language="Java">
<xi:include parse="text" href="src/java/za/co/solms/example/simple/soap/MusicExpert.java"/>
        </programlisting>
        <programlisting language="Java">
<xi:include parse="text" href="src/java/za/co/solms/example/simple/MusicalStyle.java"/>
        </programlisting>
    </section>
    
    <section>
        <title>Writing a client that uses the service</title>
        <para>
            A client app may now use the service (i.e. request SOAP XML messages over HTTP to the remote service)
            as follows:
        </para>
        <programlisting language="Java">
<xi:include parse="text" href="src/java/za/co/solms/example/simple/client/MusicalExpertApp.java"/>
        </programlisting>
        <para>
            Though this client is quite useless in its simplicity, it is clear that JAX-WS applications
            contain no XML processing code whatsoever. This is made possible because a WSDL contract
            contains such a complete description of the service.
        </para>
    </section>    


</section>
