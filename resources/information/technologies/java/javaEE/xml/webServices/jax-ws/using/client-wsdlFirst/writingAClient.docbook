<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Writing a Client</title>
    
    <indexterm>
        <primary>JAX-WS</primary>
        <secondary>client</secondary>
    </indexterm>
    
    <para>
        JAX-WS clients typically take one of the following forms:
        <itemizedlist>
            <listitem>
                <para>A stand-alone graphical client, based on Swing or JavaFX</para>
                <indexterm>
                    <primary>Swing</primary>
                </indexterm>
                <indexterm>
                    <primary>JavaFX</primary>
                </indexterm>
            </listitem>
            <listitem>
                <para>
                    A business logic component itself, such as an EJB, which needs to make use of a web service
                    in order to fulfil its responsibilities.
                </para>
            </listitem>
            <listitem>
                <para>A web client, i.e. a server-side controller such as a Servlet or JSF Action Bean, which accesses
                its business logic via web services, and renders the results to the client via web pages.</para>
            </listitem>
        </itemizedlist>
        In all of the above cases, the JAX-WS API is used in exactly the same manner. Thus, to minimise the amount of
        code we write here, we illustrate via a simple non-graphical command-line client.
    </para>
    
    
    <section>
        <title>Creating the Service</title>
        <para>
            For each service in the WSDL, a corresponding Java class is generated. This class is responsible for
            creating (and correctly setting up) client-side proxy components, via which we call the service. Such
            a proxy must exhibit the protocol behaviour required by the WSDL, such as the kind of messaging style,
            etc.
        </para>
        <programlisting language="Java"><![CDATA[
package my.client;
import za.co.example.unitconverter.soap.UnitConverterService;

public class ClientApp 
{
	public static void main(String[] args) 
	{
		UnitConverterService service = new UnitConverterService();
		...
	}
}
]]></programlisting>
        <warning>
            <para>
                When the instance of the service is created, the WSDL will be re-read (or re-fetched over the network) in order to check for any subsequent
                changes (such as the service running on a different URL) as well as because the WSDL may contain instructions
                and extensions for which there are no JAX-WS annotations. This is clearly an expensive operation (it may take several seconds) and
                once created, the service instance should be re-used throughout the application, or even across multiple client sessions in a web / EJB
                container.
            </para>
        </warning>
        <para>
            There are overloaded versions of the constructor, one of which takes a URL which will be used to fetch the WSDL. This is useful to enforce a speedier
            local lookup of the WSDL, for example.
        </para>
    </section>
    
    
    <section>
        <title>Creating a proxy</title>
        <para>
            From the service, we can request a proxy. This proxy implements the business interface (e.g. our <literal>UnitConverter</literal>) and is,
            from the client code's perspective, the service provider.
            <programlisting language="Java"><![CDATA[
package my.client;
import za.co.example.unitconverter.soap.*;

public class ClientApp 
{
	public static void main(String[] args) 
	{
		UnitConverterService service = new UnitConverterService();
		UnitConverter unitConverter = service.getUnitConverterSOAP();
		...
	}
}
            ]]></programlisting>
        </para>
    </section>
    
    <section>
        <title>Requesting a service</title>
        <para>
            We can now request business services via the proxy, as we do via any other Java interface, having to care only
            about constructing the request object(s), and handling service pre-conditions (exceptions). For example, to convert
            a distance with our distance converter:
            <programlisting language="Java">
<xi:include parse="text" href="project/source/my/client/ClientApp.java"/>
            </programlisting>
        </para>
    </section>
    
</section>