<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    <title>Entity objects</title>
    <para>
        The Java EE specification supports the concepts of entity objects, which are managed by an
        entity manager. Entity objects exist persistently, from when they are created, until they are destroyed. The entity manager
        manages the persistence to durable storage (some form of database).
    </para>
    <para>
        Entity objects have persistent object identity and can be looked up on that object identity. Hence, these
        objects exist, from the user's perspective, across client sessions and server restarts.
        The entity manager will typically use JPA (the Java Persistence API) to interface with an
        object-relational mapper (such as Hibernate or Toplink) in order to persist the state of objects to
        a relational database.
    </para>
    <note>
        <para>
            Java EE encourages developers, when possible, to stay in the object-oriented realm
            when persisting information. This is achieved by using JPA and entities to model the
            stored business state. In cases where JPA does not offer sufficient features, or when one
            absolutely must make use of database-specific functionality such as stored procedures,
            one can still use JDBC for low-level SQL interaction with the database.
        </para>
    </note>
</section>
