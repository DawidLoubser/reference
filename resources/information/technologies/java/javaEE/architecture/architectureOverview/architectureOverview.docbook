<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>overview of the Java EE architecture</title>
    <para>
        On the surface the Java EE architecture can be seen as a <emphasis>5-layered architecture</emphasis>
        with the layers being 
        <itemizedlist>
            <listitem><para>
                the presentation layer,
                <indexterm><primary>layer</primary><secondary>presentation</secondary></indexterm>
            </para></listitem>
            <listitem><para>
                a services layer,
                <indexterm><primary>layer</primary><secondary>services</secondary></indexterm>
            </para></listitem>
            <listitem><para>
                a domain objects layer, 
                <indexterm><primary>layer</primary><secondary>domain objects</secondary></indexterm>
            </para></listitem>
            <listitem><para>
                the infrastructure or middleware layer, and
                <indexterm><primary>layer</primary><secondary>infrastructure</secondary></indexterm>
                <indexterm><primary>layer</primary><secondary>middleware</secondary></indexterm>
            </para></listitem>
            <listitem><para>
                the back-end layer.
                <indexterm><primary>layer</primary><secondary>back-end</secondary></indexterm>
            </para></listitem>
        </itemizedlist>
    </para>  
    
    <figure>
        <title>The Java EE architecture</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="javeeArchitecture.png"/>
            </imageobject>
        </mediaobject>
    </figure>
    
    
    <section>
        <title>Application-server generated layers</title>
        <para>
            In addition to the five layers used by client applications, the application server generates 
            some internal layers which host certain responsibilities.
        </para>
        
        <section>
            <title>The enterprise services layer</title>
            <para>
                The application server generates an <literal>EJBObject</literal> for
                every enterprise bean,
                which acts as an interception layer at which the following enterprise services are
                applied:
                <itemizedlist>
                    <listitem><para>
                        network enabling,
                        <indexterm><primary>network enabling</primary></indexterm>
                    </para></listitem>
                    <listitem><para>
                        mapping physical objects to virtual objects in order to support higher scalability,
                        <indexterm><primary>object</primary><secondary>virtual</secondary></indexterm>
                        <indexterm><primary>scalability</primary></indexterm>
                    </para></listitem>
                    <listitem><para>
                        activation/deactivation of components at appropriate times,
                        <indexterm><primary>component</primary><secondary>activation</secondary></indexterm>
                        <indexterm><primary>component</primary><secondary>de-activation</secondary></indexterm>
                    </para></listitem>
                    <listitem><para>
                        transaction- ,
                        <indexterm><primary>transactions</primary><secondary>support for</secondary></indexterm>
                    </para></listitem>
                    <listitem><para>
                        security- , and
                        <indexterm><primary>security</primary><secondary>support for</secondary></indexterm>
                    </para></listitem>
                    <listitem><para>
                        persistence support.
                        <indexterm><primary>persistence</primary><secondary>support for</secondary></indexterm>
                    </para></listitem>
                </itemizedlist>
            </para>
        </section>
        
        <section>
            <title>Database mapping layer</title>
            <para>
                <indexterm><primary>database</primary><secondary>mapping layer</secondary></indexterm>
                The Java EE specification provides two standard APIs for database mapping layers,
                <indexterm><primary>Java Data Objects (JDO)</primary></indexterm>
                <indexterm>
                    <primary>JDO</primary>
                    <see><indexterm><primary>Java Data Objects (JDO)</primary></indexterm></see>
                </indexterm>
                <emphasis>Java data objects</emphasis> (JDO) and the <emphasis>Java Persistence
                API</emphasis> (JPA). 
                <indexterm><primary>Java Persistence API (JPA)</primary></indexterm>
                Both are extremely easy to use and are structurally very similar. 
                JPA has been designed specifically with relational databases in mind while JDO is more
                general supporting also other persistence technologies like object databases.
            </para>
            <para>
                In addition Java EE provides a technology neutral, object oriented query language, EJB-QL
                <indexterm><primary>query language</primary><secondary>object-oriented</secondary></indexterm>
                <indexterm>
                    <primary>Enterprise Java Beans (EJB)</primary>
                    <secondary>query language (EJB-QL)</secondary>
                </indexterm>
                <indexterm>
                    <primary>EJB-QL</primary>
                    <see><indexterm><primary>Enterprise Javva Beans (EJB)</primary></indexterm></see>
                </indexterm>
                (The EJB Query Language) which is mapped ultimately on queries in the chosen persistence
                technology (<abbrev>e.g.</abbrev> appropriate SQL queries for your choice of relational
                database).
                <indexterm><primary>database</primary><secondary>relational</secondary></indexterm>
                <indexterm><primary>Standard Query Language (SQL)</primary></indexterm>
                <indexterm>
                    <primary>SQL</primary>
                    <see><indexterm><primary>Standard Query Language (SQL)</primary></indexterm></see>
                </indexterm>
            </para>
        </section>
    </section>
    
</section>
