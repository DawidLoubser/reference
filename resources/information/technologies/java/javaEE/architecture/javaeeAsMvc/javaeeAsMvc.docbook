<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Java EE as a MVC architecture for internet deployment</title>
    <para>
        <indexterm>
            <primary>Java Platform, Enterprise Edition (Java EE)</primary>
            <secondary>as Model View Controller</secondary>
        </indexterm>
        <indexterm>
            <primary>Model-View-Controller</primary>
            <secondary>Java EE as</secondary>
        </indexterm>
        The Java Enterprise Edition architecture defines a Model-View-Controller
        architecture for enterprise systems with 
        <itemizedlist>
            <listitem><para>
                the <emphasis>view</emphasis> being hosted in a <emphasis>web container</emphasis> 
                with a rich web-based presentation layer infrastructure consisting of
                Servlets, Java Server Pages and Java Server Faces.
                <indexterm><primary>servlet</primary></indexterm>
                <indexterm><primary>Java Server Pages (JSP)</primary></indexterm>
                <indexterm><primary>Java Server Faces (JSF)</primary></indexterm>
            </para></listitem>
            <listitem><para>
                <indexterm><primary>controller</primary><secondary>business logic</secondary></indexterm>
                the business logic <emphasis>controller</emphasis> being the session- and
                <indexterm><primary>session bean</primary></indexterm>
                <indexterm><primary>message-driven bean</primary></indexterm>
                message-driven beans, and the presentation layer controllers being the servlets for web based
                presentation layers and the event listeners for application based clients
                <indexterm><primary>presentation layer</primary><secondary>web based</secondary></indexterm>
            </para></listitem>
            <listitem><para>
                the <emphasis>model</emphasis> which contains the business logic and data being hosted
                in standard Java classes with support for persistence via object-relational mappers through
                the Java Persistence API (JPA).
            </para></listitem>
        </itemizedlist>
    </para>
    <!-- TODO: Why is this one special? 
        <section>
        <title>Java Server Faces as view layer</title>
        <para>
            <indexterm><primary>Java Server Faces (JSF)</primary></indexterm>
            <indexterm><primary>command pattern</primary></indexterm>
            Though not a true <quote>view</quote> component that can be called
            at will from within the controller layer like a Swing GUI can
            in a desktop application (because of the uni-directional
            nature of the HTTP protocol) the JSF framework nevertheless provides 
            a host of productivity features, such as binding view elements (e.g. form fields) to
            java objects, a large and extensible set of GUI components, and 
            advanced data conversion and validation features. It takes care of the
            complex state management of the user workflow, simplifying the development of
            complex user interactions.
        </para>
    </section>
    -->
</section>
