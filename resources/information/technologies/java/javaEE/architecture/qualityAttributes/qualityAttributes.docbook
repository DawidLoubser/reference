<?xml version="1.0" encoding="utf-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za on 2007-07-01 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Java EE and quality attributes</title>
    <para>
        To evaluate the Java EE architecture, we look at the realisation of quality attributes.
    </para>

    <section>
        <title>Flexibility/modifiability</title>
        <para>
            The clean layer and component-based approach with each component implementing
            an appropriate interface results in
            <itemizedlist>
                <listitem>
                    <para>encapsulation,</para>
                </listitem>
                <listitem>
                    <para>decoupling,</para>
                </listitem>
                <listitem>
                    <para>responsibility localisation,</para>
                </listitem>
                <listitem>
                    <para>run-time deployment and registration, and</para>
                </listitem>
                <listitem>
                    <para>the enforced use of a naming service</para>
                </listitem>
            </itemizedlist>
            results typically in a flexible system which can be modified cost-effectively.
        </para>
    </section>

    <section>
        <title>Reliability and availability</title>
        <para>
            Using clustering with state replication, and the transactional support provided by Java EE,
            can result in very reliable system with a high level of availability.
        </para>
        <para>
            Unfortunately, Java EE applications do not support fine-grained modular deployments, requiring that an
            entire application instance be made momentarily unavailable due to maintenance work on a single service, for example - dictating the
            usage of clustering where a simpler solution could suffice.
        </para>
    </section>


    <section>
        <title>Scalability</title>
        <para>
            The
            <itemizedlist>
                <listitem>
                    <para>thread-pool based concurrency support,</para>
                </listitem>
                <listitem>
                    <para>resource connection pooling, and</para>
                </listitem>
                <listitem>
                    <para>clustering</para>
                </listitem>
            </itemizedlist>
            all contribute to make typical Java EE applications very scalable.
        </para>
    </section>

    <section>
        <title>Manageability</title>
        <para>
            This domain is typically tool-vendor dependent. Nevertheless, with some application servers
            it is easy to hot-deploy enterprise beans and to manage performance via bean pool sizes and
            other measures.
        </para>
    </section>

    <section>
        <title>Security</title>
        <para>
            The front-end supports authentication, confidentiality and non-repudiation (typically via SSL),
            while the business logic layer supports role-based authorization with automatic forwarding
            of the security context across bean calls.
        </para>
    </section>

    <section>
        <title>Performance</title>
        <para>
            Performance is a two-sided sword in the Java EE architecture. Already by the nature of being
            a reference architecture for distributed enterprise systems, a performance issue is usually
            introduced due to the nature of distributed systems.
        </para>
        <para>
            Whenever an infrastructure imposes a number of interception layers to provide certain services
            such as security, transactions, latency times will suffer when compared to <quote>naked</quote>
            Java method calls. Most performance bottlenecks usually involve interacting with the persistent
            information store, such as executing a complex query, rendering such concerns irrelevant.
        </para>
        <para>
            Due to the object pooling and caching provided by JPA, data access is often much faster than what
            it would normally be if one performed SQL queries and data mapping manually. The asynchronous method
            invocation, as well as web sockets integration, introduced in Java EE 7 make it possible to build
            highly responsive user experiences, thus creating the perception of very high performance for normally
            long-running actions.
        </para>
    </section>

    <section>
        <title>Integrability</title>
        <para>
            A strong poing of Java EE is the ability to make clean, contract-driven business services available
            via many channels, to satisfy every client integration need. Session beans are natively available
            via RMI/IIOP and CORBA if required, and are easy to expose via SOAP web services or Restful resources.
        </para>
    </section>


    <section>
        <title>Time-to-market</title>
        <para>
            Java EE projects often have a complex structure, due to the complex nature of the environment. De-coupling
            from a particular IDE or application server vendor's tools, by using Maven, imposes further upfront
            complexity. Nevertheless, great strides has been made over the past couple of versions of the Java EE
            standard to dramatically reduce the configuration and structural overheads in projects, while enjoying
            all the benefits that the environment provides.
        </para>
    </section>


</section>
