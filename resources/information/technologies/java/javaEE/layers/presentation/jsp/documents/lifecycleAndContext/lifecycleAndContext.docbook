<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>JSP Life cycle and context</title>
 
 
  <section>
    <title>Request processing model</title>
    <para>
      JSP documents follow a simple request/response processing model. A JSP
      may, of course, directly receive an incoming request from a client,
      although a far more typical scenario is one where a Servlet (or other
      component) has dispatched a request to a JSP, with the JSP responsible
      for rendering a response.
    </para>
    <!-- Think about this... note>
      <para>
        When used as views in the context of frameworks such as JSF, a more
        complex lifycycle is often superimposed upon the JSP pages.
      </para>
    </note -->
  </section>
 
  <section>
    <title>Compilation to Servlet</title>
    <para>
      Every JSP page is automatically transformed to Servlet by the web container. 
      The benefit of JSP technology, of course, is that
      the developer no longer needs to write this complex Java code, using
      a simpler, higher-level templatting language instead.
    </para>
    <para>
      The first time a JSP page is processed by the <emphasis>JSP engine</emphasis>
      of a web container, the corresponding servlet code is generated and
      compiled, causing an initial delay. The second (and subsequent) time(s)
      a JSP is requested, however, it will typically exhibit extremely high performance,
      much greater than typical competing frameworks based on interpreted code.
    </para>
    <note>
      <para>
        The web module project can typically be set up so that JSP pages can be
        pre-compiled (using Ant, or another custom mechanism) to speed up
        initial deployment, as well as catch page-authoring errors at
        development time instead of at run time.
      </para>
    </note>
  </section>
  
  <section>
    <title>Implicit Objects</title>
    <para>
      When a JSP page executes, several <emphasis>implicit objects</emphasis>
      are available to every page. These objects give a JSP access to its
      environment, as well as channels of information to access the information
      sent to it from e.g. the client, or from other web components. The implicit
      objects are best discussed in the context of how to access and use them,
      such as using the <emphasis>Unified EL</emphasis> (expression language).
    </para>
  </section>
  
</section>