<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>A Simple Weather forecast lookup service</title>
  
  <para>
    As the most simplistic example of JSP technology, let us assume
    an existing business service (implemented as an EJB stateless session bean)
    which offers a service to get a one-day forecast. This service may have
    been specified as follows:
    <programlisting language="java">
<xi:include href="src/java/WeatherForecaster.java" parse="text"/>
    </programlisting>
  </para>
  <para>
    The returned value, a single weather forecast, is specified as follows (a
    simple JavaBean):
    <programlisting language="java">
<xi:include href="src/java/WeatherForecast.java" parse="text"/>
    </programlisting>
  </para>
  <para>
    If we are to treat JSP documents as pure views, and in the absence of
    a framework such as JSF, we need to write a <emphasis>front-controller</emphasis>
    Servlet which drives the use-case on the user's behalf. This servlet, which makes
    use of the service(s) offered by the EJB through <emphasis>dependency injection</emphasis>,
    could be written as follows:
    <programlisting language="java">
<xi:include href="src/java/OneDayForecastServlet.java" parse="text"/>
    </programlisting>
    <note>
      <para>
        The Servlet does not perform business logic, nor is even aware of the
        class performing the logic. It merely makes workflow decisions,
        especially regarding the views to dispatch the request to under different
        circumstances.
      </para>
    </note>
  </para>
  <para>
    If no <quote>locality</quote> HTTP request parameter was
    received, or the business service indicated that an unknown locality was
    given, the servlet dispatches the user to a static XHTML page containing
    clickable links which contain suitable parameters. This page could look as
    follows:
    <programlisting language="xml">
<xi:include href="src/web/oneDaySelection.xhtml" parse="text"/>
    </programlisting>
  </para>
  <para>
    If the Servlet (mapped to the URI <literal>/one-day-forecast</literal>
    in <literal>web.xml</literal>) receives a locality parameter, it makes
    a request to the business service, receives a reply object, and
    temporarily stores this object in the current <literal>HttpServletRequest</literal>
    which is dispatched to a JSP to render the forecast object. This JSP
    looks as follows:
<programlisting language="xml">
<xi:include href="src/web/weatherForecastDisplay.jspx" parse="text"/>
</programlisting>
  </para>
  <para>
    Invoking the <literal>/one-day-forecast</literal> URI, with, or without
    the <quote>locality</quote> parameter, yields the following output:
  </para>
  <mediaobject>
    <imageobject>
      <imagedata fileref="weatherForecastScreens.png"/>
    </imageobject>
  </mediaobject>
  <note>
    <para>
      Note how the client is completely shielded from the fact that the views were
      created using JSP technology: He simply requests a URI to invoke
      the use-case, and the servlet decides which view technology to use. This
      use-case-centric (as opposed to page-centric) style of web module development
      may significantly increase the long-term maintainability and flexibility of
      a web application.
    </para>
  </note>
  
</section>