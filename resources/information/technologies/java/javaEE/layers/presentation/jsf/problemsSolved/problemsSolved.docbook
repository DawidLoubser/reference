<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>What problems does JSF attempt to solve?</title>
    
    <para>
        Usage of the standard components of the Java Servlets API (Servlets,
        JSP, Filters, Event Listeners) allow for the construction of well-designed,
        maintainable web presentation layers. However, such applications invariably
        contain a great deal of infrastructure code around maintaining state,
        workflow, and data binding. JSF attempts to simplify these aspects of
        web applications:
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Centralised workflow control</title>
                    <para>
                        Instead of each component in a user interface workflow
                        having to know about the further workflow steps (by,
                        for example, forwarding request processing to the next component)
                        JSF introduces a centralised specification of user interface
                        workflow, with different views contributing to
                        populating one or more <emphasis>command</emphasis>
                        objects which completely decouple the views
                        from the business logic layer.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Data binding</title>
                    <para>
                        JSF specifies a number of user interface components
                        that may be embedded into a view technology, such as JSP.
                        These components are bidirectionally bound to the 
                        properties of any <quote>backing</quote> Java Beans 
                        objects through simple binding expressions. JSF specifies
                        a solid framework for data type conversion, as well as
                        validation, during such binding.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Maintaining state</title>
                    <para>
                        The user interface (<quote>views</quote>) are abstractly
                        represented as stateful objects on the server, which
                        means that they could be transferred, stored and/or
                        revived as needed. This makes more intuitive applications
                        with complex views possible.
                    </para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        JSF user interfaces are designed to be pluggable and configurable
        at all levels. Similar to the Swing GUI framework, JSF contains
        pluggable look-and-feel infrastructure (called <emphasis>render kits</emphasis>)
        which means that different or more advanced user interface components
        may be substituted without having to make any changes to the views that 
        contain them.
    </para>
</section>