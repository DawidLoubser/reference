<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>A simple JSF example</title>
    
  <para>
    As an extremely simplistic JSF example with almost no customisation,
    consider the following:
  </para>
    
  <section>
    <title>Business Layer</title>
    <section>
      <title>Contracts / API</title>
      <para>
        The following contract defines the services of a unit converter:
      </para>
      <programlisting language="java">
<xi:include href="src/unitConverterEJB/source/example/UnitConverter.java" parse="text"/>
      </programlisting>
      <para>
        A distance is defined as:
      </para>
      <programlisting language="java">
<xi:include href="src/unitConverterEJB/source/example/Distance.java" parse="text"/>
      </programlisting>  
    </section>
    <section>
      <title>Implementation</title>
      <para>
        An EJB-based implementation (also annotated for web services
        access) is defined as follows:
      </para>
      <programlisting language="java">
<xi:include
    href="src/unitConverterEJB/source/example/impl/UnitConverterBean.java" parse="text"/>
      </programlisting>
    </section>
  </section>
    
  <section>
    <title>JSF Presentation layer</title>
    <para>
      We wish to put a minimalist JSF presentation layer in place to
      expose the distance conversion service to web-based users. The web
      application follows the standard model, and is built with a simple
      Ant script.
    </para>
    <para>
      Our application strictly adheres to XML-based markup, both for the XHTML
      pages and the JSP documents.
    </para>
    <figure>
      <title>Simple example JSF application: file layout</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="webAppFiles.png"/>
        </imageobject>
      </mediaobject>
    </figure>
      
    <section>
      <title>Configuration</title>
      <para>
        In the <literal>web.xml</literal> deployment descriptor, we
        configure the faces servlet to intercept all <literal>/converter/*</literal>
        requests (i.e. process them all <emphasis>in the context of JSF</emphasis>.
      </para>
      <programlisting language="xml">
<xi:include
  href="src/unitConverterJSFBasic/src/web/WEB-INF/web.xml" parse="text"/>
      </programlisting>
      <para>
        Our JSF configuration specifies a simple workflow with three
        views: An input (<literal>unitconv-input.jspx</literal>) after
        which an outcome of <quote>conversion performed</quote> will lead
        to a results page (<literal>unitconv-display.jspx</literal>), or, 
        with an outcome of <quote>unsupported unit</quote>, will lead to
        a simple failure display page (<literal>unitconv-invalid-unit.jspx</literal>).
      </para>
      <para>
        All of these views will interact with a common <emphasis>command</emphasis>
        object, a <emphasis>managed bean</emphasis> called
        <literal>conversion</literal>. Each time an instance is created,
          it has session scope, meaning that each user has his own copy,
          and it will last for the duration of the user's session.
      </para>
      <programlisting language="xml">
<xi:include
  href="src/unitConverterJSFBasic/src/web/WEB-INF/faces-config.xml" parse="text"/>
      </programlisting>
    </section>
  </section>
    
  <section>
    <title>The command object (view controller)</title>
    <para>
      The command object is simply responsible for encapsulating the
      request to the EJB, invoking it, and returning a suitable
      <quote>outcome</quote> string (as per the navigation rules
        configuration).
    </para>
    <programlisting language="java">
<xi:include
href=
"src/unitConverterJSFBasic/src/java/example/jsf/UnitConversionCommand.java" 
parse="text"/>
    </programlisting>
    <note>
      <para>
        The injection of resources by the application server is also
        available in JSF command objects, which means that we simply
        declare a reference to a unit converter, and annotate it with
        <literal>@EJB</literal>. The container will inject a suitable
          instance for us to use (or fail if no instance could be
          injected).
      </para>
    </note>
  </section>
    
  <section>
    <title>The Views</title>
    <para>
      Since JSF is primarily a technology for the <emphasis>view</emphasis>
      layer, this is where most of the work (and benefit) is to be found.
    </para>
    <para>
      Instead of creating HTML forms and input / output fields manually,
      one delegates this to JSF by using the JSF custom tag libraries.
      This level of indirection serves as an interception point through
      which the JSF implementation makes a range of dynamic, pluggable
      behaviour possible.
    </para>
    <section>
      <title>index.jspx (Default page)</title>
      <para>
        We configure a simplistic <emphasis>default page</emphasis> which
          simply forwards control to our first logical view (the unit
          conversion input view).
      </para>
      <programlisting language="xml">
<xi:include
href=
"src/unitConverterJSFBasic/src/web/index.jspx" 
parse="text"/>
      </programlisting>
    </section>
      
    <section>
      <title>unitconv-input.jspx</title>
      <para>
        Our input view consists of a simple form that uses the JSF Core
        and HTML tag libraries to construct the form. Through this, we
        gain a more event-driven design: Instead of submitting the form
        to a particular URI, we directly wire an event handler to an
        action button (using an EL expression). Similarly, we bind the
        input fields to properties within our command object.
      </para>
      <programlisting language="xml">
<xi:include
href=
"src/unitConverterJSFBasic/src/web/unitconv-input.jspx" 
parse="text"/>
      </programlisting>
      <para>
        If we request the default page of our application, which forwards
        control to this view, we see the following:
      </para>
      <figure>
        <title>Simple example JSF application: input view</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="converterInputBlank.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
      
    <section>
      <title>unitconv-display.jspx</title>
      <para>
        If a <quote>conversion performed</quote> outcome results after
        invoking the command, the display view is invoked. It simply
        renders some simple information (by using the EL expression
        language to render values directly from the command object).
      </para>
      <programlisting language="xml">
        <xi:include
          href=
          "src/unitConverterJSFBasic/src/web/unitconv-display.jspx" 
          parse="text"/>
      </programlisting>
      <figure>
        <title>Simple example JSF application: output view</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="converterOutput.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <note>
        <para>
          The output view contains a command link to perform a new
          conversion: again, a use-case-centric approach decouples
          page authors from the actual page URIs.
        </para>
      </note>
    </section>
      
    <section>
      <title>unitconv-invalid-unit.jspx</title>
      <para>
        In our command object, we catch an
        <literal>UnsupportedUnitException</literal> and return a different
        outcome: <quote>unsupported unit</quote>. In this case, the
          following view is shown.
      </para>
      <programlisting language="xml">
        <xi:include
          href=
          "src/unitConverterJSFBasic/src/web/unitconv-invalid-unit.jspx" 
          parse="text"/>
      </programlisting>
      <figure>
        <title>Simple example JSF application: invalid unit entered</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="converterInvalidUnit.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <note>
        <para>
          The output view contains a command link to perform a new
          conversion: again, a use-case-centric approach decouples
          page authors from the actual page URIs.
        </para>
      </note>
    </section>
  </section>
    
  <section>
    <title>Input Validation and Conversion</title>
    <para>
      The feature that is apparent as being the most effective
      productivity enhancer (compared to raw Servlets and JSP)
      is the automatic data binding (with type conversion) and
      the input validation.
    </para>
    <para>
      In our input view, we added the <literal>required=true</literal>
        attribute to all three input fields, as well as a
      <quote>placeholder</quote> (<literal><![CDATA[<message>]]></literal>)
        for a message for each (referenced by <literal>id</literal>).
    </para>
    <para>
      If the form is submitted with required values missing, the user
      interface is automatically re-displayed (in its last state) but with
      default validation messages in the placeholders:
    </para>
    <figure>
      <title>Simple example JSF application: invalid unit entered</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="defaultValidation.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      Similarly, if non-numeric values are entered in fields bound to
      numeric types, the submission will not continue.
    </para>
    <note>
      <para>
        The default error handling is quite primitive (and not very
        user-friendly.) This is, however, a fully pluggable and
        configurable mechanism - from simply improving the messages / making them
        localised to language, to using fundamentally different validators
        that do not require a page reload (based on in-browser scripting).
      </para>
    </note>
  </section>
    
</section>