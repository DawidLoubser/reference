<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude">

   <title role="Ant targets">Ant Targets</title>
   <para> 
     A target is a specific build task. Projects typically have multiple targets (<abbrev>e.g.</abbrev>
    <literal>compile</literal>, <literal>archive</literal>, <literal>deploy</literal>,
     ...). These targets are often interdependent and a major benefit of using Ant is
     that one specifies for each target the targets it depends on. 
   </para>
    <para> 
      For example
<programlisting language="XML"><![CDATA[
<project name="Some Application" default="deploy">

<target name="compile">
  <!-- Compile target specifics -->
</target>

<target name="archive">
  <!-- Jar target specifics -->
</target>

<target name="deploy" depends="compile, archive">
  <!-- Deploy target specifics -->
</target>

<target name="runClientApp" depends="deploy">
  <!-- specifics -->
</target>

</project>
]]></programlisting>
      Specifies that the default target is <literal>deploy</literal>. The
      <literal>runClientApp></literal> target depends on <literal>deploy</literal> and on
      <literal>compile</literal>. The <literal>deploy</literal> target in turn depends on
      <literal>archive</literal> and on <literal>compile</literal>. Hence, the order in
       which the <literal>runClientApp</literal> target will be executed is 
       <orderedlist>
          <listitem><para>compile</para></listitem>
          <listitem><para>archive</para></listitem>
          <listitem><para>deploy</para></listitem>
          <listitem><para>runClientApp</para></listitem>
       </orderedlist> 
       This is not because of the order in which they are defined, but
       because of the dependencies between these targets. 
    </para>
    <para> 
      Note that within a single run each target is only executed once, even if multiple
      other targets depend on it. This reassures the developer that infinite-loop scenarios
      cannot occur because of cylic dependencies (e.g. TargetA invokes TargetB, TargetB invokes
      TargetC, TargetC invokes targetA).
    </para>
</section>
