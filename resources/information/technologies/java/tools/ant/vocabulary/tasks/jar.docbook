<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude">

  <title role="jar">Archiving</title>
  <para>
    A JAR archive is a ZIP-formatted file which contains Java resources.
    This usually consists of classes and interfaces, but may include any
    number of other artifacts. JAR files are the standard module mechanism
    in Java, and most applications or frameworks are distributed using it.
   </para>
  <para>
     A JAR file can be created using Ant's <literal>jar</literal> task -
    the contents of all enclosed file sets will be packaged in the resulting
    JAR file. For example,
<programlisting language="XML"><![CDATA[
<target name="buildJAR" depends="compile">
  <mkdir dir="dist"/>
  <jar jarfile="dist/myApp.jar">
    <fileset dir="build">
      <include name="**/*"/>
    </fileset>
  </jar>
</target>
]]></programlisting>
    will produce a JAR in a <literal>dist</literal> directory containing
    absolutely everything in the <literal>build</literal> directory.
  </para>
  
  <section>
    <title>Manifest</title>
    <para>
      JAR files are different from typical ZIP files, in that they contain
      a special directory called <literal>META-INF</literal>. This directory
      can contain meta-data about the JAR file, most important being
      the <emphasis>manifest</emphasis> - a file called <literal>MANIFEST.MF</literal>.
      This file contains name/value pairs of information, such as the author of the
      file, which class to execute by default, etc. Ant makes it easy to generate this 
      manifest file, by including manifest attributes in the JAR task. For example,
      to set the <literal>Main-class</literal> attribute of the JAR file (the class
      to execute when the JAR is double-clicked, or executed via
      <programlisting>
        <![CDATA[
java -jar myApp.jar
        ]]>
      </programlisting>
      the following could be added:
      <programlisting language="XML"><![CDATA[
<target name="buildJAR" depends="compile">
  <mkdir dir="dist"/>
  <jar jarfile="dist/myApp.jar">
    <fileset dir="build">
      <include name="**/*"/>
    </fileset>
    <manifest>
        <attribute name="Main-class" value="za.co.foo.MyApp"/>
    </manifest>
  </jar>
</target>
]]></programlisting>      
    </para>
  </section>
</section>
