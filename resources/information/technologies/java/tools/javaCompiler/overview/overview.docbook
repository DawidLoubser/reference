<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- Author: Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Overview</title>
    <para>
        Even though it was, for most Java Compiler implementations, always possible to use the Java compiler as a Java class within your Java code,
        it is only as of Java 6 that the <literal>java.tools.JavaCompiler</literal> is part of the standard Java API.
    </para>
    <para>
        Being able to use the <literal>JavaCompiler</literal> as a Java object is not only useful for framework (e.g. Java EE, design by contract frameworks,
        web services frameworks, ...) developers who have to generally create and compile classes on the fly, but also for normal development like
        in the context of processing certain custom annotations where you might want to add methods to the source code of a class and then recompile.
        <note><para>
            An alternative to generating and compiling code is to  use byte code modification to modify the compiled byte code either at compile time
            or at run-time. This will enable you to dynamically add methods to classes, There are a number of very powerful byte code engineering
            frameworks. One of the most powerful and easy to use frameworks is <literal>JavaAssist</literal>.
        </para></note>
    </para>
</section>    