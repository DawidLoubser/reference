<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.java.tools.xml.xom.advantages"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Advantages of XOM</title>
   
    <para>
        The XOM project claims to strive for
        <itemizedlist>
            <listitem>
                <para>correctness (absolute compliance with every aspect of the XML format)</para>
            </listitem>
            <listitem>
                <para>simplicity</para>
            </listitem>
            <listitem>
                <para>performance</para>
            </listitem>
        </itemizedlist>
        <emphasis>specifically in that order.</emphasis>
    </para>
    
    <section>
        <title>Dual Nature</title>
        <para>
            XOM is a dual streaming / tree API. Individual nodes in the tree can be processed while the document is 
            still being built. This enables XOM programs to operate almost as fast as the underlying (<literal>SAX</literal>) 
            parser can supply data. Thus, the application does not need to wait for the document to be completely parsed
            before it can start working with it.
        </para>
    </section>
    
    <section>
        <title>Native support for common XML technologies</title>
        <para>
            <literal>XPath</literal>, <literal>XInclude</literal>, <literal>XSLT</literal> are natively and intuitively supported.
            For example, any <literal>Node</literal> can be issued an <literal>XPath</literal> query simply by invoking the
            node's <literal>query(...)</literal> service. Furthermore, XOM is absolutely strict on XML namespace support, and does
            not allow the user to create non-well-formed documents through any method.
        </para>
    </section>
    
    <section>
        <title>Memory Efficiency</title>
        <para>
            XOM allows for filters to be provided, so that only relevant parts of the document are parsed. It also
            effectively allows for documents to be processed piece-by-piece, thus providing some of the benefits
            of the much lower-level SAX parser, enabling the processing of massive documents that would not otherwise
            fit into memory.
        </para>
    </section>
    
    
</section>
