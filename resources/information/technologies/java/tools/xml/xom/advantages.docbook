<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns7544:section xmlns:ns7544="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.java.tools.xml.xom.advantages">
    <ns7545:title xmlns:ns7545="http://docbook.org/ns/docbook">The Advantages of XOM</ns7545:title>
   
    <ns7546:para xmlns:ns7546="http://docbook.org/ns/docbook">
        The XOM project claims to strive for
        <ns7547:itemizedlist xmlns:ns7547="http://docbook.org/ns/docbook">
            <ns7548:listitem xmlns:ns7548="http://docbook.org/ns/docbook">
                <ns7549:para xmlns:ns7549="http://docbook.org/ns/docbook">correctness (absolute compliance with every aspect of the XML format)</ns7549:para>
            </ns7548:listitem>
            <ns7550:listitem xmlns:ns7550="http://docbook.org/ns/docbook">
                <ns7551:para xmlns:ns7551="http://docbook.org/ns/docbook">simplicity</ns7551:para>
            </ns7550:listitem>
            <ns7552:listitem xmlns:ns7552="http://docbook.org/ns/docbook">
                <ns7553:para xmlns:ns7553="http://docbook.org/ns/docbook">performance</ns7553:para>
            </ns7552:listitem>
        </ns7547:itemizedlist>
        <ns7554:emphasis xmlns:ns7554="http://docbook.org/ns/docbook">specifically in that order.</ns7554:emphasis>
    </ns7546:para>
    
    <ns7555:section xmlns:ns7555="http://docbook.org/ns/docbook">
        <ns7556:title xmlns:ns7556="http://docbook.org/ns/docbook">Dual Nature</ns7556:title>
        <ns7557:para xmlns:ns7557="http://docbook.org/ns/docbook">
            XOM is a dual streaming / tree API. Individual nodes in the tree can be processed while the document is 
            still being built. This enables XOM programs to operate almost as fast as the underlying (<ns7558:literal xmlns:ns7558="http://docbook.org/ns/docbook">SAX</ns7558:literal>) 
            parser can supply data. Thus, the application does not need to wait for the document to be completely parsed
            before it can start working with it.
        </ns7557:para>
    </ns7555:section>
    
    <ns7559:section xmlns:ns7559="http://docbook.org/ns/docbook">
        <ns7560:title xmlns:ns7560="http://docbook.org/ns/docbook">Native support for common XML technologies</ns7560:title>
        <ns7561:para xmlns:ns7561="http://docbook.org/ns/docbook">
            <ns7562:literal xmlns:ns7562="http://docbook.org/ns/docbook">XPath</ns7562:literal>, <ns7563:literal xmlns:ns7563="http://docbook.org/ns/docbook">XInclude</ns7563:literal>, <ns7564:literal xmlns:ns7564="http://docbook.org/ns/docbook">XSLT</ns7564:literal> are natively and intuitively supported.
            For example, any <ns7565:literal xmlns:ns7565="http://docbook.org/ns/docbook">Node</ns7565:literal> can be issued an <ns7566:literal xmlns:ns7566="http://docbook.org/ns/docbook">XPath</ns7566:literal> query simply by invoking the
            node's <ns7567:literal xmlns:ns7567="http://docbook.org/ns/docbook">query(...)</ns7567:literal> service. Furthermore, XOM is absolutely strict on XML namespace support, and does
            not allow the user to create non-well-formed documents through any method.
        </ns7561:para>
    </ns7559:section>
    
    <ns7568:section xmlns:ns7568="http://docbook.org/ns/docbook">
        <ns7569:title xmlns:ns7569="http://docbook.org/ns/docbook">Memory Efficiency</ns7569:title>
        <ns7570:para xmlns:ns7570="http://docbook.org/ns/docbook">
            XOM allows for filters to be provided, so that only relevant parts of the document are parsed. It also
            effectively allows for documents to be processed piece-by-piece, thus providing some of the benefits
            of the much lower-level SAX parser, enabling the processing of massive documents that would not otherwise
            fit into memory.
        </ns7570:para>
    </ns7568:section>
    
    
</ns7544:section>