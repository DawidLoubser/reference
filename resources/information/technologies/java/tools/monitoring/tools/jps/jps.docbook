<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- Author: Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Java Project Status Tool</title>
    <para>
        The Java Project Status tool, <literal>jps</literal>, can be used to list the 
        executing Java processes together with their native process identifiers.            
    </para>
    <para>
        In its simplest form it lists all Java processes showing the name of the main class:
        <programlisting><![CDATA[
> jps

20102 Jps
19988 ASMain
6218 org.eclipse.equinox.launcher_1.1.0.v20100507.jar            
            ]]></programlisting>
    </para>
    <para>
        If the <literal>jstatd</literal> daemon is running on a remote machine, say on port 2222,
        you can query the Java processes running on that machine via
        <programlisting><![CDATA[
jps myMainServer.myOrganization.net:2222            
            ]]></programlisting>
    </para>
    <para>
        To obtain more detailed information you can use the following command line parameters:
        <itemizedlist>
            <listitem><para>
                <literal>-l   =>   </literal>
                Output the full package name for the application's main class or the full path name to the application's JAR file.
            </para></listitem>
            <listitem><para>
                <literal>-m   =>   </literal>
                Output the arguments passed to the main method. The output may be null for embedded JVMs.
            </para></listitem>
            <listitem><para>
                <literal>-q   =>   </literal>
                Suppress the output of the class name, JAR file name, and arguments passed to 
                the main method, producing only a list of local VM identifiers.
            </para></listitem>
            <listitem><para>
                <literal>-v   =>   </literal>
                Output the arguments passed to the JVM.
            </para></listitem>
            <listitem><para>
                <literal>-V   =>   </literal>
                Output the arguments passed to the JVM through the flags file (the 
                <literal>.hotspotrc</literal> file or  the  file  specified  by  the
                <literal><![CDATA[-XX:Flags=<filename>]]></literal> argument).
            </para></listitem>
            <listitem><para>
                <literal>-Joption   =>   </literal>
                Pass  option to the java launcher called by <literal>jps</literal>. 
                For example, <literal>-J-Xms48m</literal> sets the startup memory to 48 megabytes. 
            </para></listitem>
        </itemizedlist>
    </para>
    <para>
        For example, 
        <programlisting><![CDATA[
> jps -lm

19988 com.sun.enterprise.glassfish.bootstrap.ASMain -domainname domain1 
    -asadmin-args start-domain,,,domain1 -instancename server -verbose false -debug false 
    -asadmin-classpath /home/apps/java/glassfishv3/glassfish/modules/admin-cli.jar 
    -asadmin-classname com.sun.enterprise.admin.cli.AsadminMain -upgrade false 
    -domaindir /home/apps/java/glassfishv3/glassfish/domains/domain1 
    -read-stdin trueopingSwingInterfaces/src $ 
            ]]></programlisting>
    </para>
</section>
