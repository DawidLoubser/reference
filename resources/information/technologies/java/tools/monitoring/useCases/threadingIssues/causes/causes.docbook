<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- Author: Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Causes of thread issues</title>
    <para>
        Commonly encountered threading issues include
        <itemizedlist>
            <listitem><para>
                not making classes thread save resulting objects in getting corrupted due to concurrent access,                
            </para></listitem>
            <listitem><para>
                creating an insufficient or excessive number of threads,
            </para></listitem>
            <listitem><para>
                excessive resource contention between threads,
            </para></listitem>
            <listitem><para>
                race conditions resulting in unpredeictable or unexpected behaviour, and
            </para></listitem>
            <listitem><para>
                threads dead-locking.
            </para></listitem>
        </itemizedlist>
    </para>
    <para>
        Of these dead-locks and race conditions are particularly difficult to replicate. In addition to using application monitoring, one
        can often achieve a lot through code monitoring (i.e. pair programming and code reviews). Also, commonly one should try and
        minimize explicit use of threading. One should particularly try and avoid that threading
        logic is interwoven within application logic. Preferably thread management should be left to
        the infrastructure (e.g. an application server).
    </para>
</section>    
