<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.tecnologies.java.tools.junit.theDesignOfJUnit"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="file:/home/ernst/projects/solms/Docs/re_schema/solmsDoc.xsd">
    
    <title role="The Design of JUnit">The Design of JUnit</title>
<para>
The core of the design of JUnit is based on the combination of 2 classical
design patterns, the <emphasis> composite</emphasis> and the <emphasis> decorator</emphasis> patterns.</para>

    <figure id="resources.information.tecnologies.java.tools.junit.theDesignOfJUnit.jUnitCoreDesign_jpg">
        <graphic fileref="JUnitCoreDesign.jpg"/>
        <para>The core of the JUnit design is based on the classical component 
        and decorator patterns.</para>
    </figure>

    <para>The design is shown in figure <xref linkend="resources.information.tecnologies.java.tools.junit.theDesignOfJUnit.jUnitCoreDesign_jpg"/>. Note that test suites are
tests which have zero or more tests which themselves mey be test cases or test suites
(the composite pattern). Note furthermore that any test (test cases and test suites)
can be decorated with further responsibilities in a pluggable way using the
decorator pattern. </para>

<para>Tests use <emphasis> JUnit</emphasis>-supplied assertion functions assess whether test criteria
are met or not. These functions (<emphasis>static</emphasis> methods) are defined in a
utility class, <emphasis>junit.framework.Assert</emphasis> which are, in a way, inherited
by <emphasis>TestCase</emphasis>.</para>

    
</section>
