<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Introduction</title>
    <para>
        Maven provides a declarative approach to project builds, specifying the build requirements in
        the projects object model (POM) and then using this information to build, clean or document
        the project. To this end Maven defines three standard life cycles which are not plugin specific:
        <itemizedlist>
            <listitem>
                <para>
                    The
                    <emphasis>build life cycle</emphasis>
                    is used to compile, test, package, install and deploy a project.
                </para>
            </listitem>
            <listitem>
                <para>
                    The
                    <emphasis>clean life cycle</emphasis>
                    is used to remove any generated directories and files so
                    that only the sources remain.
                </para>
            </listitem>
            <listitem>
                <para>
                    The
                    <emphasis>site life cycle</emphasis>
                    measures the project (e.g. collect results of test) and generates
                    a documentation site which contains general project metadata and reporting on project status.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        The project is built following a life cycle which is a pipeline of phases which is executed
        sequentially. Maven defines a standard build life cycle, which is generally followed when
        building a project. The default build life cycle contains the following core phases
        (this is not a complete list of phases):
        <orderedlist>
            <listitem>
                <para>validate</para>
            </listitem>
            <listitem>
                <para>compile</para>
            </listitem>
            <listitem>
                <para>test</para>
            </listitem>
            <listitem>
                <para>package</para>
            </listitem>
            <listitem>
                <para>deploy</para>
            </listitem>
            <listitem>
                <para>install</para>
            </listitem>
        </orderedlist>
        The build process follows the phases in the order of the life cycle, executing any goals/operations
        which are bound to these phases.
    </para>
    <para>
        Plugin goals are bound to life cycle phases in one of the following ways
        <orderedlist>
            <listitem>
                <para>
                    The plugin for the project packaging (project type) binds goals/operations to its life cycle phases
                    which are either phases of one of the standard life cycles or phases of its custom life cycle.
                </para>
            </listitem>
            <listitem>
                <para>
                    In your build customization you can bind different goals/operations to phases of either of the three
                    life cycles.
                </para>
            </listitem>
        </orderedlist>
    </para>
    <para>
        The life cycle which is used is determined by the plugin for the specified package type
        (e.g. jar or war).
        A plugin may hence choose to either
        <itemizedlist>
            <listitem>
                <para>
                    bind goals to the standard life cycle phases,
                </para>
            </listitem>
            <listitem>
                <para>
                    inherit a standard life cycle and add phases, or
                </para>
            </listitem>
            <listitem>
                <para>
                    define a new life cycle with its own phases.
                </para>
            </listitem>
        </itemizedlist>
        In either case, the plugin will bind its operations (goals) to life cycle phases which are either phases of
        its won life cycle or phases of the standard build life cycle.
    </para>
</section>    
 