<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns92:section xmlns:ns92="http://docbook.org/ns/docbook" xml:id="resources.information.platforms.jboss.configuration.persistence.persistenceConfiguration">
  <ns93:title xmlns:ns93="http://docbook.org/ns/docbook">Persistence configuration for JBoss</ns93:title>	
  <ns94:para xmlns:ns94="http://docbook.org/ns/docbook">
  	By default JBoss persists to an embedded Hypersonic database. Usually you
    would want to change the default persistence and often you would want to
    support persistence to several persistence storage technologies.
 </ns94:para>
  
	<ns95:section xmlns:ns95="http://docbook.org/ns/docbook">
		<ns96:title xmlns:ns96="http://docbook.org/ns/docbook">Publishing a database to JBoss</ns96:title>
		<ns97:para xmlns:ns97="http://docbook.org/ns/docbook">
			To publish a database as a data source to JBoss one needs to 
			<ns98:itemizedlist xmlns:ns98="http://docbook.org/ns/docbook">
				<ns99:listitem xmlns:ns99="http://docbook.org/ns/docbook"><ns100:para xmlns:ns100="http://docbook.org/ns/docbook">
					copy an appropriate database driver into the lib directory of the
					configuration you are running, and
				</ns100:para></ns99:listitem>
				<ns101:listitem xmlns:ns101="http://docbook.org/ns/docbook"><ns102:para xmlns:ns102="http://docbook.org/ns/docbook">
					write a deployment descriptor which publishes the database URL, driver
					class, username and password to JBoss.
				</ns102:para></ns101:listitem>
			</ns98:itemizedlist>
      The latter is copied into the deploy directory and can be done without
			bringing down JBoss. However, if a suitable database driver is not available
			in the lib directory of your configuration, it needs to be copied there and
			for this you need to restart JBoss.			
		</ns97:para>
		<ns103:section xmlns:ns103="http://docbook.org/ns/docbook">
			<ns104:title xmlns:ns104="http://docbook.org/ns/docbook">Datasource deployment descriptor</ns104:title>
			<ns105:para xmlns:ns105="http://docbook.org/ns/docbook">
				Below we show a typical database deployment descriptor (for Postgres in our
				case):
        <ns106:programlisting xmlns:ns106="http://docbook.org/ns/docbook">
	
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--  postgres-ds.xml (to be copied into the deploy directory --&gt;

&lt;datasources&gt;
	&lt;local-tx-datasource&gt;
		&lt;jndi-name&gt;PostgresDS&lt;/jndi-name&gt;
		&lt;connection-url&gt;jdbc:postgresql://localhost:5432/jboss&lt;/connection-url&gt;
		&lt;driver-class&gt;org.postgresql.Driver&lt;/driver-class&gt;
		&lt;user-name&gt;jboss&lt;/user-name&gt;
		&lt;password&gt;boss007&lt;/password&gt;
	&lt;/local-tx-datasource&gt;
&lt;/datasources&gt;
        	</ns106:programlisting>				
			</ns105:para>
		</ns103:section>
	</ns95:section>
	
	<ns107:section xmlns:ns107="http://docbook.org/ns/docbook">
		<ns108:title xmlns:ns108="http://docbook.org/ns/docbook">Configuring the object-relational mapper</ns108:title>
		<ns109:para xmlns:ns109="http://docbook.org/ns/docbook">
			JBoss uses Hibernate for the object relational mapper. In order to specify
			the datasource which hibernate uses, you will need to edit the
			<ns110:literal xmlns:ns110="http://docbook.org/ns/docbook">hibernate.properties</ns110:literal> file located in the
			<ns111:literal xmlns:ns111="http://docbook.org/ns/docbook">ejb3.deployer/META-INF</ns111:literal> directory. In order to use the postgres
			database configured aboe, the properties file would look something like:
			<ns112:programlisting xmlns:ns112="http://docbook.org/ns/docbook">
&lt;!-- hibernate.properties found in the ejb3.deployer/META-INF directory --&gt;

hibernate.transaction.manager_lookup_class=org.hibernate.transaction.JBossTransactionManagerLookup
hibernate.query.factory_class=org.hibernate.hql.ast.ASTQueryTranslatorFactory
hibernate.hbm2ddl.auto=create
#hibernate.hbm2ddl.auto=create-drop
hibernate.cache.provider_class=org.hibernate.cache.HashtableCacheProvider
# Clustered cache with TreeCache
#hibernate.cache.provider_class=org.jboss.ejb3.entity.TreeCacheProviderHook
#hibernate.treecache.mbean.object_name=jboss.cache:service=EJB3EntityTreeCache
hibernate.connection.datasource=java:/PostgresDS
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
				</ns112:programlisting>
		</ns109:para>
	</ns107:section>
	
	<ns113:section xmlns:ns113="http://docbook.org/ns/docbook">
		<ns114:title xmlns:ns114="http://docbook.org/ns/docbook">Creating the database and database user</ns114:title>
		<ns115:para xmlns:ns115="http://docbook.org/ns/docbook">
			This will be database specific. With postgres you create a database user via
			the <ns116:literal xmlns:ns116="http://docbook.org/ns/docbook">createuser</ns116:literal> command. To create a database you would use
			<ns117:literal xmlns:ns117="http://docbook.org/ns/docbook">createdb</ns117:literal>. You can use the following on Linux:
			<ns118:programlisting xmlns:ns118="http://docbook.org/ns/docbook">
useradd jboss         % creating a system user
passwd jboss boss007  % setting the password for the system user
				
createuser jboss  % creating a database user, jboss
create db jboss   % creating a jboss database
				</ns118:programlisting>
		</ns115:para>
	</ns113:section>
</ns92:section>