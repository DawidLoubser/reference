<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.platforms.linux.processControl.ps"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Querying the status of a process with <command>ps</command></title>
  <para>
     The standard command to query process information is <command>ps</command>.
     It enables you to query
     <itemizedlist>
       <listitem><para>
          which processes are running together with the process ids required for process control
          functions, like <command>kill</command>,        
       </para></listitem>
       <listitem><para>
         what resources each process is using,
       </para></listitem>
       <listitem><para>
          how long a process has been running,        
       </para></listitem>
       <listitem><para>
         whether it is active or whether it is hung.
       </para></listitem>
     </itemizedlist>
  </para>
  <para>
    By default, <command>ps</command> reports the current shell process and any of its
    child processes:
    <programlisting><![CDATA[
  PID TTY          TIME CMD
 1960 pts/3    00:00:00 bash
 2235 pts/3    00:00:00 ps
    ]]></programlisting>
  </para>
  <para>
    The output of the <command>ps</command> command can be controlled through a large 
    number of command line arguments. See <command>man</command> and 
    <command>info</command> for detailed information. In 
    <xref linkend="resources.information.platforms.linux.processControl.ps.flags_table"/>
    we merely show some of the more commonly used command-line arguments.
    
    <table id="resources.information.platforms.linux.processControl.ps.flags_table">
      <title>Commonly used flags for <command>ps</command></title>
      <tgroup cols="2">
        <thead>
          <row><entry>Flag</entry><entry>Description</entry></row>
        </thead>
        <tbody>
          <row>
            <entry><command>-A</command> or <command>-e</command></entry>
            <entry>select all processes</entry>
          </row>
          <row>
            <entry><command>-a</command></entry>
            <entry>select all processes on a terminal, including those of other users</entry>
          </row>
          <row>
            <entry><command>-p</command></entry>
            <entry>select the processes with a specified PID</entry>
          </row>
          <row>
            <entry><command>-U</command></entry>
            <entry>select the processes launched by a specified user</entry>
          </row>
          <row>
            <entry><command>-u</command></entry>
            <entry>
              select the processes for a specified effective user (<abbrev>i.e.</abbrev>
              under which permissions it is run)
            </entry>
          </row>
          <row>
            <entry><command>-r</command></entry>
            <entry>select running processes only</entry>
          </row>
          <row>
            <entry><command>-C</command></entry>
            <entry>select all processes for a specified command</entry>
          </row>
          <row>
            <entry><command>-l</command></entry>
            <entry>show process information in <emphasis>long</emphasis> format</entry>
          </row>
          <row>
            <entry><command>-N</command></entry>
            <entry>negate the selection (<abbrev>i.e.</abbrev> exclude the specified selection)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </para>
  <para>
    These flags are typically combined. For example
    <cmdsynopsis><command>
ps -F -C bash      
    </command></cmdsynopsis>
    would provide an extra-full report on all processes started via the <command>bash</command>:
    <programlisting><![CDATA[
UID        PID  PPID  C    SZ  RSS PSR STIME TTY          TIME CMD
fritz     1431  1420  0  1152 1552   0 20:11 tty1     00:00:00 -bash
fritz     1818  1817  0  1174 1664   0 20:45 pts/1    00:00:00 /bin/bash
fritz     1842  1817  0  1173 1660   0 20:46 pts/2    00:00:00 /bin/bash
fritz     1960  1959  0  1176 1700   0 21:04 pts/3    00:00:00 /bin/bash
    ]]></programlisting>
    The report contains the user, the ids of the process and parent process, the
  </para>
  <para>
    Negation enables you to specify what you would not like to see. For example,
    to see all processes except those running as root (real and effective ID), use
    <cmdsynopsis><command>
ps -U root -u root -N
    </command></cmdsynopsis>
  </para>
  
  <para>
    Of course the <command>ps</command> command can be combined with grep to extract
    specific information. For example
    <cmdsynopsis><command>
ps -u fritz -F | grep 'java'
    </command></cmdsynopsis>
    selects all processes launched by the user <emphasis>fritz</emphasis> which have a 
    <emphasis>java</emphasis> in it and presents them in <emphasis>long</emphasis>
    format. The output would be something like this:
    <programlisting><![CDATA[
fritz 1706 1705 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1707 1706 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1708 1707 0 108646 209404 0 20:34 ? 00:00:09 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1709 1707 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1710 1707 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1711 1707 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1712 1707 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1713 1707 0 108646 209404 0 20:34 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1714 1707 0 108646 209404 0 20:34 ? 00:00:04 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1716 1707 0 108646 209404 0 20:34 ? 00:00:06 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1719 1707 0 108646 209404 0 20:35 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1720 1707 0 108646 209404 0 20:35 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1721 1707 0 108646 209404 0 20:35 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1723 1707 0 108646 209404 0 20:35 ? 00:00:28 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1731 1707 0 108646 209404 0 20:35 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1740 1707 0 108646 209404 0 20:35 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1741 1707 0 108646 209404 0 20:35 ? 00:00:00 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 1764 1707 0 108646 209404 0 20:37 ? 00:00:05 java -cp .:./oxygen.jar:classes ro.sync.exml.Oxygen
fritz 2462 1818 0   885  552   0 22:11 pts/1  00:00:00 grep java
    ]]></programlisting>
  </para>
  <para>
    The <command>ps</command> command also allows you to specify the exact output format. See
    the <command>man</command> pages for more details.
  </para>
</section>
