<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.platforms.linux.networkServices.nfs.exporting"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Exporting</title>
  <para>
    In order to use files across a network, the machine which serves a file system
    across the network needs to export the volumes it shares.
  </para>
  
  <section>
    <title>Specifying a shared volume in <filename>/etc/exports</filename></title>
    <para>
      The <filename>/etc/exports</filename> file contains a list of volumes which are shared.
      For each shared volume there is a line entry of the form
      <programlisting><![CDATA[
pathToSharedVolume client1(option1_1,option2_1) client2(option1_2,option2_2)
      ]]></programlisting>
      Here
      <itemizedlist>
        <listitem><formalpara> 
          <title>pathToSharedVolume</title>
          <para>
            represents the directory you want to share.
          </para>
        </formalpara></listitem>
        <listitem><formalpara> 
          <title>client1 and client2</title>
          <para>
            are the client machines you want to give access to. You can identify client machines
            either by their IP address or by the host (DNS) names. Using IP addresses is more
            secure.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>access options</title>
          <para>
            The access option for an exported volume is one of
            <itemizedlist>
              <listitem><formalpara>
                <title>ro</title>
                <para>
                  which specifies read-only access,
                </para>
              </formalpara></listitem>
              <listitem><formalpara>
                <title>rw</title>
                <para>which requests read-write access for the exported volume,</para>
              </formalpara></listitem>
              <listitem><formalpara>
                <title>no_root_squash</title>
                <para>
                  If a user logged on as <emphasis>root</emphasis> tries to access
                  a file on a NFS server, the user is treated as the <emphasis>nobody</emphasis>
                  user on the server. On the other hand, if the option
                  <literal><![CDATA[no_root_squash]]></literal> is selected, then a user logged on 
                  as <emphasis>root</emphasis> on the client machine will have root-level access to 
                  the files exported by the server. This option should be used only in exceptional
                  circumstances, usually for administrative work.
                </para>
              </formalpara></listitem>
            </itemizedlist>
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>sync or async</title>
          <para>
            Recent versions of NFS use by default <literal>sync</literal>, <abbrev>i.e.</abbrev>
            synchronous behaviour. This is the safer option. The server will only notify a client that
            a write is completed once it has been written to stable storage. When <literal>async</literal>
            is specified, the server may notify a client that the data has been successfully written prior
            to it having been transferred to stable storage, and this may result in undetected
            loss/corruption of data upon server crash.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>secure/insecure</title>
          <para>
             The <literal>secure</literal> option requires client requests to originate from 
             a port less than <literal>IPPORT_RESERVED</literal> which is port 1024. 
          </para>
        </formalpara></listitem>
      </itemizedlist>
  
      <note>
        <para>
          If you share a directory, then all its subdirectories are shared too.
        </para>
      </note>
    </para>  
  </section>
  
  <section>
    <title>Some example entries in <filename>etc/exports</filename></title>
    <para>
      <itemizedlist>
        <listitem><para>
          To provide read, and secure write access to 
          <filename>home/fritz/freeForAll</filename> to everyone 
          connecting from any port, add the following line to your
          <filename>/etc/exports</filename> file:
          <programlisting><![CDATA[
/home/fritz/freeForAll *(rw,sync,insecure)      
          ]]></programlisting>
        </para></listitem>
        
       <listitem><para>
         The following provides read-only access to a software repository
         directory for all machines in a domain
         <programlisting><![CDATA[
/usr/public/softwareRepository solmstraining.co.za(ro,insecure)
         ]]></programlisting>
       </para></listitem>
        
        <listitem><para>
          Since devices are represented by files in Linux, you can also share devices
          via NFS. For example,
          <cmdsynopsis>
<command>mnt/cdrom 192.168.0.*(ro)</command>          
          </cmdsynopsis>
          shares the mounted cdrom drive to all IP addresses
        </para></listitem>
       
       <listitem><para>
         The need may occasionally arise to provide full access (including root
         access) for the entire file system to another machine. The following
         line in the <filename>/etc/exports</filename> file would provide this:
         <programlisting><![CDATA[
/  192.162.200.11(rw,no_root_squash)
         ]]></programlisting>
       </para></listitem>  
       
       <listitem><para>
         To export the public FTP directory to everyone for read-access,
         but enforcing that all requests are executed as user 
         <emphasis>nobody</emphasis>, you can use:
         <programlisting><![CDATA[
/pub            (ro,insecure,all_squash)
         ]]></programlisting>
       </para></listitem>
       <listitem><para>
           You can also provide multiple machines access within a single export:
           <programlisting><![CDATA[
  /usr/local    192.168.0.1(ro) 192.168.0.2(ro)
  /home/ 192.168.0.1(rw) 192.168.0.2(rw)
           ]]></programlisting>
        </para></listitem>
        
        <listitem><para>
           If you have a number of machines on the same local network that require 
           access to your server, you can also specify a network mask. For example,
           if you wanted to allow access to all the machines with IP addresses 
           between 192.168.0.0 and 192.168.0.255, then you could have the entries:
           <programlisting><![CDATA[
  /usr/local 192.168.0.0/255.255.255.0(ro)
  /home      192.168.0.0/255.255.255.0(rw)
           ]]></programlisting>
        </para></listitem>
        
        <listitem><para>
           Finally, you can also publish NFS directories to <emphasis>netgroup</emphasis>s
           as defined in the <filename>/etc/netgroups</filename> file. For example, to
           public a directory for read-write access to all members of the netgroup
           <emphasis>development</emphasis>, and read access to the rest of the
           organization, you can use
           <programlisting><![CDATA[
/projects/src @development(rw) *.solmstraining.co.za(ro)           
           ]]></programlisting>
         </para></listitem>  
      </itemizedlist>
    </para>
  </section>
  
  <section>
    <title>Using <command>exportfs</command></title>
    <para>
      The application, <command>exportfs</command> is used to export
      (publish) file systems via NFS.
    </para>
    
    <section>
      <title>Publishing changes to <filename>/etc/exports</filename></title>
      <para>
        After you have finished editing <filename>/etc/exports</filename>, you
        need to publish those changes. This is done by running
        <cmdsynopsis>
<command>exportfs -ra</command>
        </cmdsynopsis>
        <note>
          <para>
            You will typically need to be a super-user to run this command (as well as to edit
            the <filename>/etc/exportfs</filename> file).
          </para>
        </note>
      </para>
    </section>
    
    <section>
      <title>Temporary exports via <command>exportfs</command></title>
      <para>
        At times you may want to export certain volumes temporarily. In that 
        case you may  not want to add those directories to the 
        <filename>/etc/exports</filename> file, because that would have 
        the consequence that they will be automatically republished on reboot.
      </para>
      <para>
        In this case you may want to run <command>exportfs</command>
        providing the volume you want to export as command-line
        argument. For example, if Mr Bean wants to export his
        <filename>work</filename> directory temporarily for read-only 
        access to <literal>192.168.0.15</literal>, he can run
        <cmdsynopsis>
<command>exportfs -o ro 192.168.0.15:/home/bean/work</command>        
        </cmdsynopsis>
        Here the <option>-o</option> option enables him to specify a list
        of export options in the same way as it is specified in the
        <filename>/etc/exports</filename> file.
      </para>
    </section>
  
    <section>
      <title>Withdrawing an exported volume</title>
      <para>
        At times, particularly when specifying temporary exports, you may want
        to <quote><emphasis>unexport</emphasis></quote> a volume. This
        is done via the <option>-u</option> command-line option of the
        <command>exportfs</command> command. For example, if Mr Bean
        wishes to withdraw the export of his work directory, he can run
        <cmdsynopsis>
<command>exportfs -u 192.168.1.1:/home/bean/work</command>        
        </cmdsynopsis>
      </para>
    </section>
  </section>
</section>
