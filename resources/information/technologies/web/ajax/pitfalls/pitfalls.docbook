<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<ns17:section xmlns:ns17="http://docbook.org/ns/docbook" xml:id="resourses.information.technologies.web.ajax.pitfalls.pitfalls">
    <ns18:title xmlns:ns18="http://docbook.org/ns/docbook">The pitfalls of AJAX</ns18:title>
    <ns19:para xmlns:ns19="http://docbook.org/ns/docbook">
        Though AJAX is a promising opportunity for true "write once, run anywhere" applications with
        rich interactivity, it can also be considered a <ns20:emphasis xmlns:ns20="http://docbook.org/ns/docbook">counter-productive</ns20:emphasis> technology for web developers. Its power introduces 
        a large number of potential User Interface problems, as well as server side state and load problems.
    </ns19:para>
    <ns21:para xmlns:ns21="http://docbook.org/ns/docbook">
        The following list (originally posted by Alex Bosworth on <ns22:ulink xmlns:ns22="http://docbook.org/ns/docbook" url="http://www.sourcelabs.com"/>, and edited for clarity) highlights 
        some of the potential problems:
        
        <ns23:orderedlist xmlns:ns23="http://docbook.org/ns/docbook">
            <ns24:listitem xmlns:ns24="http://docbook.org/ns/docbook">
                <ns25:formalpara xmlns:ns25="http://docbook.org/ns/docbook">
                    <ns26:title xmlns:ns26="http://docbook.org/ns/docbook">Not giving immediate visual cues for clicking widgets</ns26:title>
                    <ns27:para xmlns:ns27="http://docbook.org/ns/docbook">If something one clicks on triggers an AJAX action, a visual cue has to be provided (by the developers) that something is
                        happening. An example of this is GMail loading button that is in the top right. Whenever something is done in 
                        GMail, a little red box in the top right indicates that the page is loading, to make up for the 
                    fact that Ajax doesn't trigger the normal web UI for new page loading.</ns27:para>
                </ns25:formalpara>
            </ns24:listitem>
            <ns28:listitem xmlns:ns28="http://docbook.org/ns/docbook">
                <ns29:formalpara xmlns:ns29="http://docbook.org/ns/docbook">
                    <ns30:title xmlns:ns30="http://docbook.org/ns/docbook">Breaking the back button</ns30:title>
                    <ns31:para xmlns:ns31="http://docbook.org/ns/docbook">The back button is a great feature of standard web site user interfaces. Unfortunately, the back button 
                    doesn't work very well with Javascript. Keeping back button functionality is a major reason not to go with a 
                    pure Javascript web app.</ns31:para>
                </ns29:formalpara>
            </ns28:listitem>
            <ns32:listitem xmlns:ns32="http://docbook.org/ns/docbook">
                <ns33:formalpara xmlns:ns33="http://docbook.org/ns/docbook">
                    <ns34:title xmlns:ns34="http://docbook.org/ns/docbook">Changing state with links (GET requests)</ns34:title>
                    <ns35:para xmlns:ns35="http://docbook.org/ns/docbook">Ajax applications introduce lots of problems for users who 
                    assume GET operations don't change state. Not only do state changing links cause problems for robots, users 
                    who are accustomed to having links drive navigation can become confused when links are used to drive application 
                    state changes (the standard mechanism for effecting state changes are POST).</ns35:para>
                </ns33:formalpara>
            </ns32:listitem>
            <ns36:listitem xmlns:ns36="http://docbook.org/ns/docbook">
                <ns37:formalpara xmlns:ns37="http://docbook.org/ns/docbook">
                    <ns38:title xmlns:ns38="http://docbook.org/ns/docbook">Blinking and changing parts of the page unexpectedly</ns38:title>
                    <ns39:para xmlns:ns39="http://docbook.org/ns/docbook">The first A in Ajax stands for asynchronous. The problem with asynchronous messages is that they can be quite 
                    confusing when they pop in unexpectedly. Asynchronous page changes should only ever occur in narrowly defined places 
                    and should be used judiciously - flashing and blinking in messages in areas you don't want to concentrate on harkens 
                    back to days of the HTML <ns40:literal xmlns:ns40="http://docbook.org/ns/docbook">blink</ns40:literal> tag.</ns39:para>
                </ns37:formalpara>
            </ns36:listitem>
            <ns41:listitem xmlns:ns41="http://docbook.org/ns/docbook">
                <ns42:formalpara xmlns:ns42="http://docbook.org/ns/docbook">
                    <ns43:title xmlns:ns43="http://docbook.org/ns/docbook">Not using links that can be passed to friends or be bookmarked</ns43:title>
                    <ns44:para xmlns:ns44="http://docbook.org/ns/docbook">Another great feature of websites is that one can pass URLs to other people and they can see the same thing 
                    that the original viewer saw. One can also bookmark an index into my site navigation and come back to it later. Javascript, and thus Ajax 
                    applications, can cause huge problems for this model of use. Since the Javascript is dynamically generating the page instead of
                    the server, the URL is cut out of the loop and can no longer be used as an index into navigation. This is a very unfortunate feature to 
                    lose, though many Ajax webapps thoughtfully include specially constructed "permalinks" for this exact reason. However, again]this has to be 
                        specially implemented by the developer.</ns44:para>
                </ns42:formalpara>
            </ns41:listitem>
            <ns45:listitem xmlns:ns45="http://docbook.org/ns/docbook">
                <ns46:formalpara xmlns:ns46="http://docbook.org/ns/docbook">
                    <ns47:title xmlns:ns47="http://docbook.org/ns/docbook">Too much code makes the browser slow</ns47:title>
                    <ns48:para xmlns:ns48="http://docbook.org/ns/docbook">Ajax introduces a way to make much more interesting Javascript applications, unfortunately interesting often means more code 
                    running. More code running means more work for the browser, which means that for some Javascript intensive websites, especially poorly 
                    coded ones, you need to have a powerful CPU to keep the functionality zippy. The CPU problem has actually been a limit on Javascript 
                    functionality in the past, and just because computers have gotten faster doesn't mean the problem has disappeared.</ns48:para>
                </ns46:formalpara>
            </ns45:listitem>
            <ns49:listitem xmlns:ns49="http://docbook.org/ns/docbook">
                <ns50:formalpara xmlns:ns50="http://docbook.org/ns/docbook">
                    <ns51:title xmlns:ns51="http://docbook.org/ns/docbook">Inventing new UI conventions</ns51:title>
                    <ns52:para xmlns:ns52="http://docbook.org/ns/docbook">A major mistake that is easy to make with Ajax is: "click on this non obvious thing to drive this other non obvious result". 
                    Though users who use an application for a while may learn that if you click and hold down the mouse on this div that you can then 
                    drag it and permanently move it to this other place, but since that's not in the common user experience, you increase the time and 
                    difficulty of learning your application, which is counterproductive.</ns52:para>
                </ns50:formalpara>
            </ns49:listitem>
            <ns53:listitem xmlns:ns53="http://docbook.org/ns/docbook">
                <ns54:formalpara xmlns:ns54="http://docbook.org/ns/docbook">
                    <ns55:title xmlns:ns55="http://docbook.org/ns/docbook">Not cascading local changes to other parts of the page</ns55:title>
                    <ns56:para xmlns:ns56="http://docbook.org/ns/docbook">Since Ajax/Javascript gives you such specific control over page content, it's easy to get too focused on a single area of 
                    content and miss the overall integrated picture. An example of this is the <ns57:ulink xmlns:ns57="http://docbook.org/ns/docbook" url="http://www.backpackit.com/"/> title. 
                    If you change a Backpackit page title, they immediately replace the title, and even remember to replace the title on the right, 
                    but they don't replace the head title tag with the new page title. <ns58:emphasis xmlns:ns58="http://docbook.org/ns/docbook">With Ajax, you have to think about the whole 
                    picture, even with localized changes.</ns58:emphasis></ns56:para>
                </ns54:formalpara>
            </ns53:listitem>
            <ns59:listitem xmlns:ns59="http://docbook.org/ns/docbook">
                <ns60:formalpara xmlns:ns60="http://docbook.org/ns/docbook">
                    <ns61:title xmlns:ns61="http://docbook.org/ns/docbook">Asynchronously performing batch operations</ns61:title>
                    <ns62:para xmlns:ns62="http://docbook.org/ns/docbook">Though one can make edits to a lot of form fields happen immediately, that can cause a lot of problems. For example if one 
                    checks a lot of check boxes that are each sent asynchronously to the server, one loses the ability to keep track of the overall 
                    state of check box changes - the flood of check box change indications will be annoying and disconcerting. An even bigger
                    risk is that of accidentally stopping page activity, or navigating to another page, before background batch operations have
                    completed. This leaves the application in an inconsistent state, without the user knowing.</ns62:para>
                </ns60:formalpara>
            </ns59:listitem>
            <ns63:listitem xmlns:ns63="http://docbook.org/ns/docbook">
                <ns64:formalpara xmlns:ns64="http://docbook.org/ns/docbook">
                    <ns65:title xmlns:ns65="http://docbook.org/ns/docbook">Scrolling the page can make the user lose his place</ns65:title>
                    <ns66:para xmlns:ns66="http://docbook.org/ns/docbook">
                        Another problem with popping text into a running page is that it can effect the page scroll. You may be happily reading an 
                        article or paging through a long list, and an asynchronous Javascript request will decide to cut out a paragraph out of 
                        sight, above where you're reading - which disturbs your reading flow. This is obviously annoying and it wastes your 
                        time in trying to figure out your original place.
                    </ns66:para>
                </ns64:formalpara>
            </ns63:listitem>
            <ns67:listitem xmlns:ns67="http://docbook.org/ns/docbook">
                <ns68:formalpara xmlns:ns68="http://docbook.org/ns/docbook">
                    <ns69:title xmlns:ns69="http://docbook.org/ns/docbook">Browser compatibility</ns69:title>
                    <ns70:para xmlns:ns70="http://docbook.org/ns/docbook">
                        AJAX assumes, at this stage, a modern desktop browser with ample CPU and memory resources. Though XHTML, and
                        emerging standards such as XForms, promote interoperability with every conceivable user agent, AJAX erodes
                        this vision by making pages non-usable in text browsers, cellular phones, hand-held devices, and
                        special browsers for disabled people.
                    </ns70:para>
                </ns68:formalpara>
            </ns67:listitem>
        </ns23:orderedlist>
    </ns21:para>
    <ns71:section xmlns:ns71="http://docbook.org/ns/docbook">
        <ns72:title xmlns:ns72="http://docbook.org/ns/docbook">Conclusion</ns72:title>
        <ns73:para xmlns:ns73="http://docbook.org/ns/docbook">
            In cases where true interactivity and desktop-client responsiveness are required, the value of a web-based presentation
            layer should be questioned (and possibly be substituted with a Java WebStart application, for instance). In all other
            cases, it will often be found that the problems AJAX introduce regarding interoperability, usability, and inconsistency/brittleness 
            outweigh its value.
        </ns73:para>
    </ns71:section>
    
</ns17:section>