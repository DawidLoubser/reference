<?xml version="1.0" encoding="UTF-8"?>
<!-- Small introduction to the concept fo tiered (or layered) architecture -->
<section xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude" id="components.technologies.persistence.tieredDataBaseArchitecture">
    <title>Tiered Database Architectures</title>
    <figure>
        <title>3-tiered database architecture</title>
        <graphic fileref="3tierArchitecture.jpg"/>
    </figure>
    <para>In two-tier systems the Client application sends direct queries to the database. In
        three-tier systems a Client application sends CORBA, RMI or HTTP requests to an application
        server. The application server then communicates with the database on the client's behalf.</para>
    <para> The tiers are thus typically: 
        <orderedlist>
            <listitem><para>The Client machines who receive input from users.</para> </listitem>
            <listitem><para>An Application server which contains the business logic and which interacts
                with the database.</para> </listitem>
            <listitem><para>The database server.</para></listitem>
        </orderedlist> 
        
        The middle tier allows tighter control over access and updates to the
        database. In addition, requests are decoupled from the eventual database request which could
        in itself be very complex, perhaps requesting information from a number of databases. </para>
    <para>
        <emphasis>It is very uncommon to expose the database directly over the network to clients. It always
        makes sense to deploy a layer which presents specific services, using standard communication protocols.
        The Database should simply be encapsulated as the storage layer.
        </emphasis>
    </para>
</section>
