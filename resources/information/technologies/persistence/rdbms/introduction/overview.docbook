<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.technologies.persistence.rdbms.introduction.overview">

    <title>Overview of relational databases</title>
  
  <!--figure>
      <title>Relational Databases</title>
      <mediaobject>
         <imageobject>
            <imagedata fileref="rdbmsSchematic.jpg"/>
         </imageobject>
      </mediaobject>
  </figure -->
  
    <para> Relational databases have for some decades dominated the realm of persistent business
        information. They provide efficient mechanisms for simple to medium complexity queries. The
        information is stored in a collection of linked tables which are intuitively simple and it
        is an easy task for semi-computer literate people to write database queries for relational
        databases. </para>
    <para> The database community has developed a Standard Query Language (SQL), a
        database-independent query language which is supported by virtually every relational
        database. JDBC (Java Database Connectivity) and JSQL provide convenient access to relational
        databases from Java. </para>
    <para>Relational databases store information in tables. The rows represent data items (records)
        and the columns represent data fields. For example, a collection of accounts could be stored
        in a table of two columns (one for the account number and one for the balance). There could
        be one row for each account. In order to decide which tables are required for a database one
        can, at least as a first approximation, make an object oriented analysis of the system
        (e.g. company) and create a table for each class. The objects (instances of the class) map
        onto the rows of the table and the state of the object is specified by the values in the
        table columns.</para>
    <para> However, Object-oriented applications are neither designed nor written with a table view. 
        Instead, there is usually an object design (usually in UML -- the Unified Modeling Language) behind
        the design of Java applications. The resulting object graphs typically contain
        specialization, composition and association relationships. </para>
    <para> In the case where a relational database provides the persistence support, these object
        graphs have to be mapped onto tables. Typically this is done manually which is expensive,
        both, in development and in maintenance. More and more tools providing automatic
        object-to-relational mapping are being developed by companies like Oracle, Sybase, Sun and
        TopLink. </para>
    <para> The mapping is, however, not perfect. Though XML schemas (not DTDs), support
        specialization, composition and association relationships, relational databases can only
        support some of these relationships indirectly resulting in some more or less complex
        mapping. Consequently, object databases are coming more and more prevelant in areas where
        complex object graphs are important (e.g. applications with many specialization
        relationships like CAD/CAM, robotics or financial derivatives). </para>
    <para> Relational databases are, however, optimized for executing high volumes of simple queries
        and remain the dominant form of persistence for everyday business data. </para>
</section>