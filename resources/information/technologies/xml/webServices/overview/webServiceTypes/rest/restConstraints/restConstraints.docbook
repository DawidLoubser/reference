<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- author: fritz@solms.co.za -->
<section 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
    <title>Rest constraints</title>
    <para>
        Without an infrastructure/architecture, one can do virtually anything. Within
        message-based (big or SOAP-based) web services the rules are that documents or
        SOAP messages are exchanged and that the interaction is commonly specified in a
        WSDL based services contract.
    </para>
    <para>
        REST aims to reduce the complexity and increase the uniformity of offering web services by
        specifyng a set of rules or constraints.
    </para>
    <section>
        <title>Uniform interface</title>
        <para>
            Only the standard HTTP resource management services are supported, i.e. <literal>GET</literal>, <literal>POST</literal>,
            <literal>PUT</literal> and <literal>DELETE</literal>. Note that <literal>GET</literal>, 
            <literal>PUT</literal> and <literal>DELETE</literal> 
            <note><para>
                Note that this approach is similar to other resource centric frameworks like persistence APIs which also commonly
                support a these 4 operations (e.g. <emphasis>select</emphasis>, <emphasis>update</emphasis>, <emphasis>insert</emphasis>
                and <emphasis>delete</emphasis>).
            </para></note>
        </para>
    </section>     
    <section>
        <title>Stateless</title>
        <para>
            No client context is stored on the server between requests. 
            Each request from any client contains all of the information necessary to service the request, and any session state 
            is held in the client. 
        </para>
    </section>     
    <section>
        <title>Cacheable</title>
        <para>
            Responses must explicitly specify themselves as either cacheable or not cacheable. This improves scalability and performance.
        </para>
    </section>     
    <section>
        <title>Layered system</title>
        <para>
            A client is decoupled from the actual service providers and is not aware of whether it has a connection to the
            ultimate service provider or an intermediary. Intermediaries can do load balancing, enforce security policies, 
            provide caching, perform logging or adaption, .... A client application interacting with the resource specifies
            only the resource URI (or the data for the resource itself) and the action to be performed on the resource.
            It does not need to know whether there are caches, proxies, gateways, firewalls, 
            tunnels, or anything else between it and the server hosting the resource. 
        </para>
    </section>     
</section>    