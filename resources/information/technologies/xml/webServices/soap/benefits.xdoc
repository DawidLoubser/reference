<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    @author D.Loubser 
-->
<section xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      id="resources.information.technologies.xml.webServices.soap.benefits">
    
    <title>The Benefits of SOAP</title>
    
    <para>
        A SOAP <literal>XML</literal> document, which is referred to as a <emphasis>SOAP Message</emphasis>,
        is a self-contained, self-describing unit of information, very similar to that prescribed by the <emphasis>Command</emphasis> design
        pattern. It represents either a <emphasis>request</emphasis>, or a <emphasis>response</emphasis> to such a request.
        Because of the self-describing and machine validatable nature of <literal>XML</literal> with <literal>Schema</literal>,
        any node along a particular path through which a SOAP Message travels can correctly understand the purpose of the message.
    </para>
    <para>
        The SOAP Specification does not include details of low-level network protocols or sockets - SOAP Messages
        are usually carried as the payload of an existing protocol. For example, the most common SOAP <emphasis>transport</emphasis>
        layer in use today is <literal>HTTP</literal> (typically used by web browsers to access web pages). The SOAP
        Specification thus only includes <emphasis>abstract</emphasis> <quote>message exchange patterns</quote>, which can be
        realised in any existing protocol, such as <literal>SMTP</literal> (E-Mail), or even raw <literal>TCP/IP</literal> (network
        sockets).
    </para>
    <para>
        SOAP Messages can be used in a <emphasis>One-Way</emphasis> or a <emphasis>Request-Response</emphasis> messaging schema.
        In the former, messages only travel in one direction (from a <literal>sender</literal> to a <literal>receiver</literal>).
        In the latter, the <emphasis>senders</emphasis> expects a response from the receiver.
    </para>
    <para>
        SOAP defines how messages can be structured and processed in a way which is completely independent of any programming
        language or platform. Because the design of your objects (expressed in <literal>UML</literal>) can be equally (and even automatically)
        mapped to both a programming language such as <emphasis>Java</emphasis>, as well as to an <emphasis>XML Schema</emphasis>,
        SOAP Messages can convey the exact same information set as those used internally in systems. Automatic binding can transfer
        information between the two domains (in the example of Java, by using frameworks such as <literal>JAXB</literal> or 
        <literal>XMLBeans</literal>). This means that a design only has to be expressed once, and less time has to be spent on
        mapping domains to each other. In any case, different structural designs in XML can be transformed to each other using
        standard XML tools such as <literal>XSLT</literal>.
    </para>
    <para>
        Much of the tidal wave of support behind SOAP is attributed to this grounding in XML, since other attempts at cross-platform
        interoperability such as CORBA's <literal>IIOP</literal> protocol are often more powerful, but also much more complex to
        process and understand (and certainly not self-describing).
    </para>
    <para>
        Anyther reason for this popularity is that the preferred transport layer (and currently the only one officially endorsed
        by the <emphasis>WS-I</emphasis> basic profile) is HTTP. Though most network access controls (such as firewalls) will
        block binary protocols such as IIOP, they almost all allow the text-based HTTP protocol, making almost all nodes on the internet
        open for SOAP access.
    </para>
    <para>
        And finally, a reason which is not founded on technical merits - but which carries much weight nevertheless - is the fact that
        SOAP immediately gained formal support from <emphasis>IBM</emphasis> and <emphasis>Microsoft</emphasis>. Combined with the
        fact that Microsoft never supported <literal>CORBA</literal>, and that it's own attempt at a distributed object technology
        (<literal>DCOM</literal>) was a commercial failure, this sent a very clear message to the IT industry that everybody had 
        better get on the SOAP bandwagon.
    </para>
</section>
