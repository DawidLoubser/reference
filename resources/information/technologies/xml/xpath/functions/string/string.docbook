<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xml:id="resources.information.technologies.xml.xpath.functions.string.string">
    <title>String functions</title>
    
    <para>
<programlisting><![CDATA[ string string(object?) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ string concat(string, string, string*) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ boolean starts-with(string, string) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ boolean contains(string, string) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ string substring-before(string, string) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ string substring-after(string, string) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ string substring(string, number, number?) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ number string-length(string?) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ string normalize-space(string?) ]]></programlisting>
    </para>
    
    <para>
<programlisting><![CDATA[ string translate(string, string, string) ]]></programlisting>
    </para>
    
    <section>
        <title>XPath-2/XQuery-1 string functions</title>
        <para>
            <itemizedlist>
                <listitem><formalpara>
                    <title>string-join</title>
                    <para>
                        joins a sequence of strings into a single string using a provided separator string. For example
                        <programlisting><![CDATA[
fn:string-join(('To', 'be', 'or', 'not' 'to' 'be'), ' ') returns " To be or not to be ".                            
                            ]]></programlisting>
                    </para>
                </formalpara></listitem>
                <listitem><formalpara>
                    <title>codepoints-to-string and string-to-codepoints</title>
                    <para>
                        allow one to transform from a set of characters codes to a string and vice versa. For example
                        <programlisting><![CDATA[
fn:codepoints-to-string((12, 15, 3))                            
                            ]]></programlisting>
                        returns a string whose characters have the (Unicode) character numbers 12, 15 and 3. Similarly
                        <programlisting><![CDATA[
fn:string-to-codepoints("ABC")                        
]]></programlisting>
                        returns the sequence of numbers corresponding to the letters A, B and C in the chosen character
                        encoding.
                    </para>
                </formalpara></listitem>
                <listitem><formalpara>
                    <title>Regular expression based matching, replacement and tokenization</title>
                    <para>
                        The function 
                        <programlisting><![CDATA[
fn:matches($s, $pattern)                            
                            ]]></programlisting> checks whether the provided string 
                        <literal>$s</literal> matches the provided regular expression, <literal>$pattern</literal>.
                        The function
                        <programlisting><![CDATA[
fn:replace($sourceString, $pattern, $replacementString)                            
]]></programlisting>
                        finds all matches to the regular expression in the source string and replaces it with the
                        replacement string.
                        Finally
                        <programlisting><![CDATA[
fn:tokenize($s, $pattern)                            
                            ]]></programlisting>
                        returns a sequence of sub-strings obtained by using any characters which match the regular
                        expression as separator.
                    </para>
                </formalpara>
                </listitem>
            </itemizedlist>
          </para>
    </section>
</section>
