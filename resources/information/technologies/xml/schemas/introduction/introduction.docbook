<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction</title>
  
  <indexterm>
    <primary>XML</primary>
    <secondary>schema</secondary>
    <tertiary>introduction</tertiary>
  </indexterm>
  
    <para> 
        For XML to be useful as a universal data representation mechanism,
        a method of specifying and enforcing <emphasis>document vocabularies</emphasis>
        is required. This would allow different parties to agree upon the structure
        and contents of exchanged documents, as well as for documents to be
        inherently self-describing.
    </para>
    <para>
        The initial mechanism for this was DTD (Document Type Definition), inherited
        from XML's origins in the SGML language. But DTDs are rather limited, being a simple
        tetx-based pattern language.
    </para>
    <para>XML Schema - the W3C official standard for specifying vocabularies since 2001 - have 
      several advantages over DTD:
    <itemizedlist>
        <listitem>
            <para>They are written in XML</para>
        </listitem>
      <listitem>
        <para>Schema is a strongly-typed language, with a rich set of
        primitive data types upon which to build complex data types</para>
      </listitem>
      <listitem>
        <para>
          Schema is an object-oriented language, allowing one to treat
          XML in the context of classes and instances
        </para>
      </listitem>
        <listitem>
            <para>They support (and depend on) XML name spaces</para>
        </listitem>
        <listitem>
            <para>They are extensible: higher-level vocabularies can be
              assembled from lower-level ones</para>
        </listitem>
        
    </itemizedlist>
    </para>
    
    <section>
        <title>Schemas are defined in XML</title>
        <para> This is a major advantage. Not only can you use standard XML tools to develop,
            view and process schemas (e.g. editors, browsers, parsers, ... ), but application
            developers and schema authors need not learn the often complex syntax of
            another language, such as EBNF which is used for DTDs.
        </para>
    </section>
  
  <section>
    <title>Data Types</title>
    <para> DTDs only support text strings as data types. Schemas, on the other hand, define
      all the primitive data types commonly found in high-level programming language, and allow 
      you to define your own simple or complex data types. And because schemas support 
      specialization, you can even derive your own types from the built-in types.
    </para>
  </section>
  
  <section>
    <title>Object-orientation</title>
    <para>
      XML Schema allows you to reconsider the semantics of how XML is dealt with: An
      XML document is no longer simply such; it is treated as an instance
      (an object) of a class which is defined in a Schema. All the benefits
      of object-orientation - such as specialisation (classes extending other
      classes) and substitutability - are available.
    </para>
    <para>
      The most significant impact of this is that one can naturally map one's
      UML-based design model directly to XML, without having to map the design
      to a different conceptual domain.
    </para>
  </section>

    <section>
        <title>Namespace Support</title>
        <para> Although XML without schemas supports namespaces - which allows you to extract
            elements from various DTDs without the danger of name conflict and ambiguities - DTDs
            themselves <emphasis>do not support namespaces</emphasis>.
        </para>
        <para> It is thus not possible to assemble higher level vocabularies from lower level
            vocabularies - DTDs do not support a component based approach to document type specifications.</para>
        <para> Schemas, on the other hand, have direct support for name spaces and hence one can
            use a component based approach with schemas. One can thus assemble complex schemas
            from simpler ones and one can extract elements from one schema and use them in another.</para>
    </section>

    <section>
        <title>Schemas are Extensible</title>
        <para> Schemas provide support for extensibility directly in the language. Future
            additions and specializations are thus directly facilitated.</para>
    </section>


</section>
