<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0" xml:id="resources.information.technologies.xml.xsl-fo.introduction.introduction">
    <title>Introduction to XSL-FO</title>
    <para>
        XSL Formatting Objects is itself an XML-based markup language that lets you specify in great detail 
        the pagination, layout, and styling information that will be applied to your content. The XSL-FO markup is 
        quite complex. It is also verbose; virtually the only practical way to produce an XSL-FO file is to use XSLT 
        to produce a source document. Finally, once you have this XSL-FO file, you need some way to render it to an 
        output medium.
    </para>
    <para>
        The XSL-FO vocabulary is a large one, and it was designed to describe exactly <emphasis>how the information
        is presented</emphasis>, but in the process, the meaning of the data (i.e. what it represents) is lost.
        Consider the following XML data:
        <programlisting language="XML">
<xi:include href="temperatureData.xml" parse="text"/>
        </programlisting>
    </para>
    <para>
        A specific XML vocabulary (for example, the temperature data above) only conveys 
        the information in it's "pure" state - with no regard to presentation or distribution. Though easy to 
        understand to human eyes (due to the verbosity of XML), it is primarily processed and understood
        by machine. XSL-FO, on the other hand, is an XML vocabulary which could, for instance, specify
        precisely how the above data should be represented on a nice glossy print-out, intended for human
        consumption. It is concerned entirely with the presentation of data, and would no longer contain any
        tags which could describe to a machine that this is indeed temperature data.
    </para>
    <para>
        Consider, for example, that we want to render the temperature data to a PDF file which represents
        the data in a simple table on a 12cmx12cm CD cover, for example:
    </para>
    <figure>
        <title>Simple PDF produced from XSL-FO</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="temperatureData.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>
    <para>
        The XSL-FO data involved is quite verbose, and one can see clearly that the data is no longer
        described by the vocabulary - only its appearance is:
        <programlisting>
<xi:include href="temperatureData.fo" parse="text"/>
        </programlisting>
        It is apparent why one would almost never want to hand-code XSL-FO data - it is best transformed from
        some other XML vocabulary using XSLT. The example above is quite simplistic - the real power of
        XSL-FO becomes apparent when one considers it's quite advanced manipulation of page sets and
        masters, international capabilities (e.g. Japanese text), handling of page numbers, and the like.
        These features justify the complexity, and if not required, it is often useful to use a simpler
        styling technology such as CSS.
    </para>
    
</section>
