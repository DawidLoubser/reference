<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
  xml:id="resources.information.technologies.xml.xsl-transform.templates.concepts.documentManipulation">
  <title>Document manipulation</title>
  <para> Though often used in examples, the XSLT processor does not have
    to output HTML or XSL-FO: It can output to any arbitrary document
    vocabulary. XSLT is often used to translate between incompatible
    vocabularies (possibly for reasons of systems integration). XSLTs
    pattern-matching and re-sequencing capabilities can be used to great
    effect to fundamentally alter document structures. In the following
    example, a person is transformed into a different vocabulary (with the
    same fundamental information): 
    <programlisting language="XML"><![CDATA[
]]><xi:include xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" href="src/employee.xml" parse="text"/><![CDATA[
]]></programlisting> Transformed with the following stylesheet: 
    <programlisting language="XML"><![CDATA[
]]><xi:include xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" href="src/employee2emp.xsl" parse="text"/><![CDATA[
]]></programlisting> The output: 
    <programlisting language="XML"><![CDATA[
]]><xi:include xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" href="src/emp.xml" parse="text"/><![CDATA[
]]></programlisting>
  </para>
</section>