<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-16 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Services</title>
    <para>
        <indexterm>
            <primary>service</primary>
        </indexterm> One can use a UML class diagram to show the services provided be any instance
        of the class. </para>

    <para> For example, <xref
            linkend="technology.uml.classDiagram.service.insurer_fig"/> specifies
        two services provided by an insurer, that of providing a quote for a policy specification
        and that of processing a claim against an existing policy. </para>

    <figure xml:id="technology.uml.classDiagram.service.insurer_fig">
        <title>Services are shown in a separate services compartment.</title>
        <mediaobject>
            <imageobject>
                <imagedata width="400" fileref="insurer.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>

    <section>
        <title>Service inputs</title>
        <para>
            <indexterm>
                <primary>service</primary>
                <secondary>parameter</secondary>
            </indexterm> Each service is identified by a name and the types of input objects which
            need to be provided when requesting that service. The service may have a list of
            parameters encapsulated within round brackets. By default, these parameters resemble
            input parameters, <abbrev>i.e.</abbrev> information or physical objects which the client
            provides to the service provider upon service request, but which are not returned to the
            client once the service has been completed. </para>
        <para> The input parameters are objects which the service provider requires in order to be
            able to render the service. These may resemble information which must be provided to the
            service provider or physical objects. In our example the client will have to provide the
            policy specification and his/her personal details when requesting a quote for a policy. </para>
        <para> The information conveyed with these objects is specified in separate class diagrams.
            We would thus add a class diagram for the <literal>PersonalDetails</literal> class
            specifying in detail the type of personal information the insurer requires as well as
            class diagram specifying the information which would be provided as the
                <literal>PolicyRequirements</literal>. </para>

        <note>
            <para> For each input and return type one would introduce a class diagram to specify the
                information which is conveyed. For example, the class diagram for a Quote would
                specify the information which would be contained in the quote. </para>
        </note>

        <section>
            <title>Assigning a business process to a service</title>
            <para> UML allows one to attach a business or system process to a service. The latter
                would normally be specified using activity diagrams, sequence diagrams as wel as
                potentially other dynamic model diagrams. </para>
        </section>

        <section>
            <title>Assigning role names to the input objects</title>
            <para>
                <indexterm>
                    <primary>role name</primary>
                </indexterm>
                <xref linkend="technology.uml.classDiagram.service.insurer_fig"/>
                specifies that an instance of a claim (<literal>:Claim</literal>) must be provided
                when requesting the processing of a claim. The instance of the claim received is not
                given a role name. It simply plays the role of a claim. In cases where the role
                played by a provided object is obvious, one need not specify a role name for the
                input object. </para>

            <para> However, in cases where the role of an input object is not obvious from the
                service signature, one needs to assign a role name to that object. This is often the
                case when multiple instances of the same classes are provided to the service
                provider upon service request. </para>

            <figure xml:id="technology.uml.classDiagram.service.shipper_fig">
                <title>Specifying the role names for the different input objects.</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width="400" fileref="shipper.jpg"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para> For example, the shipper provides a service to ship a package given a package
                identifier and two addresses. <xref
                    linkend="technology.uml.classDiagram.service.shipper_fig"/>
                uses role names to specify that the one address is the address where the package
                should be collected from and that the other address is the delivery address. </para>

            <note>
                <para> It is usually preferable to combine multiple parameters into a single higher
                    level request parameter. For example, the packetID, collection address and
                    destination address could be combined into a single
                    <literal>deliveryRequest</literal> parameter whose structure would be defined in
                    a class diagram for a <literal>DeliveryRequest</literal>. </para>
            </note>
        </section>

        <section>
            <title>What if the service provider does not require any information from the client?</title>
            <para> At times service providers are willing and able to deliver a service without the
                user/client having to provide any other information than to request the service
                itself. In such cases the input objects list is left empty. </para>

            <figure xml:id="technology.uml.classDiagram.service.noParameters_fig">
                <title>A service without any input objects.</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width="400" fileref="noParameters.jpg"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                <xref
                    linkend="technology.uml.classDiagram.service.noParameters_fig"
                /> specifies that training institutions can provide the current course schedule
                without requiring any further information from the client requesting the course
                schedule. </para>
        </section>
    </section>

    <section>
        <title>Return types</title>
        <para>
            <indexterm>
                <primary>service</primary>
                <secondary>return type</secondary>
            </indexterm> The end of the service signature may optionally specify a return type. For
            example, <xref
                linkend="technology.uml.classDiagram.service.insurer_fig"/>
            specifies that the <literal>provideQuote</literal> service returns a quote and that the
                <literal>processClaim</literal> service provides a
            <literal>SettlementReport</literal>. The information returned with the quote and the
            settlement report would then be specified in separate class diagrams for these objects. </para>

        <section>
            <title>What if multiple deliverables?</title>
            <para>
                <indexterm>
                    <primary>service</primary>
                    <secondary>return type</secondary>
                    <tertiary>compound</tertiary>
                </indexterm> UML allows for only a single return value. The return value can,
                however, be a composite object which has many components. For example, if the result
                of a purchase is a package of items plus the invoice, then these can be packaged
                within a higher level object, say a <literal>Package</literal>, which contains the
                package of items and the invoice. </para>
            <figure xml:id="technology.uml.classDiagram.service.outInoutParameters">
                <title>Compound return values</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width="400" fileref="compoundReturnTypes.jpg"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para> Alternatively one can use output parameters to provide multiple deliverables (see
                    <xref
                    linkend="technology.uml.classDiagram.service.outInoutParameters"
                />). </para>
        </section>

        <section>
            <title>What if nothing is returned?</title>
            <para>
                <indexterm>
                    <primary>service</primary>
                    <secondary>no return type</secondary>
                </indexterm> At time, service providers perform some activity upon service request
                without returning anything to the client. For example, a radio station may provide a
                service to the weather bureau to announce a weather alert (<abbrev>e.g.</abbrev> a
                storm warning) without returning anything to the weather bureau. The radio station
                simply announces the weather alert. Such services are simply specified without
                return value. </para>
            <figure>
                <title>Services need not have a return type.</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width="400" fileref="noReturnType.jpg"/>
                    </imageobject>
                </mediaobject>
            </figure>

        </section>
    </section>

    <section>
        <title>Input, output and input/output parameters</title>
        <para>
            <indexterm>
                <primary>service</primary>
                <secondary>parameter</secondary>
            </indexterm> So far we have viewed all parameters as input parameters,
            <abbrev>i.e.</abbrev> the parameter objects were provided to the service provider upon
            request, but were not returned. </para>
        <para> However, at times clients provide an object which is modified and returned by the
            service provider. For example, you may request an audio equipment servicer to repair
            your audio equipment supplying the service provider the audio equipment. </para>
        <figure>
            <title>Parameters may be specified as in, out and inout.</title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="inOutParameter.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para> In this case the full service signature would be
            <programlisting>
repair(in problemReport:ProblemReport, inout item:AudioEquipment) :Invoice        
        </programlisting>
            specifying that the item to be repaired is provided upon service request and returned
            when the service has been provided. </para>

        <note>
            <para>
                <indexterm>
                    <primary>service</primary>
                    <secondary>parameter</secondary>
                    <tertiary>in</tertiary>
                </indexterm>
                <indexterm>
                    <primary>service</primary>
                    <secondary>parameter</secondary>
                    <tertiary>out</tertiary>
                </indexterm>
                <indexterm>
                    <primary>service</primary>
                    <secondary>parameter</secondary>
                    <tertiary>inout</tertiary>
                </indexterm> The UML tool will support the specification of a parameter as an in,
                out or inout parameter. The information would be maintained in the model and need
                not be shown on the class diagrams. </para>
        </note>
    </section>

    <section>
        <title>Multiple services with same service name (overloading)</title>
        <para>
            <indexterm>
                <primary>service</primary>
                <secondary>overloading</secondary>
            </indexterm> UML supports the concept of following different business processes
            depending on the types of parameters provided when the service is requested. For
            example, a bank could specify different business processes for processing different
            types of loan applications. </para>

        <figure>
            <title>Different business processes may be followed for different input parameters.</title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="overloading.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
</section>
