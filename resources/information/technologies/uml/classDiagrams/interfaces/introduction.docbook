<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-16 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction</title>

    <para> Interfaces provide a mechanism for decoupling clients from specific service providers.
        The services the client requires for his business processes are encapsulated within an
        interface. The aim is to be able to use any service provider
        realising the client's service
        requirements (any service provider implementing the interface) without making any changes to
        the client's business process. </para>

    <para> An interface is usually used to encapsulates the client's requirements around the
        services from a particular domain of responsibility. It can be seen as the core of a services
        contract, listing the services required from some responsibility domain. The client
        dependencies are thus abstracted from a dependency on some particular service provider to a
        dependency on certain services being provided. As such, interfaces provide a mechanism for
        abstracting from any particular service provider. </para>
    <para> If a concrete service provider claims to implement or realise and interface, the service
        provider is required to provide all the services specified in the interface. </para>

    <para> UML enables one to assign a business or system process to a service of a class. This is,
        however, not possible for interfaces. The interface specifies the service requirements and
        ultimately the services contract. The business processes used to realise these services
        contracts is left to the individual service providers. </para>
</section>
