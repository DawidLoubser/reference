<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-16 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Abstract classes</title>
    <para> Abstract classes are classes which cannot be instantiated, <abbrev>i.e.</abbrev> classes
        for which one cannot create any instances/objects. They are used to <itemizedlist>
            <listitem>
                <para> introduce an abstract concept which one can work with, </para>
            </listitem>
            <listitem>
                <para> encapsulate commonalities across the specialized classes, and to </para>
            </listitem>
            <listitem>
                <para> lay down requirements specification for concrete subclasses. </para>
            </listitem>
        </itemizedlist>
    </para>

    <para> UML tools provide a mechanism which enables the user to declare a class abstract. The
        class name for an abstract class is rendered in italics. </para>

    <figure xml:id="technology.uml.classDiagram.specialization.chargeables_fig">
        <title>A class hierarchy of various levels of abstract chargeables with concrete leaf
            chargeables.</title>
        <mediaobject>
            <imageobject>
                <imagedata width="400" fileref="chargeables.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>
        <xref linkend="technology.uml.classDiagram.specialization.chargeables_fig"
        /> shows various chargeables. The class <emphasis>Chargeable</emphasis> as well as the
        sub-classes <emphasis>Product</emphasis> and <emphasis>Service</emphasis> are all abstract
        and cannot be directly instantiated. However, they may still specify attributes (and
        potentially services) which will be inherited by the sub-classes. For example, all
            <emphasis>Chargeable</emphasis>s have a code and an identifier for an income account
        into which the associated income will be accumulated. The lower level abstract classes like
            <emphasis>Product</emphasis> and <emphasis>Service</emphasis> introduce additional
        attributes which are inherited by the concrete leaf classes. </para>

    <section>
        <title>Working with abstract concepts</title>
        <para> However, even if a particular abstract class does not add any attributes or services,
            it still introduces a concept. For example the fact that a
            <emphasis>Consultation</emphasis> is a sub-class of a <emphasis>Service</emphasis>
            specifies that is charged as a service. </para>
        <para> Having introduced the concept of a service enables us to specify logic around that
            concept. For example, we may want to do a resource allocation for scheduled services. </para>

        <figure xml:id="technology.uml.classDiagram.specialization.abstractAccount_fig">
            <title>Orders are processed against any current account.</title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="abstractAccount.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para> As another example, consider the account hierarchy shown in <xref
                linkend="technology.uml.classDiagram.specialization.abstractAccount_fig"
            />. The account class itself has been declared abstract as clients will not be able to
            create instances of this generic account class -- instead they have to choose a concrete
            account like a <emphasis>CreditCardAccount</emphasis> or a
            <emphasis>ChequeAccount</emphasis>. A further level of abstract classes introduces the
            concepts of current, loan and investment accounts. Having introduced the concept of a
            current account, we can now specify that an order can be processed against any current
            account. The client requesting the processing of an order can thus provide, for example,
            a credit or debit card account, but not a loan or an investment account. </para>
    </section>

    <section>
        <title>Abstract services</title>
        <para> For an abstract class one may specify abstract services. These are services for which
            no business process has been specified. Hence, the business process used to realize the
            service is left to individual sub-classes which may each have their own business process
            for realizing the required service. </para>
        <para> For example, we may have different property valuators following different business
            processes when valuating a property. Some property valuators may request the property
            valuation through a property agent, others may use a business process which takes the
            average of the last <emphasis>n</emphasis> properties sold within an area and
            algorithmically adjusts for above average features. </para>

        <figure xml:id="technology.uml.classDiagram.specialization.propertyValuators_fig">
            <title> An abstract PropertyValuator class with an abstract valuation service. </title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="propertyValuators.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para> We may want to specify that property valuators must be able to value a property,
            leaving the actual process which should be used for the valuation to the implementation
            of the individual concrete valuatos. In such a case we would declare the valuation
            service itself as abstract as is done in <xref
                linkend="technology.uml.classDiagram.specialization.propertyValuators_fig"
            />. </para>
    </section>

</section>
