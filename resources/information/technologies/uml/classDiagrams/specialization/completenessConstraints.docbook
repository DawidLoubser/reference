<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-16 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Completeness constraints</title>
    <para> If an aspect of a model should be ficed such that it cannot be refined any further, one
        assigns a <emphasis>complete constraint</emphasis> to that model element. </para>

    <section>
        <title>Fixing a business or system process</title>
        <para> At times one may want to fix a business or system process such that it may not be
            redefined or modified for specialized classes. This requirement is specified in UML by
            placing a <emphasis>complete</emphasis> constraint on the respective service. </para>
        <para> For example, we could (and I am not saying that we should) define an
                <emphasis>authenticate</emphasis> service for the user class which authenticates a
            user based on some authentication credentials. We may want to fix the authentication
            algorithm, that it may not be changed for specialized users, <abbrev>i.e.</abbrev> for
            sub-classes of the <emphasis>user</emphasis> class. If that is the case, then we would
            assign a <emphasis>complete</emphasis> constraint to the
            <emphasis>authenticate</emphasis> service. </para>

        <figure>
            <title>Complete constraint on a service prevents the service from being overridden</title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="authenticate.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>Preventing specialization</title>
        <para> At other times one may want to require that a instances of a class can never be
            modified, <abbrev>i.e.</abbrev> that they are immutable. For example, we may require
            that once an invoice has been issued, it may no longer be modified. In such
            circumstances it may be advisable to prevent subclassing as a subclass may potentially
            add services through which the invoice could be modified. This can be done by applying a
            complete constraint to the class itself. </para>

        <figure>
            <title>Complete constraint on a class prevents specialization of that class</title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="invoice.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
</section>
