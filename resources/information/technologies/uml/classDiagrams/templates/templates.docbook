<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-3-13 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Templates</title>
    <para> UML templates are model elements with unbound formal parameters. They are commonly used
        to define families of classes or operations, but may also be used to define families of
        packages. </para>
    <para> A template based model elements are abstract. Binding the template parameters to actual
        types generates concrete model elements (<abbrev>e.g.</abbrev> concrete classes. </para>

    <section>
        <title>Template classes</title>
        <para> The most common use of templates is that of class templates. A class template defines
            a family of classes whose members are generated by binding the template parameters to
            different types, constants or operations. </para>

        <figure xml:id="technology.uml.classDiagram.template.vector_fig">
            <title>Vector template</title>
            <mediaobject>
                <imageobject>
                    <imagedata width="400" fileref="./vector.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para> For example, <xref
                linkend="technology.uml.classDiagram.template.vector_fig"/> shows
            a vector class template, defining a parametrized vector class.
            <literal><![CDATA[Vector<Double>]]></literal> and
            <literal><![CDATA[Vector<Complex>]]></literal> are two different vector classes
            generated from that template by binding the template type to <literal>Double</literal>
            and <literal>Complex</literal> respectively. </para>

        <para> We can either show how the data type, <literal>DoubleVecotr</literal> is generated
            from the template by binding the template paramter, <literal>T</literal> to
                <literal>Double</literal>, or we can directly define an object as an instance of
            <literal><![CDATA[Vector<Complex>]]></literal>. </para>
    </section>

</section>
