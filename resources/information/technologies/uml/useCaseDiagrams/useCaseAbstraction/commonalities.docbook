<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-15 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Defining common requirements and common actors across use cases</title>
    <para>
        <indexterm>
            <primary>use case</primary>
            <secondary>generalization</secondary>
        </indexterm>
        <indexterm>
            <primary>use case</primary>
            <secondary>abstraction</secondary>
        </indexterm>
        <indexterm>
            <primary>generalization</primary>
            <secondary>use case</secondary>
            <see>use case</see>
        </indexterm>
        <indexterm>
            <primary>use case</primary>
            <secondary>commonalities</secondary>
        </indexterm> Use case generalization or abstraction enables one to specify functional
        requirements and actors at various levels of abstraction. For example, in <xref
            linkend="technology.uml.useCaseDiagram.useCaseAbstraction.commonalities_fig"
        /> the mandatory functional requirement of verifying the card and pin with the bank applies
        to all client services including the electronic banking services (<abbrev>e.g.</abbrev>
        withdraw cash, ...) and the token vending services (<abbrev>e.g.</abbrev> buy bus ticket,
        ...). </para>
    <para> Similarly, the printing of a token must be done for all token vending use cases, but not
        for the electronic banking use cases. Furthermore, for any of the financial transaction
        related use cases, the user may choose to have a transaction confirmation printed. </para>

    <figure xml:id="technology.uml.useCaseDiagram.useCaseAbstraction.commonalities_fig">
        <title>Using use case abstraction to specify commonalities across use cases</title>
        <mediaobject>
            <imageobject>
                <imagedata width="400" fileref="commonalities.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para> A client can make use of any of the client services (all specializations of
            <emphasis>client service</emphasis>), all client services interface with the bank and
        all token vending services interface with a vendor. </para>

    <para> An added benefit of use case generalization, beyond scoping and specifying common
        functional requirements and actors, is that it cleans up the use case diagrams considerably.
        Instead of having to draw an association from the client use case to each concrete use case,
        we just draw a single association to the generic <emphasis>client services</emphasis> use
        case. Similarly, we do not need to draw an
        <literal>&lt;&lt;include&gt;&gt;</literal> relationship from each concrete
        token vending use case to the mandatory functional requirement of having to print a token. </para>

</section>
