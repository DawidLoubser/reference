<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-21 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Concurrencies in activity diagrams</title>
    <para>
        <indexterm>
            <primary>concurrency</primary>
            <secondary>activity diagram</secondary>
        </indexterm> If certain steps in a process are independent of one another, they can be
        performed concurrently. Such activities should be shown as concurrent in a implementation
        neutral process specification. When the implementation mapping is done, the implementors may
        still choose to implement such work flow steps sequentially. Modeling them as concurrent
        implies that they could be implemented concurrently. </para>

    <section>
        <title>Forking</title>
        <para>
            <indexterm>
                <primary>fork</primary>
            </indexterm>
            <indexterm>
                <primary>thread</primary>
                <secondary>of activity</secondary>
            </indexterm> Concurrencies are introduced in an activity diagram via forking,
                <abbrev>i.e.</abbrev> a single thread of activity forks into multiple concurrent
            threads of activity. A fork is shown as a bar with a single edge leading into the bar
            and multiple edges leading out of the bar, each edge representing a flow or thread of
            activity. </para>

        <figure xml:id="technology.uml.activityDiagram.concurrency.sendMessage_fig">
            <title>Sending messages in a background thread</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./sendMessages.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>Flow final node</title>
        <para> A flow final node is used to show the end of a flow or thread of activity. It is
            drawn as a circle with a diagonal cross. The process may still continue as other threads
            of activity may still be active. </para>
    </section>

    <section>
        <title>Synchronization</title>
        <para> At times one needs to block a business or system process until certain concurrent
            activities have been completed. This is specified in UML using a synchronization bar.
            Synchronization bars are similar to forks except that multiple threads of activity lead
            into the bar while a single thread of activity leads out of the bar. </para>

        <figure xml:id="technology.uml.activityDiagram.concurrency.processClaim_fig">
            <title>An activity diagram for the processing of a claim</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./processClaim.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            <xref
                linkend="technology.uml.activityDiagram.concurrency.processClaim_fig"/>
             uses a synchronization bar to block the business process until both, the policy
            coverage report and the claim valuation report have been received. Only then does
            finance go ahead to generate a settlement offer. </para>
    </section>

</section>
