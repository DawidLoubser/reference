<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-16 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Components</title>
    <para> Components are pluggable service providers. They are pluggable by virtue of realizing one
        or more services contracts. </para>
    <para> Components are thus concrete modular parts which hide any implementation details around
        the services they provide and their current state behind external interfaces. Components
        realizing the same services contract may be readily exchanged. </para>
    <para> Components should be only loosely coupled to other components. As such one would not want
        a direct dependency between two components. Instead the coupling would be via services
        contracts for any required service providers. These would be represented by required
        interfaces. </para>

    <para> In UML a component is shown as a class diagram with the component stereotype. This can be
        represented as a component stereotype icon which is a rectangle with two smaller rectangles
        protruding on the left edge. </para>

    <figure xml:id="technology.uml.componentdiagram.component.productDispenser_fig">
        <title>Components are pluggable classes</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="productDispenser.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>
        <xref
            linkend="technology.uml.componentdiagram.component.productDispenser_fig"
        /> shows a show-case product dispenser as a pluggable product dispenser (providing the
        services required from a product dispenser). The product dispenser requires the services of
        a product store which is itself pluggable. This is shown via a required interface for
        product store. </para>
</section>
