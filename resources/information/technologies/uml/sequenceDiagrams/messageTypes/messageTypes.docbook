<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2006-12-18 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Message types</title>
    <para>
        <indexterm>
            <primary>synchronous message</primary>
            <see>message</see>
        </indexterm>
        <indexterm>
            <primary>asynchronous message</primary>
            <see>message</see>
        </indexterm>
        <indexterm>
            <primary>lost message</primary>
            <see>message</see>
        </indexterm>
        <indexterm>
            <primary>found message</primary>
            <see>message</see>
        </indexterm>
        <indexterm>
            <primary>create message</primary>
            <see>message</see>
        </indexterm>
        <indexterm>
            <primary>destroy message</primary>
            <see>message</see>
        </indexterm>
        <indexterm>
            <primary>sequenceDiagram</primary>
            <secondary>messageTypes</secondary>
        </indexterm> A message is used to either communicate some information or to request a
        service. In either case a client may choose whether to wait for a response or not. </para>

    <figure>
        <title>UML notation for various message types</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./notation.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para> UML supports the following message types in interaction diagrams: <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Synchronous request and return</title>
                    <para>
                        <indexterm>
                            <primary>sequenceDiagram</primary>
                            <secondary>messageTypes</secondary>
                            <tertiary>synchronous</tertiary>
                        </indexterm> A synchronous request is a blocking service request where the
                        business or system process of the client or sender blocks until a response
                        has been received. A synchronous request is shown in UML using a solid line
                        with a filled arrow head pointing from the client or message sender to the
                        service provider or message consumer. The return of a synchronous request
                        must always go back to the client who made the initial synchronous request.
                        It is shown as a dashed line with an open arrow head pointing from the
                        service provider or message consumer to the client or message sender.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Asynchronous messages</title>
                    <para>
                        <indexterm>
                            <primary>sequenceDiagram</primary>
                            <secondary>messageTypes</secondary>
                            <tertiary>asynchronous</tertiary>
                        </indexterm> Asynchronous messages are non blocking. The client does not
                        wait for a response and directly continues with its business or system
                        process after having dispatched the message. Asynchronous messages are shown
                        in UML using a dashed line with an open arrow. </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Object creation</title>
                    <para>
                        <indexterm>
                            <primary>sequenceDiagram</primary>
                            <secondary>messageTypes</secondary>
                            <tertiary>create</tertiary>
                        </indexterm> Often one needs to domain objects within a business or system
                        process. For example, at some stage in a vending process one needs to create
                        an invoice. This is done in UML using a create message which points to the
                        actual object diagram. The object did not exist before the create message
                        and no life line is present for these earlier times. <note>
                            <para> In some UML tools you first put the object on the horizontal axis
                                and then draw a create message to its life line. The tool will pull
                                down the object diagram to the point where the create message was
                                received. </para>
                        </note>
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Destroy message</title>
                    <para>
                        <indexterm>
                            <primary>sequenceDiagram</primary>
                            <secondary>messageTypes</secondary>
                            <tertiary>destroy</tertiary>
                        </indexterm> A destroy message destroys the object, <abbrev>i.e.</abbrev>
                        the object will no longer exist after the destroy message has been received.
                        This is shown in UML by putting a cross at the end of the life line of the
                        destroyed object. </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Lost message</title>
                    <para>
                        <indexterm>
                            <primary>sequenceDiagram</primary>
                            <secondary>messageTypes</secondary>
                            <tertiary>lost message</tertiary>
                        </indexterm> A lost message is a message for which the sender is known, but
                        the receiver is not. It is shown in UML by drawing a message from the life
                        line of the sending object to a circle representing an unknown message
                        recipient. </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Found message</title>
                    <para>
                        <indexterm>
                            <primary>sequenceDiagram</primary>
                            <secondary>messageTypes</secondary>
                            <tertiary>found message</tertiary>
                        </indexterm> A found message is a message for which the receiver is known,
                        but the sender is not known. A found message is shown by drawing a the
                        message from a solid circle to the life line of the object which receives
                        the message. </para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>
</section>
