<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-2-18 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Simple sequence diagrams</title>
    <para>
        <indexterm>
            <primary>sequence diagram</primary>
        </indexterm> In a sequence diagram, the role players (<abbrev>i.e.</abbrev> the objects
        participating in the collaboration) are aligned along the horizontal axis while time
        increases along the vertical axis. The sequence diagram then shows messages exchanged
        between these role players in time order. </para>

    <figure>
        <title>High level sequence diagram for the buy product use case of a vending outlet</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="vendingOutlet.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>

    <section>
        <title>The time axis</title>
        <para>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>time axis</secondary>
            </indexterm> Time increases in the vertical direction. The time sequence of the messages
            is thus specified by their vertical positioning. </para>
    </section>

    <section>
        <title>The objects</title>
        <para>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>objects on</secondary>
            </indexterm> Along the horizontal axis we have aligned the objects participating in the
            collaboration. Normally one draws the sequence diagram for a particular level of
            granularity. The objects (the user interface, controller, cashier and product dispenser
            of the vending outlet) are all from the same level of granularity. The diagram does not
            show any low level components like the coin counter or the mechanism which extracts the
            products from the store. </para>

        <para>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>interface based</secondary>
            </indexterm>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>contracts</secondary>
            </indexterm> When specifying an object one may choose an instance of a class
            (represented by <emphasis>:ClassName</emphasis>). Alternatively and often preferably one
            would leave the selection of an implementation class to the implementation phase. During
            the design phase one would only specify that the object is an instance of some or other
            class which implements the specified interface. Any object chosen to realize the
            business or system process will have to implement the interface (and preferably the full
            services contract). </para>

        <section>
            <title>The life line</title>
            <para>
                <indexterm>
                    <primary>sequence diagram</primary>
                    <secondary>life line</secondary>
                </indexterm> Below each object there is a dashed line. This is the life line,
                    <abbrev>i.e.</abbrev> the period over which the object exists. In our example
                all objects exist across the entire time of the business process. </para>
        </section>

        <section>
            <title>The activation bar</title>
            <para>
                <indexterm>
                    <primary>sequence diagram</primary>
                    <secondary>activation bar</secondary>
                </indexterm> The bars on top of the life line of the objects are the activity bars.
                They specify periods where the object performs some activity which is relevant for
                the business or system process being documented. When this information is not
                important (as is often the case) one may either leave out the avtivity bars entirely
                or one may draw activity bars spanning the full time of the process. </para>
        </section>
    </section>

    <section>
        <title>Service requests</title>
        <para>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>service requests</secondary>
            </indexterm> Service requests are shown as solid lines with an arrow at the service
            provider side, <abbrev>i.e.</abbrev> the arrow points from the client requesting the
            service to the service provider from whom the service is requested. </para>
        <para> The service request will specify the name of the service requested as well as a list
            of objects (within round brackets) which the client provides to the service provider
            upon requesting the service. </para>

        <section>
            <title>Message to self</title>
            <para>
                <indexterm>
                    <primary>seuence diagram</primary>
                    <secondary>message to self</secondary>
                </indexterm> If the service request message returns onto the object itself, the
                service is requested from itself. This effectively models an activity performed by
                the object itself. For example, the customer performs the activity to take the
                change and the product from the vending outlet. </para>
        </section>
    </section>

    <section>
        <title>Returns</title>
        <para>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>return message</secondary>
            </indexterm> One may optionally show the returns from the service provider to the
            client. These are drawn as dashed lines with an arrow pointing from the service provider
            to the client who requested that service. </para>
        <para> The return message may specify an object which is returned to the client. This object
            may, of course, be an instance of a composite class with a whole range of components.
        </para>
    </section>

    <section>
        <title>Levels of granularity</title>
        <para>
            <indexterm>
                <primary>sequence diagram</primary>
                <secondary>levels of granularity</secondary>
            </indexterm> The services requested from the interfaces (or classes) in a sequence
            diagram would automatically feed in as services in the static model for that interface
            or class. Each of these services would have to be realized through a lower level
            business or system process. There would be lower level sequence and activity diagrams
            for these lower level processes. </para>
    </section>
</section>
