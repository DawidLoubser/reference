<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!--Authored by mailto:fritz@solms.co.za -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Applicability to the OCL</title>
    <para>
        <itemizedlist>
            <listitem><formalpara>
                <title>Specify pre- and post-conditions on services</title>
                <para>
                    Both the pre-conditions for a service (<abbrev>i.e.</abbrev> the conditions under which the service provider may 
                    refuse the service without breaking the contract) and the post-conditions for a service (<abbrev>i.e.</abbrev> the
                    conditions with must hold after the service has been provided -- thus for the success scenarios of the service)
                    can be formally specified in OCL. For example, there may be a pre-condition for the debit service of an account that
                    the amount must be less or equal to the balance on the account and a post-conditions specifying that the state of the
                    balance after the transaction as well as the fact that the transaction must have been entered into the transaction history.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify general invariance constraints/business rules</title>
                <para>
                    Invariance constraints are symmetry rules which must always apply. If, for a subject, any of the invariance rules are
                    violated, then the subject is in an inconsistent state, <abbrev>i.e</abbrev> in a state of failure. For example, there
                    may be a invariance rule that for an account, the sum of all credits minus the sum of all debits must always be equal
                    to the balance of the account.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify guard conditions</title>
                <para>
                    Guard conditions are commonly used to specify the conditions under which alternative paths in a process are followed.
                    OCL enables one to formally specify these guard conditions in a machine processable way.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify derivation rules for attributes and return values</title>
                <para>
                    The attributes for a service request must be derived from the information currently available. OCL provides a formal
                    mechanism to do this. In addition, OCL can be used to specify constraints on the return value across externally visible
                    information.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify type invariants for stereotypes</title>
                <para>
                    Stereotypes are UML's extension mechanism. They enable one to refine basic UML concepts into specialized concepts
                    which can then be used within a UML model. As such there must be additional constraints which apply to the specialized
                    concept. It is these constraints which distinguish it from the more generic concepts.
                    OCL can be used to formally specify these constraints.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify target or target sets for messages and actions</title>
                <para>
                    OCL enables one to specify constraints around messages which would have to be sent in the context of realizing a service.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify which messages would have to be sent in the context of realizing a service</title>
                <para>
                    OCL enables one to specify the messages which would have to be sent upon realizing a service as well as constraints on
                    the message contents itself.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify initial state of objects</title>
                <para>
                    OCL constraints can be used to specify initial values for attributes.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify derivation rules for derived atributes</title>
                <para>
                    UML supports derived attributes whose value is fully specified (constrained) by the values of other attributes. OCL
                    enables one to formally specify the derivation rules used to derive the value of derived attributes.
                </para>
            </formalpara></listitem>
            
            <listitem><formalpara>
                <title>Specify derivation rules for derived atributes</title>
                <para>
                    UML supports derived attributes whose value is fully specified (constrained) by the values of other attributes. OCL
                    enables one to formally specify the derivation rules used to derive the value of derived attributes.
                </para>
            </formalpara></listitem>
            
        </itemizedlist>
            
    </para>
    
    <section>
        <title>Specifying services contracts</title>
        <para>
            OCL is commonly used to specify services contracts by adding pre- and post-conditions for each service.
        </para>
    </section>
    
    <section>
        <title>Automatic test generation</title>
        <para>
            Defining OCL constraints for a model enables one to automatically generate both, contract tests and integrity tests.
        </para>
        <section>
            <title>Contract tests</title>
            <para>
                Specifying formal services contracts in OCL enables one to automatically create contract tests for contracts. A class would
                typically be tested against all tests across all contracts it claims to realize.
            </para>
        </section>
        <section>
            <title>Integrity tests</title>
            <para>
                Invariance constraints can be used to generate integrity (<abbrev>e.g.</abbrev> system integrity) tests. These could be used
                at any stage to validate the system integrity and hence to identify possible security breaches or system errors.
            </para>
        </section>
    </section>
</section>    
    