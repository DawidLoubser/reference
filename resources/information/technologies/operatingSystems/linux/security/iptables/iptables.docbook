<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- Author Fritz Solms -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Securing the network</title>
    <para>
        Several different options to implement various levels of security are available in linux. A squid proxy server, for example, removes the need to be directly connected to the internet, from where most attacks originate. ipTables allows you to configure a packet filter, blocking potential hazardous traffic. The linux kernel has the option to receive a set of parameters to further secure the workstation.
    </para>
    
    <section>
        <title>Squid</title>
        <para>
            Squid is a http proxy and cache, which can be used to route all browser traffic via a central workstation to the internet. This provides security as the client workstations are not required to connect to the internet directly. Only the squid server is connected to the internet. It is, however, still recommended that the squid server is placed behind a firewall to protect it from attacks originating from the internet.
        </para>
    </section>	
    
    <section>
        <title>IP Tables</title>
        <para>
            IPTables is a packet filter performing, which can be configured to allow, or deny, packets based on source and destination address, or port number or protocol specific features.  
        </para>
        
        <section>
            <title>Initialising iptables</title>
            <para>
                To clear out any previous filters and rules, iptables has to be initialised. The default chain is flushed (-F), deleted (-X) and it's counters are reset (-X). This is important to ensure that the subsequent rules are added to a clean environment, rather then being added to some unknown set of rules.
            </para>
            <programlisting>
iptables -F
iptables -X
iptables -Z
			</programlisting>
        </section>	
        
        <section>
            <title>Blocking traffic</title>
            <para>
                The configuration is started by blocking all incoming and outgoing traffic. This is achieved by setting the policy (-P) for incoming, outgoing and forward connections to drop all packets.
            </para>
            <programlisting>
iptables -P INPUT DROP				
iptables -P FORWARD DROP				
iptables -P OUTPUT DROP				
			</programlisting>
        </section>	
        
        <section>
            <title>Allowing specific traffic</title>
            <para>
                Depending on the requirements, iptables is now configured to allow specific interactions. In the example below, we allow incoming requests on port 22, if they are ESTABLISHED within the context of a communication. Outgoing requests are allowed, if they are part of a NEW connection, or an already ESTABLISHED one. Depending on the nature of the service to be enabled, these rules can get very complex. iptables has a number of mechanisms to filter connection. 	
            </para>
            <programlisting>
iptables -A INPUT -i eth0 -p tcp -sport 22 -m state --state ESTABLISHED -j ACCEPT
iptables -A OUTPT -o eth0 -p tcp -dport 22 -m state --state NEW, ESTABLISHED -j ACCEPT
			</programlisting>
            <note>
                <para>Due to the nature of the FTP protocol, a more complex filter has to be specified, capable of tracking the connections made during the FTP session.</para>
            </note>
        </section>	
        
        <section>
            <title>IP Masquerading and forwarding requests</title>
            <para>
                Often it is desirable to share an internet connection between the workstation on a network, when only one workstation is connected to the internet via dialup. The following script allows you to <emphasis role="strong">forward</emphasis> traffic on the internal network into the internet via IP Masquerading. The important feature to note is that outgoing connections are allowed (ACCEPT) while incoming connections are only allowed through when their state is related and established. Also the kernel parameter (/proc/sys/net/ipv4/ip_forward) is enabled to allow forwarding of packets.
            </para>
            <programlisting>
				<![CDATA[
#!/bin/sh			
iptables -t nat --flush
iptables --flush
iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
iptables -A FORWARD -i ppp0 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -o ppp0 -j ACCEPT
echo 1 > /proc/sys/net/ipv4/ip_forward
				]]>
			</programlisting>	
        </section>	
        
        <section>
            <title>Disabling IPTables</title>
            <para>
                During the installation of Linux on certain distributions, IPTables is enabled with a default ruleset. This can lead to a number of problems if you are not aware of iptables being operational and filtering out packets. An NFS mount, for example, would fail due to this. To disable iptables, we flush the ruleset and stop the service from running.
            </para>
        </section>
        
    </section>	
    
    <section>
        <title>Linux Kernel Parameters</title>
        <para>
            A number of kernel parameters are available to configure and finetune many aspects, including networking. These kernel parameters are set in text files residing in the /proc directory and are configured by setting in boolean values to either true (1) or false (0). To set these parameter, typically either a 0 or a 1 are piped into the files as demonstrated in the example below. The kernel parameters covered in this section reside int <emphasis role="strong">/proc/sys/net/ipv4/</emphasis>
        </para>
        <programlisting>
echo 1 > /proc/sys/net/ipv4/ip_forward
		</programlisting>
        <formalpara>
            <title>icmp_echo_ignore_all</title>
            <para>
                All ICMP requests are ignored. Set this options to block ping requests. 
            </para>
        </formalpara>	
        <formalpara>
            <title>ip_forward</title>
            <para>
                Allows packets to be forwarded. This is only required on multi homed workstations
            </para>
        </formalpara>	
        <formalpara>
            <title>log_martians</title>
            <para>
                Log packets with impossible addresses to kernel log
            </para>
        </formalpara>	
        <formalpara>
            <title>icmp_echo_ignore_breadcast</title>
            <para>
                ICMP requests, with a broadcast destination address, are ignored.
            </para>
        </formalpara>	
    </section>	
</section>	


