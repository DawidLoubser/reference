<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.dotnet.remoting.features.features"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Core features of .Net Remoting</title>
    <para>
        In this section we summarize the core features of .Net Remoting.  
    </para>
    <section>
        <title>Passing objects by value and by reference</title>
        <para>
            .Net Remoting, like CORBA and Java RMI, supports both, pass by value and pass by reference. In the case of pass by value the object is
            serialized across the communication stream, <abbrev>i.e.</abbrev> the recipient receives a local copy of the object. In the case of pass 
            by reference a reference to a remote object is serialized across the communication stream and the recipient uses that object via remote
            service requests (also using .Net Remoting).
        </para>
    </section>
    <section>
        <title>Client and Server based Activation</title>
        <para>
            .Net Remoting supports both, client and server based activation. In the case of client based activation the instance 
            is created by the client via a regular <literal>new</literal> statement which the .Net framework feeds through to 
            the server side where the physical instance is created and hosted. The framework provides the client a remote reference
            through which the client can submit service requests to the remote object via .Net Remoting. Client
            activated objects do not outlive the session connecting the client with the server.
            <note><para>
                Client activated objects are similar to Java EE session beans.
            </para></note>
        </para>
        <para>
            Server activated objects, on the other hand, are created by the server. A reference to the object is published either through a 
            naming service (provided, for example, by BizTalk) or ny publishing a URL to the object. Server activated objects typically survive 
            client sessions.
        </para>
    </section>
    
    <section>
        <title>Load balancing and fail over safety via pluggable proxies</title>
        <para>
            Pluggable proxies provide a facility to replace the standard remote object proxies with more sophisticated
            proxies which may perform a load balancing or a fail over safety function.
        </para>
    </section>
    
    <section>
        <title>Call and message interception</title>
        <para>
            .Net Remoting supports call and message interception at various layer (transport layer, protocol layer, ...). This enables developers
            to plugin extensions around security (encryption, hashing function calculation, ...), data compression, logging etc.
        </para>
    </section>
    
    <section>
        <title>Pluggable transport layers via formatters</title>
        <para>
            Pluggable formatter sinks provide a facility to change the encoding used when transmitting the message across
            the network. .Net supports natively two encoding formats, binary a (similar to the CORBA IIOP protocol) and
            SOAP formatters which encode the service request onto the SOAP protocol used for web services.
        </para>
    </section>
    
    <section>
        <title>Synchronous and synchronous service requests</title>
        <para>
            .Net supports not only the default synchronous request model, but also provides support for asynchronous 
            and deferred synchronous service requests. This is done via the <literal>AsyncCallBack</literal> class.
            <note><para>
                This is similar to the CORBA deferred synchronous call model.
            </para></note>
        </para>
    </section>
    
    
</section>
    