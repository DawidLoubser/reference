<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.dotnet.remotingInfrastructure"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Remoting Infrastructure</title>
    <figure>
        <title>Remoting Infrastructure</title>
        <graphic fileref="remoting2.gif"/>
    </figure>
    <para>In remoting, however, proxies are different. First, a proxy in remoting is made up of two
        different objects: the TransparentProxy object and the RealProxy object. Second, the
        remoting framework makes it easy to extend the RealProxy object. In fact, creating a custom
        proxy is actually encouraged as part of the remoting framework's extensibility. </para>
    <para>The main reason to create a custom proxy is to implement custom behavior prior to
        dispatching the method call to the remote object. A load balancing proxy offers a good
        example. In this scenario, the custom proxy can poll several middle-tier servers to
        determine the one with the lowest load and dispatch the remote call to that server. Now that
        you understand proxies, I'll talk about the primary area of extensibility in remoting: the
        sink chain. </para>
    <para>Message sinks are the main location of customization in the remoting framework. Many
        times, the first place you go to extend remoting behavior is to the sink chain. Implementing
        message sinks is relatively easy, and doing so allows you to intercept the method call prior
        to its trip across the wire. Modifying the message stream in this way allows you to add
        additional functionality to remoting, such as a security sink which encrypts and decrypts
        the message for its trip across the wire. </para>
    <para> There are two types of sinks in the remoting infrastructure: message sinks and channel
        sinks. Each one occurs in a different location along the remoting chain and each one serves
        a different purpose. Message sinks allow you to intercept the method call message before the
        method call and its parameters are serialized into a stream. With a channel sink, once the
        method call message is serialized into a stream, you can intercept the stream before it's
        put on the wire for transport to the remote machine. These sinks exist on both the client
        and server side of the remoting chain </para>
    <para> Out of the box, the remoting framework comes with two formatter message sinks: the binary
        and SOAP formatters. The binary formatter is extremely fast, and encodes method calls in a
        proprietary, binary format. The SOAP formatter is slower, but it allows developers to encode
        the remote messages in a SOAP format. If neither formatter fits your needs, developers can
        write their own and plug it in as a replacement. </para>
    <para>A perfect example of a custom channel sink is a secure encryption sink. You can easily
        create a channel sink that intercepts your outgoing message (especially if using the SOAP
        formatter) and apply MD5 encryption to the stream. Then, on the server side, once the
        message arrives, the same sink is used to decrypt the stream prior to it arriving in the
      server-side stack builder.</para>
  
  <section>
    <title>Channels</title>
    <para>
      A channel provides the communication backbone.
    </para>
  </section>
  
</section>
