<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  version="5.0" xml:id="resources.information.technologies.xml.webServices.webServices">
  
  <title>Remoting versus web services</title>
  <para>
    So when should one use web services and when should one use remoting? Web services are directly
    bound to the SOAP protocol and provide a way of offering services in a stateless
    (quasi-procedural) way.
  </para>
  <para>
    .Net remoting, on the other hand, is an object oriented integration framework which enables one to
    <itemizedlist>
      <listitem><para>
        abstract from the underlying transport protocol and have the server accessible across a
        range of protocols (e.g. binary remoting protocol, SOAP and CORBA IIOP),
      </para></listitem>
      <listitem><para>
        .Net remoting supports serializing objects to remote clients or servers which run themselves
        within a Microsoft common language runtime,
      </para></listitem>
      <listitem><para>
        there may be various pros and cons around the communication protocols including bandwidth
        requirements, marshalling efficiency, ...,
      </para></listitem>
      <listitem><para>
        support the concept of stateful objects which maintain state across service requests and
        potentially even across different clients.
      </para></listitem>
    </itemizedlist>
    The latter may be beneficial for fine-grained technical integration at an object level, while
    web services is usually preferred for more course grained integration.
    <note><para>
      This follows the general guideline to work object oriented at the fine grained level and
      services oriented at the course grained level.
    </para></note>
  </para>
</section>