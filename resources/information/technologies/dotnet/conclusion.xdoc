<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.technologies.dotnet.conclusion"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Conclusion </title>
    <para>If you're about to undertake a new .NET development project, ask the following questions
        to determine if remoting will work for your organization: 
      <orderedlist>
        <listitem><para>Will the middle tier be accessed by .NET clients only?</para></listitem>
        <listitem><para>Is speed an important requirement of the application?</para></listitem>
        <listitem><para>Does the behavior of the infrastructure need to be customized?</para></listitem>
        </orderedlist>
    </para>
    <para>If you answered "Yes" to all three of those questions, then it's a no brainerâ€”use
        remoting. The requirements of your application are such that Web services won't work anyway.</para>
    <para>Even if you answered "No" to one or more questions, remoting could still be an option for
        you. Analyze your specific situation to determine if you should use Web services or
        remoting. If you answered "No" to questions two and three, no problem, go with remoting. You
        might not need to customize the infrastructure at this point, but you never know what can
        happen down the road. Having the power to tweak the infrastructure might save you one day in
        the future. If speed is an issue, consider this: Tests show remoting method calls are, on
        average, twice as fast as Web service calls. Of course, there are deviations, but you can
        typically gain a considerable amount of speed by opting for remoting.</para>
    <para>The toughest decision occurs when you answer "No" to question one. This is the main reason
        most shops opt to use Web services over remoting: the cross-platform, heterogeneous client
        capabilities. If the majority of the business logic you expose on your middle tier will be
        used by outside clients, who aren't .NET aware (Java applets, VB6 applications, or legacy
        PowerBuilder clients), then you should go with Web services. On one hand, what you lose in
        speed and extensibility, you'll gain tenfold in interoperability. On the other, if you can
        isolate the business logic that needs to be interoperable, you can write wrappers around
        your remoting components using Web services. This is the best of both worlds because you can
        provide a way for clients to use your middle tier, but you've also laid a solid groundwork
        for using remoting once those clients get upgraded to .NET.</para>
    <para></para>
</section>
