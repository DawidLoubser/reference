<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  version="5.0">
  
    <title>.NET Remoting </title>
    <para> In 2000 Microsoft made 2 announcements at the Professional Developers Conference that
        would change the way the IT community would think about Microsoft related development in
        general, and particularly enterprise development.The first being .NET, which was a
        development framework for the next decade of Windows development.The second was Web
        Services, which held a promise that it was going to be the next phase of distributed
        development.A few years later both of these technologies are quite widely used in the
        development area. What a lot of people don't know is that beneath the Web Services hype
        exists a first-class remoting framework that allows the developers to create efficient,
        scaleable and object oriented distributed appplications. </para>
    <para> Remoting is probably the most under-hyped subset of the massive .NET Framework. It was
        designed with the intention to give the developers a way of creating distributed
        applications. It was designed to be easy to use and powerfully extendable, Something that
        COM+ and DCOM aren't.Instead of exploiting the strengths of remoting, many enterprise IT
        managers have taken to the hype surrounding Web Services even though it is an ovrkill for
        the particular environment. </para>
    <para> Before discussing the advantages of using remoting in an enterprise environment lets
        first discuss .NET Remoting. .Net Remoting provides a framework that allows objects to
        interact with each other across application domains.The framework provides a lot of
        services, including activation and lifetime support, as well as communication channels
        responsible for transporting to and from remote applications. Formatters are used for
        encoding and decoding the messages before they are transported to the channel. XML encoding
        is used where interoperability with other remoting frameworks is essential, otherwise binary
        encoding can be used.All XML encodings use the SOAP protocol to transport messages. Remoting
        was designed with security in mind, and therefore a number of hooks are available that allow
        channel sinks to gain access to the messages and serialize the stream before the stream is
        transorted over the channel. </para>
    <xi:include href="remotingObjectActivation.docbook"/>
    <xi:include href="remotingInfrastructure.docbook"/>
    <xi:include href="webServices.docbook"/>
    <xi:include href="protocolAbstraction.docbook"/>
    <xi:include href="remotingVersusWebServices.docbook"/> 
    <xi:include href="remotingExample.docbook"/>
    <xi:include href="conclusion.docbook"/>
    
</section>
