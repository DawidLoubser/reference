<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  version="5.0">
  
    <title>.NET Remoting Object Activation </title>
    <para>It is difficult to manage the lifetime of the object without support from the underlying
        framework. .Net remoting provides a number of activation models to choose from. These models
        fall into 2 categories. <itemizedlist>
            <listitem>
                <para>client activated objects</para>
            </listitem>
            <listitem>
                <para>server activated objects</para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis>Client activated objects</emphasis> are under the control of a lease-based
        lifetime manager that ensures the object is garbage collected when it's lease expires.An
        instance of the remote object is created when the client calls the new operator on the
        server object.This instance lives as long as the client needs it.</para>
    <para>
        <emphasis>The server activated object</emphasis> lifetime is managed by the remote server,
        not the client that instantiates the object. In the case of server activated objects the
        developers have a choice of selecting either <itemizedlist>
            <listitem>
                <para>single-call</para>
            </listitem>
            <listitem>
                <para>singleton</para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis>Single-call objects </emphasis> handle one and only one request coming from a
        client.When a client calls a method on a single call object, the object constructs itself,
        performs whatever action the method called for and the object is then subject to garbage
        collection.No state is held between calls and each call no matter what client it came from
        is called on a new object instance. </para>
    <para>
        <emphasis>Singleton objects</emphasis> were designed specifically to maintain state. The
        singleton object serves multiple clients, allowing these clients to share data amongst
        themselves. lifetime of singletons is also controlled by the lease based lifetime. </para>
</section>
