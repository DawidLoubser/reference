<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">


    <title>SCA (Service Components Architecture)</title>

    <indexterm>
        <primary>sca</primary>
        <seealso>
            <indexterm>
                <primary>service components architecture</primary>
            </indexterm>
        </seealso>
    </indexterm>
    
    <indexterm>
        <primary>SOA</primary>
    </indexterm>


    <para>
        Service Component Architecture (SCA) provides a programming model for building applications and systems based on a Service Oriented Architecture.  
        It is based on the idea that business function is provided as a series of <emphasis>services</emphasis>, which are assembled together to create 
        solutions that serve a particular business need. These <emphasis>composite applications</emphasis> can contain both new services created specifically 
        for the application and also business function from existing systems and applications, reused as part of the composition.  SCA provides a model both 
        for the composition of services and for the creation of service components, including the reuse of existing application function within SCA compositions.
    </para>
    
    <section>
        <title>Who supports SCA ?</title>
        <indexterm>
            <primary>OASIS</primary>
        </indexterm>
        <para>
            SCA is managed by the OASIS standards body, and has been put in place by collaboration of various industry partners, such as
            IBM, BEA, IONA Technologies, SAP, Siemens, and Oracle.
        </para>
        <note>
            <para>
                A number of these partners are/were also involved in the competing JBI standard for SOA-based systems.
            </para>
        </note>
    </section>
    
    <section>
        <title>Primary SCA Concepts</title>
        <para>
            SCA is composed of a number of standards (called <quote>component parts</quote>) which specify or govern some aspect of
            SCA-based SOA development:
        </para>
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Assembly Model</title>
                    <para>
                        The SCA Assembly Model consists of a series of artifacts which define the configuration of an 
                        SCA system in terms of service components  which implement and/or use services and the connections 
                        which describe how they are linked together.  The assembly is defined in terms of a set of SCA 
                        composites, which define components and reference the implementation code that provide business 
                        function and which also describe services and references and the wires that link them.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Policy Framework</title>
                    <para>
                        The capture and expression of non-functional requirements such as security is an important aspect of 
                        service definition, and has impact on SCA throughout the lifecycle of components and compositions. 
                        SCA provides the Policy Framework to support specification of constraints, capabilities and Quality 
                        of Service (QoS) expectations, from component design through to concrete deployment.  This specification 
                        describes the framework and its usage.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Bindings</title>
                    <para>
                        SCA Bindings apply to services and references. Bindings allow services to be provided, and references 
                        to be satisfied, via particular transports.  There is a binding available for each different access 
                        method.
                    </para>
                </formalpara>
            </listitem>
        </itemizedlist>
        <para>
            SCA itself is defined to be independent of different technologies and programming languages, with defined bindings for various
            programming languages and component models, such as EJB, WS-BPEL, Spring, PHP and Python.
        </para>
    </section>

</section>
