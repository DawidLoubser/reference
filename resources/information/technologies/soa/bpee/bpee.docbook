<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    
    <title>Business Process definition and execution</title>
    
    <indexterm>
        <primary>business process</primary>
    </indexterm>
    <indexterm>
        <primary>point-to-point integration</primary>
    </indexterm>
    <para>
        Once the qualities of the <acronym>ESB</acronym> (Enterprise Service Bus) become apparent
        in terms of integrating diverse internal or external services in a de-coupled manner via their 
        contracts, and agnostic to network protocol or implementation technology, it is clear that
        a significant risk still exists of re-producing a point-to-point integration scenario, where 
        every service would still need to understand a part of the high-level workflow,
        and (in)directly interact with a potentially large number of other services. By requesting
        services in a point-to-point manner via the ESB does not solve the inherent design problem.
    </para>
    <indexterm>
        <primary>URDAD</primary>
    </indexterm>
    <para>
        Consequently, in addition to a contracts-driven de-coupling of services we need <emphasis>a
        workflow controller at each level of granularity</emphasis>, whose sole responsibility is to drive the use-case
        (service) being offered. The URDAD design process enforces this principle. Such a controller could be implemented 
        using any of the available component technologies which can be hosted in a <emphasis>Service Engine</emphasis> connected 
        to an ESB, such as a Java class deployed in a POJO container.
    </para>
    <para>
        Each such service provider, however, must be <emphasis>stateless</emphasis> (as per the SOA definition of a 
        service) and is written to fulfil the client-facing services contract. There is, however, 
        another construct which, from a business perspective, is very pertinent: <emphasis>the Business Process</emphasis>.
    </para>
    
    
    <xi:include href="whatIsABusinessProcess.docbook"/>
    <xi:include href="whatDoesBPEEdo.docbook"/>
    <xi:include href="bpeeImplementations.docbook"/>
    <xi:include href="typicalFeatures.docbook"/>
    <xi:include href="../../bpel/bpel.docbook"/>

    
</chapter>