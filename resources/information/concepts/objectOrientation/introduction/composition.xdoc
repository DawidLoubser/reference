<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.objectOrientation.introduction.composition"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title role="Composition">Composition</title>
  <para>
    An object is usually composed of a number of components which are themselves
    objects. The question which is not always trivial to answer is 
    <blockquote><para><emphasis>
      What makes one object a component of another? 
    </emphasis></para></blockquote>
    To this end we need to understand the implications of a composition relationship.
    Composition implies
    <itemizedlist>
      <listitem><formalpara>
        <title>Ownership</title>
        <para>
          Linguistically one would say that the aggregate object (the
          container object) <emphasis>has</emphasis> a component. For example
          <blockquote><para><emphasis>
            The car has an engine.
          </emphasis></para></blockquote>
          The container object must be able to say with a good conscience
          that the component is his/hers.              
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Adopting Responsibility for Component</title>
        <para>
          If a car is yours then you are responsible for it. For example,
          if the car crashes into a building because the brakes failed,
          then you are responsible for the damage. Similarly, if the car is
          yours, nobody should be able to make use of it or to change its
          state without your permission. We shall see later that a lot of
          object-oriented modeling revolves around judicious distribution 
          of responsibilities.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Coincident life spans</title>
        <para>
          In object-oriented software systems composition may imply
          that the life span of the component is limited to that of its
          owner/container. For example, when an account is closed and
          deleted, its balance and account number will no longer exist.
        </para>
      </formalpara></listitem>
    </itemizedlist>
  </para>
</section>

