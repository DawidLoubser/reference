<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE chapter SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<chapter id="resources.information.concepts.analysis.requirements.estimating.estimating"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Estimating</title>
    
      <para> 
        Estimating is a daunting task. You may feel (and this may actually be true) that your
        head is on the line. In this chapter we provide some guidelines for obtaining cost and
        schedule estimates for software projects. 
      </para>

      <section>
        <title>Base Estimates on Past Experience</title>
        <para> 
            Whenever possible base estimates on previous experience with similar requirements.
            These estimates may be at various levels: 
            <itemizedlist>
              <listitem>
                <para>System-level analogy. </para>
              </listitem>
              <listitem>
                <para>Package/Component-level analogy. </para>
              </listitem>
              <listitem>
                <para>Class-level analogy.</para>
              </listitem>
            </itemizedlist>
        </para>
        
        <section>
          <title>System-level analogy</title>
          <para> 
              If you have previously developed a system with similar scope and complexity, your
            best estimate may well be obtained by basing it on a comparison of the scope and
            complexity of the two projects.
          </para>
          <para> 
              If you have developed a number of similar systems before, you might compare it with
            each and take a statistical average of the result. This should result in a more reliable estimate.
          </para>
        </section>
        
        <section><title>Package/component-level analogy</title>
          <para> 
              If you have developed packages or components before which have a similar scope and
            complexity as the packages/components in the proposed system you can obtain estimates
            for these.
          </para>
          <para> 
              Once again a statistical approach may yield more accurate results. Do not forget,
            though, that the system estimate cannot be a simple sum of the estimates for the
            components/packages since these still have to be integrated. If possible, the
            integration costs should also be based on passed experience.
          </para>
        </section>
      </section>

      <section><title>Obtain Early Feedback on Accuracy of Estimates</title>
        <para> 
            Incremental delivery monitors estimates and provides rapid feedback when actual
          expenditures and scheduling starts to deviate from the planned costs/schedules.
        </para>
      </section>

      <section>
        <title>Spiking</title>
        <para> 
            If your developers have not implemented anything similar before and feel that they
          cannot provide any reliable estimates, consider letting them write sufficient code in
          order for them to get a feeling for how long they would require to implement the said requirements.
        </para>
      </section>

      <section>
        <title>Pert Estimation</title>

        <para> 
            PERT estimation can be applied to any level of estimation. It is a simple statistical
          approach where obtain not only estimates for the expected time required, but in addition
          to this also optimistic and pessimistic estimates.
        </para>
        <para>
            The PERT expected value is then given by
            <synopsis><![CDATA[
averageExpectedValue 
  = (optimisticValue + 4*expectedValue + pessimisticValue) / 6            
            ]]></synopsis>
        </para>

        <para> The standard deviation of the PERT estimator is
            <synopsis><![CDATA[
standardDeviation = (pessimisticValue - optimisticValue) / 6            
            ]]></synopsis>
        </para>

      </section>

      <section>
        <title>Adjust Estimates with your Skills Base</title>
        <para> 
            Always keep in mind that a good developer can be as productive as 10 mediocre to weak
          developers and you will have to adjust the estimates to reflect the skills resources
          available to your project. Once again, the best estimates are based on passed experience.
        </para>
        <para> 
            Break down the requirements into units which for which your developers can get a
          feeling about how long they require to develop the unit. If the required time is longer
          than 2 weeks, the estimate is most probably very inaccurate and the requirement should be
          broken down into lower level requirements.
        </para>
      </section>

      <section>
        <title>Be Careful With New Technologies/Paradigms</title>
        <para> 
            New technologies may save you time because of their increased power, but they will
          require extra time for training and to absorb costs incurred by the errors which will most
          likely me made along the way.
        </para>
      </section>
  
</chapter>
