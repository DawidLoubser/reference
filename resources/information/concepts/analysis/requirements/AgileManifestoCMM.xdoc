<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "file:/opt/share/xml/Oxygen/samples/docbook/xml/docbookx.dtd">
<chapter id="resources.information.concepts.analysis.requirements.AgileManifestoCMM"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>AgileManifestoCMM</title>
        <section><title>The Agile Manifesto</title>
        <para> There is a growing number of so-called OO gurus who canvas for a more light-weight
          approach. Many of these light-weight methodologies have been developed in-house and have
          not been publicized widely. Others, including the following, are well known: </para>
        <itemizedlist>
          <listitem>
            <para>Extreme programming </para>
          </listitem>
          <listitem>
            <para>Crystal methodologies </para>
          </listitem>
          <listitem>
            <para>Adaptive Software Development </para>
          </listitem>
          <listitem>
            <para>Feature-Driven Development </para>
          </listitem>
          <listitem>
            <para>Dynamic System Development</para>
          </listitem>
        </itemizedlist>
        <para> Some of the proponents of these light methodologies including </para>
        <itemizedlist>
          <listitem>
            <para>Kent Beck </para>
          </listitem>
          <listitem>
            <para>Martin Fowler </para>
          </listitem>
          <listitem>
            <para>Alistair Cockburn </para>
          </listitem>
          <listitem>
            <para>Robert C. Martin </para>
          </listitem>
          <listitem>
            <para>Ron Jeffries</para>
          </listitem>
        </itemizedlist>
        <para>and 12 others met in February 2001 where they produced a document which they called
          the Agile Manifesto. It reads as follows:</para>
        <para/>
        <section><title/>
          <!--l. 28-->
          <para> _______________________________________________________________________________ </para>
          <blockquote role="centerline">
            <title/> The Agile Manifesto </blockquote>
          <!--l. 74-->
          <para>We have come to value </para>
          <itemizedlist>
            <listitem>
              <!--l. 74-->
              <para>Individuals and interactions over processes and tools. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Working software over comprehensive documentation. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Customer collaboration over contract negotiation. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Responding to change over following a plan.</para>
            </listitem>
          </itemizedlist>
          <!--l. 74-->
          <para>That is, while we value the items on the right, we value the items on the left more. </para>
          <!--l. 74-->
          <para>We follow the following principles: </para>
          <itemizedlist>
            <listitem>
              <!--l. 74-->
              <para>Our highest priority is to satisfy the cutomer through early and continuous
                delivery of valuable software. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Welcome changing requirements, even in late development. Agile processes harness
                change for the customer's competitative advantage. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Deliver working software frequently, from a couple of weeks to a couple of
                months, with preference to the shorter timescale. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Business people and developers work together daily throughout the project. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Build projects around motivated individuals. Give them the environment and
                support they need, and trust them to get the job done. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>The most efficient and effective method of conveying information to and within a
                development team is face-to-face conversation. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Working software is the primary measure of success. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Agile processes promote sustainable development. The sponsors, developers and
                users should be able to maintain a constant pace indefnitely. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Continuous attention to technical excellence and good design enhances agility. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>Simplicity – the art of maximizing the amount of work not done – is essential. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>The best architectures, requirements and designs emerge from self-organizing
                teams. </para>
            </listitem>
            <listitem>
              <!--l. 74-->
              <para>At regular intervals, the team reﬂects on how to become more effective, then
                tunes and adjusts its behaviour accordingly.</para>
            </listitem>
          </itemizedlist>
        </section>
        <!--l. 1-->
        <para/>
      </section>
      <!--l. 1-->
      <section role="section">
        <title>
          <abbrev role="title-mark">13.7</abbrev>
          <anchor id="x1-34700013.7"/>The Capability Maturity Model for Software</title>
        <!--l. 3-->
        <para> The Capability Maturity Model (CMM) was developed over a number of years and was
          published in 1991 by Mark Paulk and Charles Weber with the current CMM version 1.1 being
          published in 1993.</para>
        <!--l. 7-->
        <para> It grew out of the realization that software projects continued to have a very high
          failure rate and that the productivity and quality gains promised by many new
          methodologies and technologies often did not materialize. Software projects continued to
          be often excessively late and over budget.</para>
        <!--l. 13-->
        <para> CMM claims that this is caused mainly by the organizations inability to manage the
          software process. According to CMM, the benefts of the improved tools are often lost due
          to undisciplined and chaotic project management.</para>
        <!--l. 18-->
        <para> CMM aims to help organizations to </para>
        <itemizedlist>
          <listitem>
            <!--l. 20-->
            <para>Evaluate their process maturity. </para>
          </listitem>
          <listitem>
            <!--l. 21-->
            <para>Help gain control of processes for developing and maintaining software. </para>
          </listitem>
          <listitem>
            <!--l. 23-->
            <para>Help evolve toward a culture of sound software engineering and management.</para>
          </listitem>
        </itemizedlist>
        <!--l. 29-->
        <para/>
        <!--l. 29-->
        <section role="subsection">
          <title>
            <abbrev role="title-mark">13.7.1</abbrev>
            <anchor id="x1-34800013.7.1"/>Characteristics of Immature Software Organizations</title>
          <!--l. 31-->
          <para> CMM identifes a number of features common among immature software organizations:</para>
          <!--l. 34-->
          <para> Ad-hoc software processes are which are generally improvised by developers and
            project management. Software processes are not enforced. At times immature software
            organizations have specifed software processes but these are not rigorously followed or
            enforced. Reactionary management and development. Managers are usually focused on
            solving immediate crises, stepping from one crises to the next. Non-adherence to
            schedules &amp; budgets because of the non-structured development process and because of
            an inability to provide accurate estimates. Lack of quality prediction because of not
            having an objective process for measuring quality. Quality degradation under hard
            deadlines due to software quality reviews and testing being hastened or even skipped.
            Inability to effectively improve processes because of being unable to objectively
            evaluate benefts of the improvements.</para>
          <!--l. 56-->
          <para/>
        </section>
        <!--l. 56-->
        <section role="subsection">
          <title>
            <abbrev role="title-mark">13.7.2</abbrev>
            <anchor id="x1-34900013.7.2"/>Characteristics of Mature Software Organizations</title>
          <!--l. 58-->
          <para> On the other hand, CMM claims that the following characteristics indicate a mature
            software organization: Effective management of software development and maintenance
            processes. Software processes are generally adhered to due to the processes being usable
            and tailored for the companies requirements. The benefts of the process are effectively
            and accurately communicated to existing staff and new employees which tend to adhere to
            them naturally because they understand the benefts of following the prescribed process.
            Clear Role defnitions where the roles in the project context as well as in the wider
            organizational context are accurately defned. Accurate, objective quality monitoring of
            both the software product as well as the process which produced the software. Ability to
            provide realistic schedules and budgets largely based on historical performance. Ability
            to effectively evolve processes through the introduction of pilot projects which are
            subjected to productivity and quality evaluations as well as a solid cost-beneft analysis.</para>
          <!--l. 82-->
          <para/>
        </section>
        <!--l. 82-->
        <section role="subsection">
          <title>
            <abbrev role="title-mark">13.7.3</abbrev>
            <anchor id="x1-35000013.7.3"/>CMM Maturity Levels</title>
          <!--l. 84-->
          <para> The Capability Maturity Model advocates continuous process improvement based on
            small evolutionary steps. To provide a course-grained measure the maturity of an
            organization's software processes CMM introduces the 5 maturity levels shown in
              fgure<ulink url="#x1-3500012">
              <!--ref: figCMMlevels-->
            </ulink>. </para>
          <figure>
            <title/>
            <blockquote>
              <!--l. 105-->
              <para/>
              <section role="center">
                <title/>
                <!--l. 106-->
                <para>
                  <graphic fileref="Methodology/CMMlevels.pdf" width="72.26999pt"/>
                </para>
              </section>
              <blockquote role="caption">
                <title role="caption">
                  <anchor id="x1-3500012"/>Figure 13.2</title>
                <para>The 5 CMM levels of Software Process Maturity. <anchor id="x1-3500012"/>
                </para>
              </blockquote>
            </blockquote>
          </figure>
          <!--l. 114-->
          <para> An organization would work itself sequentially through these levels. Skipping of
            levels is counter productive because each level provides the foundation for the next
            level. </para>
          <!--l. 120-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35100013.7.3"/>What is a maturity level?</title>
            <!--l. 122-->
            <para> The maturity levels represent not only the maturity level of an organization's
              software processes, but also provide a measure of the capability of these processes.</para>
            <!--l. 126-->
            <para> Each maturity level is viewed as a well-defned evolutionary plateau toward
              achieving a mature software process. Each maturity level comprises as set of process
              goals that, when satisfed, stabilize an important component of the software process.</para>
            <!--l. 133-->
            <para/>
          </section>
          <!--l. 133-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35200013.7.3"/>Level 1: The Initial Level</title>
            <!--l. 135-->
            <para> The successes achieved by level 1 organizations are attributed by the CMM to
              having </para>
            <itemizedlist>
              <listitem>
                <!--l. 138-->
                <para>an exceptional manager and/or </para>
              </listitem>
              <listitem>
                <!--l. 139-->
                <para>a seasoned, effective software team,</para>
              </listitem>
            </itemizedlist>
            <!--l. 141-->
            <para>i.e. to the heroic achievements of certain individuals and CMM claims that these
              successes cannot be repeated unless the same competent individuals are assigned to
              future software projects.</para>
            <!--l. 145-->
            <para> Level 1 capability is thus attributed to individuals and not to the organization.
              Problems typically experienced by level 1 organizations include </para>
            <itemizedlist>
              <listitem>
                <!--l. 149-->
                <para>Schedules and budgets are regularly overrun. </para>
              </listitem>
              <listitem>
                <!--l. 150-->
                <para>Development dynamics deteriorates into crisis management where the dynamics
                  carries the development team from one crisis to the nest. </para>
              </listitem>
              <listitem>
                <!--l. 153-->
                <para>During these criseses the process is being abandoned resulting in the
                  production of poor quality designs and code.</para>
              </listitem>
            </itemizedlist>
            <!--l. 160-->
            <para/>
          </section>
          <!--l. 160-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35300013.7.3"/>Level 2: The Repeatable Level</title>
            <!--l. 162-->
            <para> The characteristics of organizations having reached the repeatable level are
              identifed by the CMM as </para>
            <itemizedlist>
              <listitem>
                <!--l. 165-->
                <para>Project management policies are introduced and implemented on a per project
                  basis. </para>
              </listitem>
              <listitem>
                <!--l. 167-->
                <para>The process introduced and enforced for the project is </para>
                <itemizedlist>
                  <listitem>
                    <!--l. 169-->
                    <para>documented, </para>
                  </listitem>
                  <listitem>
                    <!--l. 170-->
                    <para>trained, </para>
                  </listitem>
                  <listitem>
                    <!--l. 171-->
                    <para>measured and </para>
                  </listitem>
                  <listitem>
                    <!--l. 172-->
                    <para>able to improve.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <!--l. 174-->
                <para>Planning and managing new projects is based on experience with similar
                  projects resulting in realistic schedule and cost estimates. </para>
              </listitem>
              <listitem>
                <!--l. 177-->
                <para>Integrity control is applied to software requirements and the work products
                  developed to satisfy them. </para>
              </listitem>
              <listitem>
                <!--l. 179-->
                <para>Installation of basic software management controls including the ability to
                  track </para>
                <itemizedlist>
                  <listitem>
                    <!--l. 182-->
                    <para>schedules, </para>
                  </listitem>
                  <listitem>
                    <!--l. 183-->
                    <para>costs and </para>
                  </listitem>
                  <listitem>
                    <!--l. 184-->
                    <para>functionalities.</para>
                  </listitem>
                </itemizedlist>
                <!--l. 186-->
                <para>i.e. throughout the development process the schedule and cost estimates are
                  baselined – the estimates are updated with the latest information and communicated
                  to the customer. </para>
              </listitem>
              <listitem>
                <!--l. 189-->
                <para>Introduction and enforcement of software project standards.</para>
              </listitem>
            </itemizedlist>
            <!--l. 192-->
            <para> The result is that the planning and tracking of software projects is stable and
              that early success can be repeated without relying on the heroic effort of certain individuals.</para>
            <!--l. 196-->
            <para> Note that for level 2 organizations the processes may differ across projects and
              that there need not be any linking between the policies guiding different projects.</para>
            <!--l. 202-->
            <para/>
          </section>
          <!--l. 202-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35400013.7.3"/>Level 3: The Defned Level</title>
            <!--l. 204-->
            <para> At the defned level the organization standardizes its software development processes.</para>
            <!--l. 207-->
            <para> CMM characterizes a level-3 compliant organization by </para>
            <itemizedlist>
              <listitem>
                <!--l. 209-->
                <para>The standard process for developing and maintaining software across the
                  organization is documented including </para>
                <itemizedlist>
                  <listitem>
                    <!--l. 212-->
                    <para>software engineering processes and </para>
                  </listitem>
                  <listitem>
                    <!--l. 213-->
                    <para>management processes</para>
                  </listitem>
                </itemizedlist>
                <!--l. 215-->
                <para>and these processes are integrated into a coherent whole. This enables
                  management to obtain objective status information across all projects. </para>
              </listitem>
              <listitem>
                <!--l. 218-->
                <para>A group, the software engineering process group, takes ownership of the
                  organization's process activities. </para>
              </listitem>
              <listitem>
                <!--l. 220-->
                <para>An organization-wide training program ensures that all role players are aware
                  of their roles and are able to fulfll their duties. </para>
              </listitem>
              <listitem>
                <!--l. 223-->
                <para>For each project the organization's standard process is tailored to fulfll the
                  specifc project requirements. The resultant tailored process is called the defned
                  software process. The defned software process includes </para>
                <itemizedlist>
                  <listitem>
                    <!--l. 228-->
                    <para>readiness criteria, </para>
                  </listitem>
                  <listitem>
                    <!--l. 229-->
                    <para>process input defnitions, </para>
                  </listitem>
                  <listitem>
                    <!--l. 230-->
                    <para>standards and procedures for performing the work, </para>
                  </listitem>
                  <listitem>
                    <!--l. 231-->
                    <para>verifcation mechanisms, </para>
                  </listitem>
                  <listitem>
                    <!--l. 232-->
                    <para>outputs and </para>
                  </listitem>
                  <listitem>
                    <!--l. 233-->
                    <para>completion criteria.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
            <!--l. 239-->
            <para/>
          </section>
          <!--l. 239-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35500013.7.3"/>Level 4: The Managed Level</title>
            <!--l. 241-->
            <para> The software process capability of organizations which have reached the managed
              level is quantifable and predictable. The process is continuously measured and stable
              and corrective action can be taken when process limits are violated.</para>
            <!--l. 246-->
            <para> The CMM requires that level 4 organizations </para>
            <itemizedlist>
              <listitem>
                <!--l. 248-->
                <para>Set quantitative goals for both </para>
                <itemizedlist>
                  <listitem>
                    <!--l. 250-->
                    <para>Software products </para>
                  </listitem>
                  <listitem>
                    <!--l. 251-->
                    <para>Software development and maintenance processes.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <!--l. 253-->
                <para>Software processes are instrumented with well-defned and consistent
                  measurement processes for productivity and quality. </para>
              </listitem>
              <listitem>
                <!--l. 256-->
                <para>Management continuously measures productivity and quality across all defned
                  software projects and maintains an organization-wide software process database for
                  this information. </para>
              </listitem>
              <listitem>
                <!--l. 260-->
                <para>Projects obtain control of their processes by narrowing the variation in
                  process performance. This enables management to distinguish between standard
                  process variations (random noise) and systematic problems which should be
                  addressed. </para>
              </listitem>
              <listitem>
                <!--l. 264-->
                <para>The risks involved moving up the learning curve of a new application domain
                  are known and carefully managed.</para>
              </listitem>
            </itemizedlist>
            <!--l. 270-->
            <para/>
          </section>
          <!--l. 270-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35600013.7.3"/>Level 5: The Optimizing Level</title>
            <!--l. 272-->
            <para> Organizations which have reached the optimized level are focused on continuous
              organization-wide process improvements.</para>
            <!--l. 275-->
            <para/>
            <itemizedlist>
              <listitem>
                <!--l. 276-->
                <para>The organization has means to identify strengths and weaknesses of a process
                  pro actively enabling it to introduce measures which could possibly prevent
                  defects. </para>
              </listitem>
              <listitem>
                <!--l. 279-->
                <para>If defects occur, they are analyzed for their causes. The process is modifed
                  to prevent re-occurrence of defects and the lessons learnt from that project is
                  distributed to other projects. </para>
              </listitem>
              <listitem>
                <!--l. 283-->
                <para>It can perform cost-beneft analysis of new technologies and proposed process
                  changes. </para>
              </listitem>
              <listitem>
                <!--l. 285-->
                <para>One of the focuses of level-5 organizations is to minimize waste, i.e. the
                  amount of work which has to be redone. </para>
              </listitem>
              <listitem>
                <!--l. 287-->
                <para>Technology and process improvements are planned and managed as ordinary
                  business activities.</para>
              </listitem>
            </itemizedlist>
            <!--l. 291-->
            <para> Note that levels 4 and 5 are conceptually based on statistical techniques.</para>
            <!--l. 296-->
            <para/>
          </section>
        </section>
        <!--l. 296-->
        <section role="subsection">
          <title>
            <abbrev role="title-mark">13.7.4</abbrev>
            <anchor id="x1-35700013.7.4"/>How is maturity expected to inﬂuence performance?</title>
          <!--l. 298-->
          <para> CMM expects that more mature organization are in a better position to predict a
            project's ability to meet its goals.</para>
          <!--l. 301-->
          <para> Projects in level-1 organizations experience wide variations in achieving the
            targets for </para>
          <itemizedlist>
            <listitem>
              <!--l. 304-->
              <para>cost, </para>
            </listitem>
            <listitem>
              <!--l. 305-->
              <para>schedule, </para>
            </listitem>
            <listitem>
              <!--l. 306-->
              <para>functionality and </para>
            </listitem>
            <listitem>
              <!--l. 307-->
              <para>quality.</para>
            </listitem>
          </itemizedlist>
          <!--l. 310-->
          <para> As the maturity increases the organization is expected to experience </para>
          <itemizedlist>
            <listitem>
              <!--l. 312-->
              <para>A decrease in difference between targets and actual achievements. </para>
            </listitem>
            <listitem>
              <!--l. 313-->
              <para>A decrease in the variability of the actual results around targets. </para>
            </listitem>
            <listitem>
              <!--l. 315-->
              <para>A general increase in productivity and quality.</para>
            </listitem>
          </itemizedlist>
          <!--l. 317-->
          <para>The expected tendencies are shown in fgure <ulink url="#x1-3570013">
              <!--ref: figProcessCapability-->
            </ulink>. </para>
          <figure>
            <title/>
            <blockquote>
              <!--l. 337-->
              <para/>
              <section role="center">
                <title/>
                <!--l. 338-->
                <para>
                  <graphic fileref="Methodology/ProcessCapability.pdf" width="72.26999pt"/>
                </para>
              </section>
              <blockquote role="caption">
                <title role="caption">
                  <anchor id="x1-3570013"/>Figure 13.3</title>
                <para>Process capability and performance predictions taken from The capability
                  Maturity Model for Software published by Paulk, Curtis, Chrissis and Weber.
                    <anchor id="x1-3570013"/>
                </para>
              </blockquote>
            </blockquote>
          </figure>
        </section>
        <!--l. 350-->
        <section role="subsection">
          <title>
            <abbrev role="title-mark">13.7.5</abbrev>
            <anchor id="x1-35800013.7.5"/>Key process areas of the CMM</title>
          <!--l. 352-->
          <para> The process areas for the individual CMM levels identify the issues that must be
            addressed to achieve the applicable maturity level. Figure <ulink url="#x1-3580014">
              <!--ref: figProcessAreas-->
            </ulink> illustrates the key process areas for the different CMM levels. </para>
          <figure>
            <title/>
            <blockquote>
              <!--l. 372-->
              <para/>
              <section role="center">
                <title/>
                <!--l. 373-->
                <para>
                  <graphic fileref="Methodology/ProcessAreas.pdf" width="72.26999pt"/>
                </para>
              </section>
              <blockquote role="caption">
                <title role="caption">
                  <anchor id="x1-3580014"/>Figure 13.4</title>
                <para>Key process areas for the different CMM levels. <anchor id="x1-3580014"/>
                </para>
              </blockquote>
            </blockquote>
          </figure>
          <!--l. 383-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-35900013.7.5"/>Key process areas for level 2 maturity</title>
            <!--l. 385-->
            <para> The level 2 process areas focus on basic project management controls. They include:</para>
            <!--l. 388-->
            <para> Requirements Management which aims to establish a process for </para>
            <itemizedlist>
              <listitem>
                <!--l. 392-->
                <para>requirements elicitation, </para>
              </listitem>
              <listitem>
                <!--l. 393-->
                <para>requirements verifcation, </para>
              </listitem>
              <listitem>
                <!--l. 394-->
                <para>requirements specifcation and </para>
              </listitem>
              <listitem>
                <!--l. 395-->
                <para>requirements change management.</para>
              </listitem>
            </itemizedlist> Software Project Planning which aims to establish reasonable plans for
            the software engineering and the managing of the software project. Software Project
            Tracking and Oversight is about making projects monitorable in order that management can
            take effective action when the software project's performance deviates signifcantly from
            the plans. Software Subcontract Management aims to establish a process to evaluate,
            select and manage subcontractors effectively. Software Quality Assurance aims to provide
            management with appropriate visibility into the software products being developed and
            process used to develop them. Software Confguration Management focuses on establishing
            and maintaining all products of the software project throughout the project's life cycle.
            <!--l. 416-->
            <para/>
          </section>
          <!--l. 416-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-36000013.7.5"/>Key process areas for level 3 maturity</title>
            <!--l. 418-->
            <para> The key process areas address issues which help the organization to establish an
              infrastructure which institutionalizes effective software engineering and management
              processes across all projects. They include:</para>
            <!--l. 423-->
            <para> Organization Process Focus establish the organizational responsibility for
              software process activities enabling the organization to improve its overall software
              process capability. Organization Process Defnition includes </para>
            <itemizedlist>
              <listitem>
                <!--l. 430-->
                <para>Developing and maintaining software process assets that improve process
                  performance across projects. </para>
              </listitem>
              <listitem>
                <!--l. 432-->
                <para>These software process assets should provide a basis for obtaining meaningful
                  information for quantitative process management. </para>
              </listitem>
              <listitem>
                <!--l. 435-->
                <para>The software process assets provide a stable foundation that can be
                  institutionalized via training and common information and guideline repositories.</para>
              </listitem>
            </itemizedlist> Training Programs are introduced to develop the skills and knowledge of
            individuals so that they can perform their roles effectively and efficiently. Integrated
            Software Management is applied on a per-project basis. It aims to integrate the software
            engineering and management aspects into a coherent, defned software process that is
            tailored from the organization's standard software process. The tailoring is based on <itemizedlist>
              <listitem>
                <!--l. 448-->
                <para>the business environment and </para>
              </listitem>
              <listitem>
                <!--l. 449-->
                <para>the technical needs</para>
              </listitem>
            </itemizedlist>
            <!--l. 451-->
            <para>of the project. Software Product Engineering describes the technical activities of
              the software project like </para>
            <itemizedlist>
              <listitem>
                <!--l. 455-->
                <para>Requirements analysis, specifcation and management. </para>
              </listitem>
              <listitem>
                <!--l. 456-->
                <para>Architectural design process. </para>
              </listitem>
              <listitem>
                <!--l. 457-->
                <para>System design. </para>
              </listitem>
              <listitem>
                <!--l. 458-->
                <para>Implementation. </para>
              </listitem>
              <listitem>
                <!--l. 459-->
                <para>Testing.</para>
              </listitem>
            </itemizedlist>
            <!--l. 461-->
            <para>It aims to establish an effective, well-defned engineering process which is
              applied consistently to integrate all software engineering activities to produce
              correct and consistent software products effectively and efficiently. Intergroup
              Coordination aims to establish an infrastructure enabling different software
              engineering groups to interact and collaborate effectively. Peer Reviews aims to
              decrease the defect level of software early and efficiently. In addition the
              understanding of individual products of the software process is distributed. Typical
              methods used include inspections and structured walkthroughs.</para>
            <!--l. 477-->
            <para/>
          </section>
          <!--l. 477-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-36100013.7.5"/>Key process areas for level 4 maturity</title>
            <!--l. 479-->
            <para> The key process areas for level 4 address issues which introduce quantitative
              measurability of the software process and its products. They include Quantitative
              Process Management aims to the process performance of a measurably stable process
              quantitatively. Causes of systematic variations from targets are analyzed and
              corrective measures are introduced. Software Quality Measurement aims to </para>
            <itemizedlist>
              <listitem>
                <!--l. 489-->
                <para>Develop a quantitative understanding of the quality of the project's software
                  products. </para>
              </listitem>
              <listitem>
                <!--l. 491-->
                <para>Achieve specifc quality goals.</para>
              </listitem>
            </itemizedlist>
            <!--l. 497-->
            <para/>
          </section>
          <!--l. 497-->
          <section role="subsubsection">
            <title>
              <anchor id="x1-36200013.7.5"/>Key process areas for level 5 maturity</title>
            <!--l. 499-->
            <para> The key process areas of level 5 address issues which help the organization to
              establish the infrastructure to continually improve the software process. They
              include: Defect Prevention aims to </para>
            <itemizedlist>
              <listitem>
                <!--l. 505-->
                <para>Identify the causes of defects before they occur and prevent the defects from
                  occurring. </para>
              </listitem>
              <listitem>
                <!--l. 507-->
                <para>Initiate a process of introducing changes to the defned software process.</para>
              </listitem>
            </itemizedlist> Technology Change Management focuses on performing innovation and
            introducing innovations efficiently in order to remain competitive in a changing
            environment. It is responsible for <itemizedlist>
              <listitem>
                <!--l. 515-->
                <para>Identifying benefcial new technologies including tools, methods and processes. </para>
              </listitem>
              <listitem>
                <!--l. 517-->
                <para>Transfer benefcial managers in a structured, well managed way into the organization.</para>
              </listitem>
            </itemizedlist> Process Change Management is responsible for continually improving the
            software processes used in the organization in order to <itemizedlist>
              <listitem>
                <!--l. 524-->
                <para>improve software quality and </para>
              </listitem>
              <listitem>
                <!--l. 525-->
                <para>increase productivity.</para>
              </listitem>
            </itemizedlist>
            <!--l. 531-->
            <para/>
          </section>
        </section>
        <!--l. 531-->
        <section role="subsection">
          <title>
            <abbrev role="title-mark">13.7.6</abbrev>
            <anchor id="x1-36300013.7.6"/>Practices of High-Maturity Organizations</title>
          <!--l. 533-->
          <para> Many companies have introduced the CMM into their organization and in February 200
            a study that 60 companies (44 in the US, 14 in India, 1 in Australia and 1 in Israel)
            have reached CMM level 4 and 37 companies (27 in the US and 10 in India) have reached
            CMM level 5.</para>
          <!--l. 539-->
          <para> Most high maturity organizations build real-time applications, particularly for the
            defense industry. Nevertheless, the list includes general software development
            companies, and companies from the aviation, fnancial, telecommunications sectors.</para>
          <!--l. 544-->
          <para> Below we list some general management practices followed by most high-maturity
            organizations: </para>
          <itemizedlist>
            <listitem>
              <!--l. 547-->
              <para>The software process improvement programs are aligned with Total Quality
                management (TQM) initiatives at the organizational or enterprise level. </para>
            </listitem>
            <listitem>
              <!--l. 550-->
              <para>They typically have achieved ISO 9001 certifcation. </para>
            </listitem>
            <listitem>
              <!--l. 551-->
              <para>They use other standard management models for issues which fall outside the
                scope of the Software CMM like </para>
              <itemizedlist>
                <listitem>
                  <!--l. 554-->
                  <para>ISO 12207 for software life cycle processes. </para>
                </listitem>
                <listitem>
                  <!--l. 555-->
                  <para>People CMM. </para>
                </listitem>
                <listitem>
                  <!--l. 556-->
                  <para>Software Acquisition CMM.</para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <!--l. 558-->
              <para>Use cost models such as COCOMO and Price-S. </para>
            </listitem>
            <listitem>
              <!--l. 559-->
              <para>Perform systematic risk management and continuously maintain a top-10 risk list. </para>
            </listitem>
            <listitem>
              <!--l. 561-->
              <para>Use the Project Evaluation and Review technique (PERT). </para>
            </listitem>
            <listitem>
              <!--l. 562-->
              <para>Employ chief architects and chief engineers.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

</chapter>
