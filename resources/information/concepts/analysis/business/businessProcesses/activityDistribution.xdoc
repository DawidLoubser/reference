<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/samples/docbook/xml/docbookx.dtd">
-->
<section id="resources.information.concepts.analysis.business.businessProcesses.activityDistribution"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Activity distribution across business units</title>
  <para>
    We have looked at how the core business units collaborate to realize 
    a particular scenario of a use case. Let us now look how 
    the business units collaborate to realize the use case in general.
  </para>
  <para>
    We will, once again, make use of a UML activity diagram. This time we 
    will, however, use <emphasis>swimlanes</emphasis> to specify which activity is 
    done by which business unit.
  </para>

  <figure id="resources.information.concepts.analysis.business.businessProcesses.eatOutBusinessUnitLevelActivity_fig">
    <title>
      Showing how business units collaborate to realize a use case.
    </title> 
    <graphic fileref="eatOutBusinessUnitLevelActivity.jpg"/>
  </figure>
  
  <para>
    Note also that we show the object flow in the activity diagram. For example,
    the order flows from the diningroom-services to the kitchen and back to 
    diningroom-services and so forth.
  </para>
  
  <para>
    We also show that there are concurrent activities within the business, even in the
    context of a particular scenario of a particular use case. Diningroom-services request
    the kitchen to prepare an order, and while the kitchen is busy, diningroom-services
    concurrently maintains an eye on the customer in order to, for example, add 
    further items to the order. That concurrent activity comes to an end after 
    notifying diningroom-services that the items are ready for collection.
  </para>
  
  <para>
    It may be interesting to observe that diningroom-services effectively plays the role of
    the <emphasis>controller object</emphasis> for this use case.   
  </para>
</section>
