<?xml version="1.0" encoding="utf-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><!--Authored by mailto:fritz@solms.co.za on 2007-3-8 -->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Typical model-driven software development process</title>


    <para> Moderns software development approaches are virtually exclusively iterative, with each
        iteration realizing or modifying a particular use case realized by the system. As such, most
        modern software development approaches are use case driven. </para>
    <figure>
        <title>An iterative, model driven software development process</title>
        <mediaobject>
            <imageobject>
                <imagedata width="400" fileref="./typicalModelDrivenDevelopmentProcess.jpg"/>
            </imageobject>
        </mediaobject>
    </figure>
    <para> The input for an iteration should thus be a use case contract which specifies the
        functional and non-functional stake holder requirements around the use case. The use case
        contract is provided to the design team, the architecture team and to quality assurance. </para>
    <para> Given the use case contract, quality assurance can go ahead to define the test cases for
        the use case. </para>
    <para> In the mean time architecture can assess whether the current systems architecture can
        effectively address the quality requirements for the use case. If not, it is responsible for
        making the appropriate architectural adjustments. </para>
    <para> The design team design also receives the use case contract in order to design a business
        process realizing the functional requirements. The design process yields a technology
        neutral business process design, the PIM. </para>
    <para> Once architecture and design have completed their work, implementation can go ahead and
        map the technology neutral business process design onto the architecture and technologies
        specified by architecture. </para>
    <para> The resultant implementation is tested by quality assurance before handing the use case
        over to operations for deployment. If the system does not provide the required
        functionality, the design team is requested to apply the required design changes. Having
        done so, implementation will have to update the implementation mapping before handing the
        use case over for testing again. </para>
    <para> If the system does not deliver the required qualities, architecture is requested to
        insure that the required architectural optimizations are done. At times architecture may
        identify certain design decisions or even certain implementation mappings causing inferior
        system quality. If this is the case, architecture will raise these issues with the design
        and implementation team respectively. Often, however, the increased quality may be achieved
        through architectural adjustments. Once these have been applied, the implementation team
        will have to update the implementation mapping before handing the system back for testing.
    </para>
</section>
