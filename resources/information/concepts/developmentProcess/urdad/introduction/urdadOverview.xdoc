<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.developmentProcess.urdad.introduction.urdadOverview"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Overview of URDAD</title>
    <para>
        URDAD has been applied and taught since 2001. It aims to simplify the design process, 
        by providing a step-for-step algorithm driving the design process. It combines use-case
        and responsibility driven designs into a single algorithm where the use cases define 
        the scope of the iterations (in the context of iterative 
        development), while the responsibilities define the level of granularity one is working at
        within an iteration, <abbrev>i.e.</abbrev> within each iteration one cycles through
        lower and lower level of granularity until the use case is fully realized. Furthermore
        components are largely identified from responsibilities and not vice versa.
    </para>    
    <para>
        URDAD starts the design process around concrete leave use cases with responsibility 
        identification and allocation steps.
        The responsibilities form the cornerstone around which secondary actors as well
        as the core system components are identified. Furthermore, the responsibilities
        define the level of granularity one is currently working in. This level of granularity
        remains fixed for that cycle. Within a cycle no further objects are introduced besides those
        which were introduced to realize the core responsibilities.
    </para>
    <para>
        URDAD then continues through the dynamic model (sequence and activity diagrams, and
        state charts), using communication diagrams as natural stepping stone for generating
        the static context of the collaboration, <abbev>i.e.</abbev> that subset of the static
        model which, at that level of granularity, is required to realize the use case. This
        process facilitates that
        the static context of the collaboration is virtually automatically generated from the 
        dynamic model. such that it contains only those elements of the static structure which
        are, at that level of granularity, required to realize the use case. 
        <note><para>
           This process thus generates only the minimal structutural complexity required to
           realize the use case.
         </para></note>  
    </para>
    <para>
      For the next level of granularity, one of the core components of the previous level of
      granularity is chosen as the new system. Those components and actors of the previous 
      level of granularity which interacted with that component will be the actors at this 
      lower level of granularity. The services those components made use of will be the use 
      cases of the new system at the new level of granularity. The process is now repeated for 
      lower and lower levels of granularity until the use case is realized.
    </para>
    <para>
      This top-down design is followed by a test-driven bottom-up implementation process
      with unit tests for each component. The unit tests for the next higher level of granularity
      automatically become the integration tests for the components in the next lower level
      of granularity.
    </para>
</section>
