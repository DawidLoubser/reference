<?xml version="1.0" encoding="UTF-8"?>

<section id="projects.solms.research.design.integratedBusinessProcessAndSystemDesignViaUrdad.urdad.analysis.business.visionScope.examples.solms.visionScope"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Detailed use case requirements elicitation, documentation and verification</title>
  <para>
    The detailed use case requirements around the use case(s) delivered for a particular iteration are elicited, verified and documented iteratively. The
    requirements are then fed to the development team for realization while business analysis continues with eliciting the requirements for the second
    iteration.
  </para>
  <figure>
    <title>Process for specifying detailed use case requirements</title>
    <graphic fileref="detailedUseCaseRequirements.jpg"/>
  </figure>
  
  <section>
    <title>Client selects use cases for iteration</title>
    <para>
      URDAD follows Extreme Programming in that the client selects the use case(s) to be realized within each iteration. 
      This is only possible if the architectural framework has been put in place before starting with the use case realizations - this is required by URDAD. 
      It is possible to construct the core architectural framework before having the detailed use case requirements available,
      since architecture is largely driven by the quality attributes or non-functional requirements (quality attributes) and much less so by the detailed 
      functional (use case) requirements. Recall that URDAD requires the capturing of the quality attrbutes as required by business in the context of the vision 
      and scope of the project.    
      <note><para>
        The above is true for both, system and business requirements. In the latter case the architecture for the organization has to realize the core quality 
        attributes which differentiate the organization from its competitors. The client use case requirements will then feed into the business process design
        and realization process. Clients may select the use case(s) they require next either directly or indirectly via client surveys. Alternatively  business
        analysis may assess which use cases provide best value to the client or to the business itself.
      </para></note>    
    </para>
  </section>
  
  <section>
    <title>Identifying responsibilities which the client/user needs to have addressed when the use case is realized</title>
    <para>
      The responsibilities which the user/client needs to have addressed are captured in UML use case diagrams with includes and extends relationships to
      the responsibilities (modeled as lower level use cases). In UML, an include relationship specifies a responsibility which has to be addressed in the context
      of any successful realization of a use case (a mandatory responsibility) while extends relationships are used for optional responsibilities.
    </para>
  </section>

  <section>
    <title>Assigning responsibilties to secondary actors</title>
    <para>
      At times it is a requirement to outsource certain responsibilities to external service providers (organizations or systems). The roles played by these external
      service providers in the context of the use case is represented in UML by secondary actors. The secondary actors assist the context to realize the use case 
      for the user/primary actor. For example, a training institution may outsource the catering for the course lunches to a caterer.
    </para>
  </section>

  <section>
    <title>User workflow specification</title>
    <para>
      The required use/client workflow is captured, as usual, in sequence diagrams (when looking at individual scenarios) and in activity diagrams (when looking
      at the user workflow in general). In the latter case it is understood that one only shows the activities of the context (business or system)  as perceived by
      the client/user - not the actual activities as they are performed internally within the organization/system. The latter will be specified during the
      business process/system design phases.
    </para>
  </section>
  
  <section>
    <title>Entity object structure</title>
    <para>
      At times complex information or physical objects) are exchanged between the context and the actors. For example, a client may submit an order or
      receive an invoice. The information provided in the order (<abbrev>i.e.</abbrev> that it has certain client information, one or more line items, ...)
      and theinformation which the invoice generated by the organization/system must contain is specified in UML class diagrams.
    </para>
  </section>
  
  <section>
    <title>Specifying the contracts</title>
    <para>
      Finally business analysis formalizes the contract for the context itself as well as the service level aggrement (SLA) for each secondary actor, 
      <abbrev>i.e.</abbrev> the contracts the outsourtcing partners need to realize. There will be one contract for the context and one contract
      for each secondary actor.
    </para>
    <para>
      In either case the functional contract requirement is captured in the form of 
      <itemizedlist>
        <listitem><para>
          an interface specifying the services which the context/secondary actor need to realize, the information provided upon service request
          and the return value which the context/secondary actor provides upon successful completion of the service.
        </para></listitem>
        <listitem><para>
          the functional requirements in the form of pre- and post-conditions and potentially invariance constraints
          (alla <emphasis>Design by Contract</emphasis> and <emphasis>OCL</emphasis> (UML's Object Constraint Language),
        </para></listitem>
        <listitem><para>
          and the non-functional requirements (<abbrev>i.e.</abbrev> the quality attributes) required from the context/secondary actor.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>

  <section>
    <title>Architectural adjustments</title>
    <para>
      If the quality attributes required from the context for that use case are not covered by the quality attributes for the context in general as specified
      in the vision and scope for that context, then this particular use case cannot simply be absorbed into the context wide architecture. One may need
      to make architectural adjustments for that use case or, at times, that use case will be realized within a separate system module or business unit which
      ios designed in a different architecture to the rest of the system or the rest of the organization.
    </para>
    <para>
      For example, For <emphasis>Solms Training, Consulting and Development</emphasis> the organization-wide quality attributes are modifiability,
      ingenuitivity, and quality. However, should we decide to introduce client problem solving service, then for this use cases the core quality attributes 
      may be availability and performance (speed). This business unit may require a different architecture with more role-based human resource
      management, replication and so forth.
    </para>
  </section>
  
  
</section>  
