<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.developmentProcess.urdad.analysis.identifyingUsersUseCases"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Identifying users and use cases</title>
    <para>
      We first need to <emphasis>identify the user (primary actor) for each use case</emphasis> 
      -- <abbrev>i.e.</abbrev> that actor who/which gets the main use out of the use case. It is often
      the <emphasis>user</emphasis> who/which initiates the use case and drives it.
      <note><para>
        The user/primary actor may be a person or another system.  
      </para></note>
    </para>
    <para>
      In order to assist in <emphasis>identifying use cases</emphasis> and not system functionalities,  
      the use cases are identified from the perspective of the <emphasis>user</emphasis>,
      not from the perspective of the system.
      You will have to verify that each use case is indeed discrete, complete user tasks. 
    </para>
    
    <section>
      <title>Identifying secondary actors</title>
      <para>
        Do not try and identify any secondary actors at this stage. The secondary actor
        identification should come from responsibility assignments during either, the
        analysis or the design phase.
      </para>

    </section>
    
    <section>
      <title>System scoping via use-case abstractions</title>
    </section>
    
    <para>
      Having identified the core concrete use cases, we <emphasis>identify use case 
      abstractions</emphasis>. There is significant benefit in being able to look at
      the requirements of a system at different levels of abstraction. It usually leads
      to a conceptually clearer understanding of the requirements. Furthermore, 
      use case abstraction provide a natual classification (grouping) for the concrete
      use cases.
    </para>
    <para>
        The use case abstractions form the cornerstone for defining the scope, 
        <abbrev>i.e.</abbrev> the core responsibilities, of the system.
    </para>    
</section>
