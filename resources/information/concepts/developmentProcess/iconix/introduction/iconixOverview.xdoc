<?xml version="1.0" encoding="UTF-8"?>


<section id="resources.information.concepts.developmentProcess.iconix.introduction.iconixOverview"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>ICONIX</title>
  <para>
    Traditionally object-oriented approaches navigate from the use case model to
    the static model via an object dictionary. This is a difficult process
    which may easily result in the system becoming structurally more complex than necessary.
  </para>    
  <para>
     ICONIX <xref linkend="Rosenberg-Scott-2000"/> tries to bridge the gap between the 
     use case model and the design of the system by introducing robustness diagrams with 
     controller, entity and boundary objects. All actors interface only with boundary 
     objects which in turn interface only with controllers. Controllers may make use of entity
     objects, other controllers and boundary objects. Note that this approach effectively applies
     the model-view-controller pattern to software design in general.
  </para>
  <para>
    Introducing a controller which manages the work flow for a use case is usually an excellent
    localization of one of the core responsibilities. However, in general,
    the identification of these controller, entity and interface objects is non-trivial.
    Furthermore, the process does not naturally ensure good responsibility localization nor the
    generation of a clean, layered structure. In addition to the above, the decomposition
    into controller, entity and interface objects is not necessarily the most natural object-oriented
    decomposition.
  </para>
</section>
