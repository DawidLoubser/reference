<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.concepts.developmentProcess.bestPractices.bestPractices"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Best Practices</title>
  <para>
    A number of people have looked at a wide range of projects in order to try and identify
    those aspects of a development process which seem to differentiate the more
    successful projects from the less successful ones. The result of these studies is a
    collection of <emphasis>best practices</emphasis>. 
  </para>
  <para>
    These best practices resemble general guidelines which should increase the success rate
    of your projects. They include
    <orderedlist>
      <listitem><para>
         Management of System Requirements.
      </para></listitem>
      <listitem><para>
         Iterative development.
      </para></listitem>
      <listitem><para>
         Visual modeling.
      </para></listitem>
      <listitem><para>
         Component-based architectures.
      </para></listitem>
      <listitem><para>
         A process for verifying software quality.
      </para></listitem>
      <listitem><para>
         A framework for change control for requirements and designs and implementations.
      </para></listitem>
    </orderedlist>
  </para>

  <section>
    <title>Managing System Requirements</title>
    <para>
      If you have been involved in software development for any length of time it is likely
      that you were at some or other stage involved in building a system which was quite
      different to what the client wanted. The risk of building the wrong system is perhaps
      the largest risk your development team may be exposed to.
    </para>
    <para>
      A good process for eliciting, documenting, verifying and managing system requirements is
      thus essential for successful projects. A study done in 1989 \cite{Finkelstein89}.
      has shown that well above 50% of system errors were due to errors in the system requirements,
      <abbrev>i.e.</abbrev> either that 
      <itemizedlist>
        <listitem><para>they were wrong, </para></listitem>
        <listitem><para>they were incomplete,</para></listitem>
        <listitem><para>or that they were mis-understod.</para></listitem>
      </itemizedlist>
      Furthermore,  because an error at the requirements is much more expensive to fix than an 
      implementation error it was found that more than 80% of the cost of errors were due to errors 
      in the system requirements while the cost of implementation errors was found to be less than
      1% (see <xref linkend="resources.information.concepts.developmentProcess.bestPractices.SourceCostOfErrors_table"/>).
    </para>
    <para>
      Things have perhaps improved a little bit but even recent studies suggest that more that
      around 50% of errors arise from the system requirements specification.
    </para>
    
    <table id="resources.information.concepts.developmentProcess.bestPractices.SourceCostOfErrors_table">
      <title>Source of errors in software systems and the cost
           incurred in order to correct these errors.</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry><para>Development Stage</para></entry>
            <entry><para>Source of error</para></entry>
            <entry><para>Effort (cost) to correct</para></entry>
          </row>
        </thead>
        <tbody>
          <row><entry><para>Requirements</para></entry><entry><para>56%</para></entry><entry><para>82%</para></entry></row>
          <row><entry><para>Analysis/Design</para></entry><entry><para>27%</para></entry><entry><para>13%</para></entry></row>
          <row><entry><para>Implementation</para></entry><entry><para>7%</para></entry><entry><para>1%</para></entry></row>
          <row><entry><para>Other</para></entry><entry><para>10%</para></entry><entry><para>4%</para></entry></row>
        </tbody>
      </tgroup>
    </table>
    
    <para>
      System requirements must be elicited, verified, organized and documented in a form which
      is accessible to the client, users of the system and other domain experts as well as to
      developers. These system requirements are really business requirements and should be
      treated as such. UML diagrams are very useful for documenting system requirements,
      especially the use-case, sequence and deployment diagrams.
    </para>

    <para>
      The process of eliciting, documenting and managing system requirements is so important
      that a separate course is offered focusing solely on these aspects of the software
      development process.
    </para>
  </section>

  <section>
    <title>Iterative Development</title>
    <para>
      If one takes a large software project sequentially through the phases of analysis, design
      implementation and testing (the traditional waterfall process) one is usually exposed to
      a lot of risk. It is difficult to monitor how far one is in the development process and
      it is not yet clear how and at what cost the remaining difficult problems will be resolved.
    </para>
    <para>
      The modern approach is a more iterative approach where demonstrable prototypes are released
      frequently in order to obtain client and user feedback. Often the incremental development
      revolves around use cases, <abbrev>i.e.</abbrev> one or more use cases are implemented 
      or refined during each increment. This approach facilitates an
      incremental understanding of the problem through successive refinements as well as an
      incremental development of the final product.
    </para>
    <para>
      The high-risk elements are tackled early so that the project's risk profile is reduced
      rapidly. Furthermore, the regular release of incremental executable prototypes facilitates
      more accurate progress monitoring and helps to ensure that team members remain focused
      on producing results.
    </para>
  </section>

  <section>
    <title>Component-Based Architectures</title>
    <para>
      A component based approach divides the system into subsystems, each with their own clearly
      defined responsibilities and interfaces. These components may be developed by different teams
      whose skills profile makes them the natural choice for the respective components. Alternatively
      the components may be implemented iteratively.
    </para>
    <para>
      After a system has been decomposed into components, the system is usually a lot easier
      to understand and the resultant system is generally more flexible. Furthermore, components
      facilitate effective software reuse.
    </para>
    <para>
      Successful component architectures and middlewares include CORBA, SOAP and 
      Enterprise Java Beans.
    </para>
  </section>

  <section>
    <title>Visual Modeling</title>
    <para>
       Visual modeling is used to understand and specify the system requirements, structure and dynamics
       in a way which is easy to understand and to communicate. The industry standard for object-oriented
       modeling languages is UML.
    </para>
  </section>

  <section>
    <title>Software Verification Process</title>
    <para>
        It is difficult to know whether the product is correct without tests. Furthermore, it is difficult
        to know how far in the development process and how close to completion a project is if there are
        no tests in place.
    </para>
    <para>
      Generally, any element containing logic should be testable and a test should
      be developed for it. It is often a good idea to develop the test before developing the actual
      element. When developing an element, one often tends to focus on implementation issues, while
      the focus when developing a test is usually on how the element is used.
    </para>
    <para>
      In a complex system it is usually extremely difficult to understand the implications of a
      modification. A testing framework can facilitate automatic testing of all system elements
      and it helps to monitor any problems which are introduced by system modifications.
    </para>
  </section>

  <section>
    <title>Change Control</title>
    <para>
      Change to released system elements van be very risky due to the potential problems they
      may introduce into other aspects of the system. At the same time t is important to keep
      systems dynamic and to allow for rapid implementations of bug fixes, feature improvements
      and new functionality.
    </para>
    <para>
      The answer to this dilemma is the use of a change control system which allows for roll-back
      together with a testing framework (see previous section). In addition, a change control
      system provides access control to designs and source code elements. It is advisable to
      introduce a rule that no elements may be released into the system for general use prior
      to a complete test being available.
    </para>
    <para>
      Change control systems may provide
      to developers secure work spaces which are isolated from changes made in other work spaces.
      The latter can be a blessing as well as a risk. The result can easily be a diverging
      collection of work spaces which are over time difficult to integrate.
    </para>
  </section>
</section>
