<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.concepts.developmentProcess.extremeProgramming.practices"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>The 12 XP practices</title>
  <para> 
    The 4 core values of XP are put into practice via 12 XP practices: 
    <orderedlist>
      <listitem>
        <para>Planning </para>
      </listitem>
      <listitem>
        <para>On-site customer </para>
      </listitem>
      <listitem>
        <para>Simple design </para>
      </listitem>
      <listitem>
        <para>Small releases </para>
      </listitem>
      <listitem>
        <para>Metaphor </para>
      </listitem>
      <listitem>
        <para>Testing </para>
      </listitem>
      <listitem>
        <para>Refactoring </para>
      </listitem>
      <listitem>
        <para>Pair programming </para>
      </listitem>
      <listitem>
        <para>Collective ownership </para>
      </listitem>
      <listitem>
        <para>Continuous integration </para>
      </listitem>
      <listitem>
        <para>40 hour week </para>
      </listitem>
      <listitem>
        <para>Coding standards</para>
      </listitem>
    </orderedlist>
  </para>  
  <section><title>Planning</title>
    <para> 
      During the planning phase one determines the features of the next release from
      from a combination of prioritized stories and technical estimates.
    </para>
    <para> 
      XP identifies 3 critical steps to iteration planning: Customers present user
      stories and the development team tries to understand the story. Team brainstorms
      engineering tasks. Designers identify the tasks required to implement the story. If
      their are multiple design solutions, the simplest is chosen. The customer partakes in
      this process, ensuring that the story is understood correctly and that the user
      requirements are met. Programmers estimate the work and sign up. Programmers or pairs
      of programmers sign up to take primarily responsibility for stories and make estimates
      for the time required to complete the individual tasks. Note that developers select
      and estimate their own tasks. Consequently developers will feel more commitment to the
      work and to the schedule.
    </para>
    <para> 
      XP recommends that an effort should be made to have programmers take
      responsibility for complete stories and that tasks within a story are not assigned to
      different programmers.
    </para>
    <para> 
      If the story is large the principal holds in slightly modified form. A small team
      of programmers takes on the story and team members are, in the context of a particular
      iteration, not involved in any other stories.
    </para>
    <para> 
      The reason behind this is that if developers are involved in multiple stories,
      then one developer could be working on one story, having it virtually complete bar the
      task(s) assigned to another developer who is involved virtually completing another
      story. The end result of this could be that one has a large number of virtually
      complete stories â€“ and nothing to show to the customer.
    </para>
  </section>
  <section><title>On-site customer</title>
    <para> 
      Current statistics still show that about 80% of the cost of errors is due to
      errors in the system requirements. XP tries to address this by having the customer
      commit a user/domain expert full-time to the development process.
    </para>
    <para> 
      Through this XP envisages that the developer and customer work on the project.
    </para>
    <para> 
      The main responsibility of the on-site customer are 
      <itemizedlist>
        <listitem>
          <para>To help define the system. </para>
        </listitem>
        <listitem>
          <para>To write tests. </para>
        </listitem>
        <listitem>
          <para>To answer questions.</para>
        </listitem>
      </itemizedlist>
    </para>  
    <para> 
      XP is of the view that formal requirements specifications are very expensive to
      obtain and that very often they do not communicate the requirements very well.
    </para>
    <para> 
      Instead, XP claims that it is much more effective to discuss the requirements
      with the client verbally as the project continues.
    </para>
  </section>
  
  <section>
    <title>Simple design</title>
    <para> 
      Since the stories for each iterations are short, the design for them can usually
      be very simple. XP suggests going through a rapid design phase using UML sketches
      where the design should, in most cases require less than half an hour. If, at any
      stage, it becomes apparent that a design can be simplified, this simplification should
      be done on the spot (see refactoring below).
    </para>
    <para> 
      I feel that the design should not be rushed too much. Sure, one can reach design
      paralysis when trying to achieve the perfect design but a good design can simplify the
      implementation and maintenance significantly.
    </para>
    <para> 
      If you do follow the XP approach, then I suggest you give all developers a basic
      foundation in design patterns. Design patterns are generic, reusable design elements
      which can be applied to a wide range of problems and, particularly in the context of
      rapid design one should have a box full of design patterns handy.
    </para>
    <para> 
      In addition to giving your team members a basic background in general design
      patterns, you should also include some background on patterns addressing the added
      complexity and performance considerations of distributed systems.
    </para>
    <para> 
      When team members discover a design pattern themselves it should be inserted into
      a patterns repository maintained by the team and one should consider introducing now
      and then seminars or informal discussions on design patterns.
    </para>
  </section>
  
  <section><title>Small releases</title>
    <para> 
      The outermost XP cycle is the release. Small and frequent releases provide early
      benefit to the customer and early feedback to the developers.
    </para>
    <para> 
      If you have complex systems which cannot be used in practice before they are
      complete, one can often develop the new system in such a way that it integrates with
      the existing system and that it slowly but surely takes over more and more
      responsibility from the older system.
    </para>
    <para> 
      For example, one could replace the user-interface layer with a modern GUI. This
      itself could provide a direct benefit to the client in terms of increased productivity
      or decreased training costs for new staff members.
    </para>
    <para> 
      Similarly, one could replace those functionalities in the existing system which
      are not working correctly or which need to accommodate new business rules.
    </para>
  </section>
  
  <section>
    <title>Pair programming</title>
    <para> 
      Pair programming is perhaps that aspect of XP which has caused the biggest stir.
      The idea is that at any time two developers sit on one machine.
    </para>
    <para> 
      The developer sitting behind the keyboard is the driver and the person sitting
      next to him/her is called the partner. The partner continuously checks the code and
      tries to put it in the requirements context. The roles can be reversed at any time
      between the pair members.
    </para>
    <para> 
      XP claims that pair programming has the following benefits: 
      <itemizedlist>
        <listitem><para>Better quality code.</para></listitem>
        <listitem><para>Higher productivity.</para></listitem>
        <listitem><para>Lower project risk.</para></listitem>
        <listitem><para>Better adherence to standards and recommended practices.</para></listitem>
        <listitem><para>Makes programming more fun.</para></listitem>
        <listitem><para>General increase in skills levels.</para></listitem>
      </itemizedlist>
    </para>  
      
    <section>
      <title>Better quality code</title>
      <para>
          The probability of developing a good implementation is certainly higher with two heads
          and the probability of not spotting a logical or technical error is decreased with two
          persons thinking about an implementation. 
      </para>
    </section>
    
    <section>
      <title>Higher productivity</title>
      <para>
         The increase in productivity arises from 
        <itemizedlist>
          <listitem>
            <para>Less mistakes being made. </para>
          </listitem>
          <listitem>
            <para>Solution to problems are found faster with two persons discussing a problem.</para>
          </listitem>
        </itemizedlist> 
      </para>
    </section>
    
    <section>
      <title>Lower project risk</title>
      <para>
         The decrease in project risk originates from 
         <itemizedlist>
          <listitem>
            <para>The increase in design and code quality. </para>
          </listitem>
          <listitem>
            <para>The fact that at least two persons are intimately familiar with any piece of
              code reduces the exposure to single individuals.</para>
          </listitem>
        </itemizedlist> 
      </para>
    </section>
    
    <section>
      <title>Better adherence to standards and recommended practices</title>
      <para>
        Generally it is found that persons working in pairs are less likely to ignore coding 
        standards or development guidelines. 
      </para>
    </section>
    
    <section>
      <title>Makes programming more fun</title>
      <para>
        Working in pairs is often experienced as more fun. People enjoy solving problems 
        together and the odd shared joke makes life a lot more enjoyable. 
      </para>
    </section>
    
    <section>
      <title>General increase in the project team's expertise level</title>
      <para>
        Particularly if pair members are exchanged now and then, each project team member may
        ultimately learn from every other member, thereby enhancing the general skills level of
        the project team. It may be beneficial to, at times, team off more experienced developers
        with younger colleagues. 
        The more experienced colleague 
        <itemizedlist>
          <listitem>
            <para>Potentially has a deeper and wider understanding of the business. </para>
          </listitem>
          <listitem>
            <para>Often has had more exposure with ideas which do not work. </para>
          </listitem>
          <listitem>
            <para>Has exposure to design solutions which have been applied successfully in the past.</para>
          </listitem>
        </itemizedlist>
      </para>  
      <para>
        The younger college, on the other hand 
        <itemizedlist>
          <listitem>
            <para>May be more up to date with the latest technology developments and latest
              academic trends. </para>
          </listitem>
          <listitem>
            <para>Is not predisposed by a long history of development and may come up with new,
              original ideas.</para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
  
  <section>
    <title>Testing</title>
    <para> 
      The first guideline recommended by XP is WRITE THE TEST FIRST. There are very many
      reasons why it is beneficial to write the test before writing the component you are testing:
    </para>
    <para> 
      Test represents low-level, precise requirements Specification. If the developer
      has a complete test, he/she has complete requirements Specification. More focused
      development process. Having complete requirements Specification removes any ambiguities
      about what the developer should develop. The development process is thus a streamlined
      process guided by the testable requirements Specification. Test not biased by
      implementation. If the developer writes the test after the code has been developed,
      the test may be strongly biased by what has been developed. The developer will simply
      test what they have just implemented. This may not be the actual test required and the
      resulting component could pass the test but fail the customer requirements, Test less
      likely to be neglected. After the component has been completed developers may get the
      comfortable feeling of having virtually completed the task. The test is a minor final
      plutocratic overhead which may not get the attention which it should.
    </para>
    <para> 
      Who should write the test? XP requires that the tests should be conceptually
      devised by the on-site customer. The developer then puts the tests into code,
      clarifying any uncertainties as he/she does that.
    </para>
    <para> 
      So, what should be tested? XP's guideline is simply: test everything that can
      break. There are some extremely simple things which really cannot break. Those do not
      require testing. Everything else does.
    </para>
    <para> 
      What if there are so many scenarios that writing an exhaustive test would take
      forever? Typically this is an indication that the component which you are testing is
      too complex and that it should be broken up into simpler sub-components which require
      simpler tests.
    </para>
    <para> 
      What should be done if a component fails in real life but passes its tests?
      Obviously the component breaks and the tests do not test everything that can break.
      Developers should update the test first, then the design and code.
    </para>
  </section>
  
  <section>
    <title>Continuous integration</title>
    <para> 
      A process in which all the system components are first built and, once this has
      been completed, goes through an integration phase where the system is assembled from
      these components may end up in deep trouble. Integration problems can be severe and
      very costly to fix.
    </para>
    <para> 
      XP suggests that the system should be rebuilt and reintegrated continuously,
      i.e.Â every time a new implementation task has been completed. This may be several
      times a day.
    </para>
    <para> 
      If rebuilding the system takes excessively long, its structure should be
      re investigated and enhanced so that the system can be rebuilt in a few minutes.
    </para>
  </section>
  <section>
    <title>Collective ownership</title>
    <para> 
      XP believes in collective ownership of code,i.e.Â that anyone may change any piece
      of code at any time (assuming, of course, that nobody else is working at the same time
      on that piece of code â€“ this should be guaranteed by using a simple code repository
      with facilities for booking code into and out of the repository).
    </para>
    <para> 
      The potential problem with this approach is that the person who makes the
      modification may perhaps misunderstand the design and code he/she is modifying. XP
      addresses this by requiring 
      <itemizedlist>
        <listitem>
          <para>The existence of unit tests for every unit of code. </para>
        </listitem>
        <listitem>
          <para>The requirement that designs and code should always be as simple as possible. </para>
        </listitem>
        <listitem>
          <para>Very active communication between all team members.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section>
    <title>Refactoring</title>
    <para> 
      Refactoring is about improving the design or the implementation of completed code
      without changing the behavior of the code. Often the resultant design and code is much
      more compact and much less complex than the original design and code.
    </para>
    <para> 
      This makes it difficult to sell to project managers because time is invested
      without immediate payoff. Particularly if critical deadlines are looming, refactoring
      is not very popular.
    </para>
    <para> 
      Still, even in the case where critical deadlines have to be met, refactoring can
      actually speed up the remaining development.
    </para>
    <para> 
      It is virtually insane to refactor production code if there are no tests in
      place. In fact, if there are no tests in place, project managers may have to introduce
      the unpopular rule that nothing in production is modified until the tests have been written.
    </para>
    <para> 
      One potential danger of refactoring is that as one digs further and further into
      the design and code, one fends more and more problems and modifies more and more, slowly
      digging ones own grave. To avoid this one should always refactor a small step at a
      time, retesting after every design/code change.
    </para>
  </section>
  
  <section>
    <title>40 hour week</title>
    <para> 
      XP believes that the quality of designs, code and tests decreases exponentially
      as people get more tired and more de-motivated. Hence long hours can cost the project
      more in lost time by ways of bug fixes, redevelopment and failures due to non-thorough
      tests, than what the extra hours of work add to the project.
    </para>
  </section>
  
  <section>
    <title>Coding standards</title>
    <para> 
      Since XP believes in collective ownership, the code developed by one developer
      should be accessible by every other developer in the team. To this end the team should
      introduce a common coding standard. This coding standard should 
      <itemizedlist>
        <listitem>
          <para>Encourage simple, clearly understandable code. </para>
        </listitem>
        <listitem>
          <para>Introduce a uniform code-look-and-feel across the project. </para>
        </listitem>
        <listitem>
          <para>Help junior developers avoid mistakes.</para>
        </listitem>
      </itemizedlist>
    </para>  
    <para> 
      The standards should cover the regular code as well as the tests.
    </para>
  </section>
  
  <section>
    <title>Metaphor</title>
    <para> 
      XP suggests that it is beneficial if one can find a metaphor for a system. The
      metaphor represents a conceptual equivalent though not a literal equivalent.
    </para>
  </section>
</section>
