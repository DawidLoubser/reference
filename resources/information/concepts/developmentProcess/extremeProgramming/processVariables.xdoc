<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/docbook/dtd/docbookx.dtd">
-->
<section id="resources.information.concepts.developmentProcess.extremeProgramming.processVariables"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>The 4 variables</title>
  <para> 
    XP identifies the 4 variables of a software process as 
    <itemizedlist>
      <listitem>
        <para>Cost </para>
      </listitem>
      <listitem>
        <para>Quality </para>
      </listitem>
      <listitem>
        <para>Time </para>
      </listitem>
      <listitem>
        <para>Scope</para>
      </listitem>
    </itemizedlist>
  </para>
  <para> 
    Changing any one of these variables will result in a change in at least one of the
    others. You can lock one or two of these variables and still change the others, but
    locking three of the variables results in the fourth variable be fixed too.
  </para>
  <para> 
    The relationship between the variables is, however, non-linear and at times not
    predictable. Doubling the cost (by, for example, hiring more people) does typically not
    half the development time and as you add more people the benefit curve will start
    ï¬‚attening off.
  </para>
  
  <section>
    <title>Increasing the project cost</title>
    <para> 
      Keeping quality and scope fixed, one can reduce the time required for a project by
      increasing the cost.
    </para>
    <para> 
      The cost may be increased by Increasing the skills resources: Adding more people
      to the project will reduce the time required for the project, but doubling the number
      of people on the project will typically not half the time. With more people the
      communication overheads increase. Furthermore, the initial effect of adding more
      people may even be to slow down the rate of development, because initially they may
      not be productive and furthermore will require time resources from the existing staff
      to get familiarized with the project. Thus, adding more people to a project which is
      behind its deadline may shift the delivery date out even further. Paying for longer
      hours: This can be useful for solving the odd crisis, but generally the morale sinks
      and tired people are less productive and make more mistakes. Investing in more
      powerful software tools: The right tools can make a significant contribution to the
      project. However, they require training time and often the tools do not live up to
      their promises. Investing in more powerful hardware tools: If a project looses
      significant amounts of time due to the time required to recompile the increments or due
      to running testing frameworks it is most probably wise to spend some money on
      hardware. Furthermore, relatively modest amounts spend on faster workstations with
      more memory and bigger screens for these workstations can increase productivity
      significantly by increasing the enthusiasm of team members.
    </para>
  </section>
  
  <section>
    <title>Trading off scope for time</title>
    <para> 
      Scope creep is notorious for putting projects further and further behind
      schedule. When adding scope it is very difficult to estimate the effect this will have
      on time. XP tries to address this by enforcing short iterations with a delivery at the
      end of each iteration. At the end of each iteration the effect on time of adding scope
      is evaluated, and, if necessary, scope is sacrificed to still remain on schedule.
    </para>
    <para> 
      In general XP suggests that you hardly ever slip deadlines or delivery dates for
      iterations. Instead you should rather sacrifice scope and still make your delivery.
    </para>
  </section>
  
  <section>
    <title>Quality</title>
    <para> 
      XP differentiates between external, perceived quality and internal quality.
    </para>
    <section>
      <title>External quality</title>
      <para>
        The external, perceived quality includes elements like the look-and-feel of user
        interfaces. Increasing external quality can have a significant effect on the other
        three variables, scope, time and cost. If the client wants certain improvements in the
        external quality, try and make them choose between this and some functional
        requirements and hopefully you will get all the functional requirements in place
        before optimizing the externally perceived quality. 
      </para>
    </section>
    <section>
      <title>Internal quality</title>
      <para>
        Unlike external
        quality, internal quality typically decreases project cost. The reasons is simply that
        if you invest in a good quality design and in testing at every level, you going to
        spend much less on debugging and developing fixes at a later stage.
      </para>
    </section>
  </section>
</section>
