<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
         xml:id="resources.information.technologies.java.lang.ooMappings.ooMappings"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Declarative programming languages</title>

    <para>
        Declarative languages are good at:
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Data transformation</title>
                    <para>Where one does not want to write the code to drive a complex
                    process of walking a data structure, but instead specify
                    how individual nodes should be transformed.
                    For example: Transforming XML with <productname>XSLT</productname>.
                    </para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Data querying</title>
                    <para>Where one does not want to control the process of optimally accessing
                    the internal data structures of some object or store, but instead specify
                    what one is looking for. For example: Querying relational data with <productname>SQL</productname>.</para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Easier parallel and concurrent computing</title>
                    <para>Where one does not want to be intimately involved with the processes of
                    breaking tasks up into smaller, parallel-executable chunks, but instead
                    use a language where the compiler or environment can automate aspects of this.
                    For example: Writing a parallel computation with <productname>Haskell</productname>.</para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Abstracting away complex, repetitive tasks</title>
                    <para>Less work is usually involved inspecifying <emphasis>what</emphasis>
                    you want done, than <emphasis>how</emphasis> it is to be done.
                    For example: Parsing free text using an <productname>ANTLR</productname> grammar.</para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>


</section>