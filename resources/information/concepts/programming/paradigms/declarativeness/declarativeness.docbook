<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook"
         xml:id="resources.information.technologies.java.lang.ooMappings.ooMappings"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Declarative vs Imperative</title>

    <para>
        The experience of programming in a particular language, and the problems it is well-suited to,
        is profoundly impacted by the degree which a language is declarative, or imperative:
        <itemizedlist>
            <listitem>
                <formalpara>
                    <title>Imperative</title>
                    <para>Literally controlling (or driving) the process, indicating <emphasis>how</emphasis> to do it.</para>
                </formalpara>
            </listitem>
            <listitem>
                <formalpara>
                    <title>Declarative</title>
                    <para>Adding instructions into an implicit or existing process, indicating <emphasis>what</emphasis> to do.</para>
                </formalpara>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        While a programming language may <emphasis>subscribe to</emphasis> a certain paradigm, or make a certain
        paradigm possible, very few languages are tied to these paradigms. One can use most declarative languages
        to describe a computation imperatively (for example, an <productname>XML</productname>-based description
        of a process), and one can use most imperative languages to build a description - of anything.
    </para>

    <para>
        The difference between declarative and imperative languages, thus, rarely cause an insurmountable gap.
        As soon as you move outside of the language's <quote>natural</quote> paradigm, however, certain problems
        occur, such as
        <itemizedlist>
            <listitem>
                <para>Increased verbosity (more code than what would seem necessary), or</para>
            </listitem>
            <listitem>
                <para>Losing the benefits of the language's type system.</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        In such cases, it's usually a good idea to introduce a technology that is specifically more suited to the
        problem. Very few software projects adhere to one paradigm throughout, and an important skill
        is knowing when to augment a project with a new programming technology, when the benefits it provides
        would outweigh the inevitable increase in complexity and required maintenance skill.
    </para>

    <xi:include href="imperative/imperative.docbook"/>
    <xi:include href="declarative/declarative.docbook"/>

</section>