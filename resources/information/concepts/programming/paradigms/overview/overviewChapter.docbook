<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xml:id="resources.information.technologies.java.lang.ooMappings.ooMappings"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>A brief survey of programming paradigms</title>

    <para>
        The large number of programming languages available today can broadly be classified as subscribing to
        certain paradigms. We can pick any of these languages, and build almost any piece of
        <emphasis>infrastructure</emphasis> (frameworks, applications server, operating system),
        or business process (component deployed into one of these infrastructures).
    </para>
    <para>
        The programming language that we use does not inherently limit the type of architecture or
        process patterns or design that we can implement. For example
        <itemizedlist>
            <listitem>
                <para>Building a stateless, services-oriented system (<acronym>SOA</acronym>) with
                a stateful, object-oriented language (e.g. <productname>Java</productname>).</para>
            </listitem>
            <listitem>
                <para>Building a runtime / interpreter for <productname>Lua</productname> (a stateful, semi-object-oriented
                langauge) in <productname>Haskell</productname> (a state-less, declarative, functional language).</para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        In practice there is rarely a distinction between a <emphasis>language</emphasis> and the accompanying
        <emphasis>platform</emphasis> such as the runtime, and available standard and third-party libraries. The platform,
        thus, often dictates the language choice to a greater extent than the core paradigm. Take, as an example,
        <productname>R</productname> - a multi-paradigm, semi-object-oriented, semi-functional language of little distinction
        and a very weak type system.
    </para>
    <para>
        Because of the existence of a <emphasis>vast library</emphasis> of statistical computing functions, it has become
        the go-to language for complex data analytics. Certain platforms are thus more suited to certain computing tasks
        becuase of the way that the language and the support technologies have evolved together.
    </para>


    <para>
        Peter van Roy's 2008 classification of paradigms provide a convenient overview of the core programming
        paradigms, and how they relate to one another in terms of features:
    </para>
    <figure>
        <title>Peter van Roy's 2008 classification of programming languages</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../programmingParadigms.png"/>
            </imageobject>
        </mediaobject>
    </figure>

    <xi:include href="../declarativeness/declarativeness.docbook"/>

</chapter>