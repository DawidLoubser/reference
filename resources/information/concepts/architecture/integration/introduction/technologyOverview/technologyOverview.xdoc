<?xml version="1.0" encoding="UTF-8"?>

<section
  id="resources.information.concepts.architecture.introduction.technologyOverview.technologyOverview"
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Overview of technologies relevant for integration</title>
  <para>
  </para>
  
  <section>
    <title>Data exchange protocols</title>
    <para>
      The most commonly used protocol for data exchange within an integration solution is XML. XML
      provides 
      <itemizedlist>
        <listitem><para>
          a public standard for a <emphasis>component based object oriented data exchange protocol</emphasis> with support for
        </para></listitem>
        <listitem><para>
          data structure specification and validation (XML schema), 
        </para></listitem>
        <listitem><para>
          relationship specification between internal components and with external resources (keys,
          references, XLink, RDF),
        </para></listitem>
        <listitem><para>
          data querying (XQuery and XPath),
        </para></listitem>
        <listitem><para>
          data structure transformation (XSLT), and
        </para></listitem>
        <listitem><para>
          visual formatting (XSL-FO, CSS).
        </para></listitem>
      </itemizedlist>
    </para>
    <para>
      Furthermore, there are a range of standards for areas like
      <itemizedlist>
        <listitem><para>
          remote service requests (SOAP),
        </para></listitem>
        <listitem><para>
          service provider interface specification (WSDL)
        </para></listitem>
      </itemizedlist>
      as well as a range of domain and industry standards.
    </para>
  </section>
  
  <section>
    <title>Integration channels</title>
    
    <section>
      <title>Asynchronous message channels</title>
      <para>
        These provide 
        <itemizedlist>
          <listitem><para>
            very loose client/service provider decoupling,
          </para></listitem>
          <listitem><para>
            fail over safety, and
          </para></listitem>
          <listitem><para>
            a natural framework for load valancing.
          </para></listitem>
        </itemizedlist>
      </para>
      <para>
        The most widely used asynchronous integration channels are
        <itemizedlist>
          <listitem><para>
            message queues,
          </para></listitem>
          <listitem><para>
            email, and
          </para></listitem>
          <listitem><para>
            data based integration like dropping files in a file system or adding data to a database
            table.
          </para></listitem>
        </itemizedlist>
        
      </para>
    </section>
    
    <section>
      <title>Connection based integration channels</title>
      <para>
        Connection based integration requires that the client makes a direct connection to the
        service provider. Usually this is in the form of communicating via some standard or
        proprietary protocol over network sockets.      
      </para>
      
      <section>
        <title>The Java Connector Architecture (JCA)</title>
        <para>
          The Java Connector architecture provides a standard API for managing connections within
          a Java EE environment (one of the most common enterprise infrastructure environments).
          It supports connection pooling, transaction propagation and security.
        </para>
        <para>
          The protocol is not directly addressed within the JCA framework, but JCA adaptors can be
          written in such a way that the protocol is pluggable.
        </para>
      </section>
      
    </section>
    
  </section>
  
  
  <section>
    <title>Object oriented integration technologies</title>
    <para>
      The only public standard for a complete object oriented integration framework is CORBA.
      CORBA enables one to integrate clients and service providers in an object oriented way
      irrespective of whether either of the two is implemented in an object oriented technology.
    </para>
    <para>
      CORBA provides 
      <itemizedlist>
        <listitem><para>
          object request brokers,
        </para></listitem>
        <listitem><para>
          a standard communication protocol,
        </para></listitem>
        <listitem><para>
          standard components for publishing service providers and interfaces 
        </para></listitem>
        <listitem><para>
          security services
        </para></listitem>
        <listitem><para>
          event event services, 
        </para></listitem>
      </itemizedlist>
      and many more generic and domain specific standards.  
    </para>
  </section>
  
  <section>
    <title>Services oriented integration technologies</title>
    <para>
      Service oriented technologies, publish service providers and their interaces. They provide a
      framework for exchanging service request messages and responses.
    </para>
  </section>
  
  <section>
    <title>Integration architectures</title>
    <para>
      Integration architecture provide a framework for defining and executing business or system
      processes across a range of heterogeneous systems.
    </para>
    <section>
      <title>Services oriented architectures</title>
      <para>
        Services oriented architectures provide an integration architecture which enables
        organisations to integrate their heterogeneous systems around an enterprise services bus. They
        enable
        <itemizedlist>
          <listitem><para>
            assembling business processes across services,
          </para></listitem>
          <listitem><para>
            assembling higher level services from finer grained services, and
          </para></listitem>
          <listitem><para>
            executing business processes specified in a business process specification language
            (typically BPEL),
          </para></listitem>
        </itemizedlist>
        A services oriented architecture still has to support qualities like reliability,
        scaleability, performance, auditability, security, ....
      </para>
    </section>
    
    <section>
      <title>Business process specification</title>
      <para>
        An integration architecture typically provides a framework for executing business processes
        defined across the various systems used within an organisation. To this end business
        processes need to be specified.      
      </para>
      
      <section>
        <title>UML</title>
        <para>
          The most widely used language for specifying business processes in a technology neutral
          way is UML.
        </para>
      </section>
      
      <section>
        <title>BPMN</title>
        <para>
          The <emphasis>Business Process Modeling Notation</emphasis> provides a diagrammatic alternative to UML
          which provides
          <itemizedlist>
            <listitem><para>
              a notation for business process specification which aims to be more intuitive
              for business analysts and managers,
            </para></listitem>
            <listitem><para>
              a mapping to BPEL.
            </para></listitem>
          </itemizedlist>
        </para>
      </section>
      
      <section>
        <title>BPEL</title>
        <para>
          The Business Process Execution Language is a formal XML-based language for business
          process specification. It is used as a standard business process execution language within
          Service-oriented architecture (SOA) and  Enterprise Service Bus (ESB) systems.
        </para>
      </section>
    </section>
  </section>
  
  
</section>
    
