<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.architecture.mda.baseTechnologies.mof.howIsMofRepresented"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>How is MOF represented?</title> 
  <para>
    MOF provides a consistent way to define language constructs. For example, for 
    <emphasis>work flow modeling</emphasis> one needs the concepts of
    <itemizedlist>
      <listitem><para>activity,</para></listitem>
      <listitem><para>worker,</para></listitem>
      <listitem><para>transition,</para></listitem>
      <listitem><para>split,</para></listitem>
      <listitem><para>join, and so on.</para></listitem>
    </itemizedlist>
  </para>
  <para>
    On the other hand, for <emphasis>relational database modeling</emphasis>
    we need the concepts of 
    <itemizedlist>
      <listitem><para>table,</para></listitem>
      <listitem><para>row,</para></listitem>
      <listitem><para>key,</para></listitem>
      <listitem><para>column,</para></listitem>
      <listitem><para>link, and so on.</para></listitem>
    </itemizedlist>
  </para>
  <para>
    MOF is itself based on the fundamental premise of object-oriented modeling
    has the ability to specify a new domain by
    <itemizedlist>
      <listitem><para>introducing new concepts (classes),</para></listitem>
      <listitem><para>assign attributes and operations to these concepts,</para></listitem>
      <listitem><para>
        and building up relationships like
        <itemizedlist>
          <listitem><para>containment,</para></listitem>
          <listitem><para>specialization and abstraction,</para></listitem>
          <listitem><para>association/uses</para></listitem>
        </itemizedlist>
        between the concepts</para></listitem>
    </itemizedlist>
  </para>
  
  <para>
    As such Mof also uses the concepts of classes, attributes, associations and so on.
    UML 2.0 and MOF 2.0 now share a common kernel and as such MOF diagrams look very
    similar to UML diagrams and can be generated by a UML tool. Furthermore, like UML,
    MOF also supports the <emphasis>Object Constraint Language</emphasis>, OCL.
    The <emphasis>unified modeling language</emphasis>, UML, is itself specified via MOF. 
    For example, in
    <xref linkend="resources.information.concepts.architecture.mda.baseTechnologies.mof.mofUmlClassDiagram_fig"/>
    we show a fragment of the UML's metamodel for class diagrams.
  </para>
  
  <figure id="resources.information.concepts.architecture.mda.baseTechnologies.mof.mofUmlClassDiagram_fig">
    <title>MOF used to specify a fragment of the metamodel for UML class diagrams</title>
    <graphic fileref="mofUmlClassDiagram.jpg"/>
  </figure>
  
  <para>
    This object-oriented conceptualization is equally applicable for domains which are not
    perceived to be object-oriented. For example, relational database structures and even
    the syntax of object-oriented and non-object-oriented programming languages can be
    specified in MOF. MOF itself is then also used to specify the <emphasis>Common
    Warehouse Metamodel</emphasis> (CWM) and the <emphasis>XML Metadata
    Interchange</emphasis> (XMI) modeling languages.
    <note><para>
      Sun's Java Community Process (JCP) has developed a MOF-Java mapping, the
      <emphasis>Java Metadata Interface</emphasis>.
    </para></note>
  </para>
  <para>
    As another example of MOF, look at the fragment of the metamodel for UML use case diagrams
    shown in <xref linkend="resources.information.concepts.architecture.mda.baseTechnologies.mof.mofUmlUseCaseDiagram_fig"/>.
  </para>
  
  <figure id="resources.information.concepts.architecture.mda.baseTechnologies.mof.mofUmlUseCaseDiagram_fig">
    <title>MOF used to specify a fragment of the metamodel for UML use case diagrams</title>
    <graphic fileref="mofUmlUseCaseDiagram.jpg"/>
  </figure>
</section>
