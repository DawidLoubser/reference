<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:id="resources.information.concepts.architecture.qualityAttributes.modifiability.extensibility" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

  <title>Extensibility</title>
  <para>
    Extensibility focuses on being able to extend existing functionality without changing the core
    functionality offered.
  </para>
 
  <section>
    <title>Tactics used to realize extensibility</title>
    <para>
       
    </para>
    
    <section>
      <title>Interception points/layers</title>
      <para>
         Interception points and interception layers provide a powerful tactic to facilitate
         extensibility. This tactic is, for example, used by application servers to
         add networking as well as 
         transactional, security or persistence logic to business logic provided by the
         business logic components whose service requests are intercepted.
      </para>
      <para>
        Similarly interception points in servlet frameworks enables one to extend the core
        functionality by inserting processing filters into the incoming or outgoing channels.
      </para>
      <para>
        Another example is that of <emphasis>web services frameworks</emphasis> where 
        interception layers enables one to extend the standard functionality with, for example,
        <itemizedlist>
          <listitem><para>compression,</para></listitem>
          <listitem><para>encryption,</para></listitem>
          <listitem><para>validation,</para></listitem>
          <listitem><para>logging,</para></listitem>
        </itemizedlist>
        and so forth.         
      </para>
    </section>
    
    <section>
      <title>Specialization</title>
      <para>
         Specialization facilitates the pluggability of service providers which may extend the
         original service providers in the sense that
         <itemizedlist>
           <listitem><para>
             the specialized service providers may extend services by overriding services in order 
             to add deliverables, and 
             <note><para>
               Pre-conditions may never be increased and post-condtions
               (deliverables) may never be reduced when overriding a service.
             </para></note>
           </para></listitem>
           <listitem><para>
             specialized service provider may extend the service offering by providing additional
             services.
           </para></listitem>
         </itemizedlist>
      </para>
    </section>
    
    <section>
      <title>Design patterns facilitating extensibility</title>
      <para>
        A number of classical design patterns provide proven tactics to realize extensibility.      
      </para>
      <section>
        <title>Decorator</title>
        <para>
           If the decorator pattern is supported, the services offered by service providers may
           be extended (decorated) in order to add additional responsibilities/deliverables
           to the services.
        </para>
      </section>
      
      <section>
        <title>Visitor</title>
        <para>
          The visitor pattern is a tactic used to enable external extensibility of frameworks.
          Supporting the visitor pattern facilitates the addition of polymorphic services to frameworks 
          without requiring any modifications to the framework itself.
        </para>
      </section>
      
      <section>
        <title>Exposed State</title>
        <para>
          The exposed state pattern enables one to extend a context with additional states which may
          potentially extend the service offering of the context itself.
        </para>
      </section>
    </section>
    
    <section>
      <title>Prototype</title>
      <para>
        The prototype pattern facilitates the extensibility of template collections, enabling one to dynamically
        add components to a template collection. These components can be used in the construction of
        domain objects.
      </para>
      <para>
        For example, new graphics objects may be plugged into a drawing application via the prototype 
        pattern. To create instances of the new type of graphics object, the template object 
        (<abbrev>i.e.</abbrev> the prototype) is cloned.
      </para>
    </section>
    
    <section>
      <title>Builder</title>
      <para>
        The builder pattern enables one to extend the product line which a system can construct
        by plugging in different builders.
      </para>
    </section>
    
  </section>
</section>