<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:id="resources.information.concepts.architecture.qualityAttributes.modifiability.complexityReduction" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

  <title>Complexity reduction</title>
  <para>
    Complexity is one of the biggest contributors to the cost of change. Simpler systems
    usually absorb changes to the requirements more readily than complex systems.
  </para>
  
  <section>
    <title>Minimize component complexity</title>
    <para>
      This includes implementation complexities like
      <itemizedlist>
        <listitem><para>
          the complexity of the algorithms realizing the work flows,
        </para></listitem>
        <listitem><para>
          and structural complexity like the complexity of the data structures used.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section>
    <title>Minimize dependency between classes</title>
    <para>
      If there is a strong dependency between classes, it is difficult to modify any of these
      without at least checking all the others. In general modifiability is improved by
      ensuring that one only adds those dependencies and associations which are
      essential for realizing the system use cases.
    </para>
    <section>
      <title>Reducing dependencies via the mediator pattern</title>
      <para>
        At times one requires navigability between a group of components which are otherwise
        unrelated. In such cases it is often a good idea to not introduce direct dependencies
        between these components but to facilitate navigation via a mediator.
      </para>
    </section>
    
  </section>
  
</section>