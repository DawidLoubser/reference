<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:id="resources.information.concepts.architecture.qualityAttributes.modifiability.localizedMaintenance" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

  <title>Tactics employed to localize changes</title>
  <para>
    Localizing the area where changes need to be applied to is an effective way
    of reducing the cost of these changes and hence of increasing the
    modifiability attribute of an architecture.
  </para>    
  <para>
    Some tactics which can be deployed to localize changes include 
    <emphasis>encapsulation</emphasis>, <emphasis>responsibility localization</emphasis>,
    <emphasis>decoupling</emphasis>, <emphasis>semantic coherence</emphasis>
    and <emphasis>abstraction</emphasis>.
  </para>
  
  <section>
    <title>Encapsulation</title>
    <para>
      A general approach used to assist in localizing changes is that of encapsulating
      all implementation details and exposing only those aspects of a component which
      are required by the users of the component.
    </para>
  </section>
  
  <section>
    <title>Semantic coherence</title>
    <para>
      Semantic coherence refers to conceptual coherence. It is largely achieved through
      localization of responsibilities, <abbrev>i.e.</abbrev> that only a single core
      responsibility is assigned to each component and that components only offer
      services which are narrowly aligned with that core responsibility.
    </para>
    
    <section>
      <title>Modifiability through re-use</title>
      <para>
        Semantic coherence usually results in increased re-use since components which
        are semantically clean can be reused more readily. Re-use opportunities may reduce 
        the cost of change and hence increase modifiability.
      </para>
    </section>
    
    <section>
      <title>Refactoring</title>
      <para>
        Refactoring is an approach which explicitly extracts responsibilities which
        are either unrelated or only remotely related to the core responsibility of 
        a component and delegates them to other, usually finer grained, components.
      </para>
      <para>
        Refactoring thus increases the semantic coherence and thus makes systems 
        more flexible and open to change. Furthermore, refactoring decreases complexity
        and increases the re-use opportunities. This may ultimately result in significantly 
        less code which needs to be maintained.
      </para>  
    </section>
    
    <section>
      <title>Some applicable design patterns</title>
      <para>
        There are a number of design patterns which directly assist in increasing the 
        semantic coherence. Some of these are
        <itemizedlist>
          <listitem><formalpara>
            <title>The state pattern</title>
            <para>
              The state pattern encapsulates all state-specific features into a separate
              state object. This includes
              <itemizedlist>
                <listitem><para>
                  state-specific realization of services, as well as  
                </para></listitem>
                <listitem><para>
                  state-specific attributes.
                </para></listitem>
              </itemizedlist>
            </para>
          </formalpara></listitem>
          <listitem><formalpara>
            <title>The decorator pattern</title>
            <para>
               Architectures which make use of the decorator pattern directly increase
               semantic cohesion by localizing responsibilities in decorators. The resultant
               system is typically more flexible where services offered by system 
               components can be dynamically decorated with additional responsibilities.
            </para>
          </formalpara></listitem>
          <listitem><formalpara>
            <title>The visitor pattern</title>
            <para>
              The visitor pattern enables one to localize services which are realized
              polymorphically across a specialization hierarchy in separate components.
              As such the visitor pattern may directly increase the semantic cohesion
              of a solution and hence the modifiability of a system.
            </para>
          </formalpara></listitem>
          <listitem><formalpara>
            <title>The builder pattern</title>
            <para>
              A builder pattern is used to construct complex objects from complex source
              information. It separates 
              <itemizedlist>
                <listitem><para>
                   the responsibilities of understanding the source and destination domains                
                </para></listitem>
                <listitem><para>
                  the high-level construction logic from the detailed construction algorithms,
                </para></listitem>
              </itemizedlist>
              and simplifies the construction of different types of object from a common 
              source domain.
            </para>
          </formalpara>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
   
</section>