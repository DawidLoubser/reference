<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.architecture.qualityAttributes.introduction.functionalityVersusQualityAttribute"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Functionality versus quality attributes</title>
  <para>
    Functionality and quality attributes are seen as orthogonal.
  </para>
  
  <section>
    <title>What is functionality?</title>
    <para>
      We define functionality as follows:
      <blockquote><para><emphasis>
         Functionality is the ability of the system to realize the system use cases.
      </emphasis></para></blockquote>
    </para>
    <para>
      Hence, the functional requirements are documented as use cases in a requirements
      specification. They are typically realized through <emphasis>algorithms</emphasis>
      which are supported by <emphasis>data structures</emphasis>.
      Errors in either of these result in system errors.      
    </para>
    <para>
      Functionality may be realized via a very wide range of architectural solutions. Generally,
      the <emphasis>functional requirements have very little direct impact on the architecture 
      of a system.</emphasis>
    </para>
  </section>
  
  <section>
    <title>What is a quality attribute?</title>
    <para>
      We define a quality attribute as follows:
      <blockquote><para><emphasis>
        A quality attribute is an attribute of the architectural solution which addresses non-functional
        requirements.
      </emphasis></para></blockquote>
      Examples of non-functional requirements include
      <itemizedlist>
        <listitem><para>scalability,</para></listitem>
        <listitem><para>performance,</para></listitem>
        <listitem><para>time-to-market,</para></listitem>
        <listitem><para>domain decoupling (<abbrev>e.g.</abbrev> platform independence),</para></listitem>
        <listitem><para>maintainability and</para></listitem>
        <listitem><para>reliability or availability.</para></listitem>
      </itemizedlist>
    </para>
    <para>
      Like use cases, quality attribute have direct, measurable value for the client. However, use cases resemble a 
      functional requirement, while quality attributes address non-functional requirements.
    </para>
    <para>
      Quality attributes often affect the architecture directly and one may take the view that
      quality attributes drive the architecture.
    </para>
  </section>
  
  <section>
    <title>Functionality and quality attributes are orthogonal</title>
    <para>
      Functionality is orthogonal to quality attributes in the sense that we <emphasis>can vary 
      the functionality of a system and its quality attributes independently</emphasis>.
    </para>
    <para>
      For example, changing the architecture such that the system is more reliable does
      not change the system functionality and similarly, a change in the system functionality does
      not usually affect the reliability of the system.
    </para>
  </section>
  
</section>
