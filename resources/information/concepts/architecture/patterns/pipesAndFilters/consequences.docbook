<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:id="resources.information.concepts.architecture.patterns.pipesAndFilters.consequences" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

  <title>Consequences</title>
  <para>
     A pipes and filters based architecture allows for dynamic work flow construction and
     modification. It is conceptually simple and facilitates rapid introduction of new
     work flows. It may
  </para>
  
  <section>
    <title>Benefits of pipes and filters based architectures</title>
    <para>
      The main benefits of pipes and filters based architectures comes from the
      fact that filters are decoupled.
    </para>
    
    <section>
      <title>Re-use</title>
      <para>
        Filters can often be easily re-used in the context of different work flows
        which may parts of different deployed applications.
      </para>
    </section>
    
    <section>
      <title>Concurrency</title>
      <para>
        A pipes and filters implementation lends itself naturally to implementing
        concurrencies where individual filters may be different processing threads
        which may reside on different machines. 
      </para>
      <para>
        Hence concurrencies identified in a business process (typically documented as
        concurrent activities in an activity diagrams spawned from forks) may be 
        mapped directly onto concurrent filters.
      </para>
    </section>
    
    <section>
      <title>Maintainability</title>
      <para>
         Individual process steps (filters) can be largely maintained independently. Furthermore,
         work flows can be easily modified by adding, removing or modifying work flow
         steps.
      </para>
    </section>
    
    <section>
      <title>Simplified performance analysis</title>
      <para>
        It is usually straight forward to analyze performance measures like throughput,
        response times and so forth.
      </para>
    </section>
  </section>
  
  <section>
    <title>Problems which may be experienced by using a pipes and filters based solution</title>
    <para>
      However, pipes and filters based architectures are not well suited for al types of
      problems. Below we raise a few concerns which may be raised when considering
      a pipes and filters based architecture.
    </para>
    
    <section>
      <title>Not well suited for interactive systems</title>
      <para>
        Pipes and filters are not well suited for interactive systems -- they are more suited
        to stream-based processing tasks.
      </para>
    </section>
    
    <section>
      <title>Performance</title>
      <para>
        often pipes and filters architectures require repetitive marshaling and
        de-marshalling of messages. This may introduce performance issues.
      </para>
    </section>
    
    <section>
      <title>High-level work flow parameters</title>
      <para>
        It may prove difficult to manage some high-level service parameters like security,
        transactions and so forth
      </para>
    </section>
  </section>
  
  
  <section>
    <title>Interface specification for filters</title>
    <para>
      The interface specification for filters in a pipes and filters based architecture is
      in the form of input and output message formats and not in the form of a
      traditional interface. In other words, one needs to map supported services onto
      messages the filter is able to process.
    </para>
  </section>
  
  
  
</section>