<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:id="resources.information.concepts.architecture.patterns.broker.consequences" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

  <title>Consequences</title>
  <para>
    The broker pattern has immense benefits for distributed systems and is used
    virtually throughout modern distributed systems supporting synchronous
    service requests.
  </para>
  
  <section>
    <title>No dependencies between client and server implementations</title>
    <para>
      The client need not be aware of any implementation details of the service
      provider including
      <itemizedlist>
        <listitem><para>implementation language used,</para></listitem>
        <listitem><para>the platform on which the server is hosted,</para></listitem>
        <listitem><para>the network protocols used to connect to the server,</para></listitem>
        <listitem><para>or even the location of the server.</para></listitem>
      </itemizedlist>
    </para>
    
    <section>
      <title>Location transparency</title>
      <para>
         The client need not be aware of where the server is hosted, nor does the server need to
         know where the client is. The server could even be on the same machine.
         The reference obtained from a naming and directory service
         contains the location of the server in a form understandable to the broker.
         <note><para>
           CORBA even enables clients to continue using a reference after a server location has been
           changed by supporting <literal>LOCATION_FORWARD</literal> as part of the CORBA
           protocol (GIOP, Generalized Inter-ORB Protocol).
         </para></note>
      </para>
    </section>
  </section>
  
  <section>
    <title>Re-usability</title>
    <para>
      The broker architecture facilitates a <emphasis>distributed component framework</emphasis>
      with business logic components potentially re-usable across the network.
    </para>
  </section>
  
  <section>
    <title>Interception layer for enterprise services</title>
    <para>
      The client and server proxys define a natural interception layer which can be used to enhance
      services provided by service providers with security, load-balancing, transactions, logging
      and many other services. The service providers remain focused on the core services they
      provide.
    </para>
  </section>
  
  <section>
    <title>Reliability</title>
    <para>
      Load balancing can be easily implemented to provide a degree of fail-over safety.
    </para>
  </section>
  
  <section>
    <title>Scaleability</title>
    <para>
      Scaleability can be achieved through clustering and load balancing.
    </para>
  </section>
  
  
</section>