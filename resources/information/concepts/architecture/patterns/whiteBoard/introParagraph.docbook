<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<para xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    In terms of publishing and reacting to events, most architectures usually subscribe to one of two extremes:
    <itemizedlist>
        <listitem>
            <formalpara>
                <title>Excessively strong coupling</title>
                <para>
                    Traditional event source / event listener systems require the event listener to find and register with
                    the specific event source objects, taking into account the dynamics of an event source that may appear and disappear
                    over the lifetime of the application.
                </para>
            </formalpara>
            <formalpara>
                <title>Excessively weak coupling</title>
                <para>
                    When using a pure events framework, such as an event bus or a blackboard system, the event source has no idea
                    how many (if any) event listeners are available, and if they have successfully processed the events or not.
                </para>
            </formalpara>
        </listitem>
    </itemizedlist>

    Many environments allow one to decorate (add functionality), adapt, or provide an alternative
    protocol binding to pure services. In most of these environments, the lifecycle of the service
    itself is embedded within the lifecycle of these infrastructure services, i.e. one cannot independently
    add, update, or remove additional protocol bindings, adaptors, or decorators to services without
    the services themselves needing to be reconfigured or restarted.
</para>