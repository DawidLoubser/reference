<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.architecture.patterns.modelViewController.consequences"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Consequences</title>
  
  <section>
    <title>Benefits</title>
    <para>
      <itemizedlist>
        <listitem><para>
           Simpler maintenance.
        </para></listitem>
        <listitem><para>
          Supports concurrent modular development with clearly defined developer roles
          (view designers, front-end developer, back-end developer, ...).
        </para></listitem>
        <listitem><para>
          Simpler testing.
        </para></listitem>
        <listitem><para>
          Reusable business logic and presentation layer components.
        </para></listitem>
        <listitem><para>
          Supports multiple synchronized views on same data.
        </para></listitem>
        <listitem><para>
          Business logic and presentation/controller may be hosted on different nodes (machines).  
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section>
    <title>Potential problems</title>
    <para>
      <itemizedlist>
        <listitem><para>
          In distributed implementations the communication overheads may lead to
          performance problems.
        </para></listitem>
        <listitem><para>
          Both, the controller and the view are dependent on the model API which may
          reduce re-usability of view and controller elements.
          <note><para>
             This can be addressed by abstracting the view and controller from the model
             API and introducing an <emphasis>adaptor</emphasis> for the linkage.
          </para></note>
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
</section>
