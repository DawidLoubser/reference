<?xml version="1.0" encoding="UTF-8"?>

  
<section id="resources.information.concepts.architecture.patterns.layering.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Examples</title>
  <para>
    Most architectural solutions use these days some or other form of layering. 
    Layering is particularly useful for simplifying the architecture of large 
    systems. Below we list
    a few of these examples.
  </para>

  <section>
    <title>Two-tier architecture</title>
    <para>
      This is typically in the form of a client-server architecture where the client and
      the server side may wary to some extend independently.
    </para>
    <figure id="resources.information.concepts.architecture.patterns.layering.twoTier_fig">
      <title>An example of a typical two-tier architecture</title>
      <graphic fileref="twoTier.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>Three-tier architectures</title>
    <para>
      in the classical 3-tier architecture one has
      <orderedlist>
        <listitem><formalpara>
          <title>Front-end clients</title>
          <para>
            The client layer contains user-role specific application logic. This layer may be
            realized through an application based client like a Java Swing client or a C++
            client typically using some graphical user-interface library.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Domain or application server layer</title>
          <para>
            This layer contains the business logic. Often it is realized via a business logic
            component container like an EJB container hosted on an EJB application server.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Persistence layer</title>
          <para>
            This layer typically contains the databases (<abbrev>e.g.</abbrev> relational
            or object database).
          </para>
        </formalpara></listitem>
      </orderedlist>
    </para>
    <figure id="resources.information.concepts.architecture.patterns.layering.threeTier_fig">
      <title>An example of a typical three-tier architecture</title>
      <graphic fileref="threeTier.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>4-tier Architectures</title>
    <para>
      There can be a number of realizations of a 4-tier architecture.  A conceptual layering
      often used includes the following high-level layers:
      <orderedlist>
        <listitem><formalpara>
          <title>The presentation layer</title>
          <para>
            This layer contains the view of the model-view controller architecture.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>The application model layer</title>
          <para>
            This layer contains the model of the model-view-controller, hosting the core
            business work flows and services.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
           <title>The domain model layer</title> 
           <para>
            This layer representing a resource of re-usable
             application non-specific domain objects.
           </para>
        </formalpara></listitem>   
        <listitem><formalpara>
          <title>The infrastructure layer</title>
          <para>
            This layer contains the core infrastructure components including
            <itemizedlist>
              <listitem><para>databases,</para></listitem>
              <listitem><para>object-relational mappers,</para></listitem>
              <listitem><para>application servers,</para></listitem>
              <listitem><para>
                presentation layer logic infrastructure (<abbrev>e.g.</abbrev> web server
                and servlet and JSP containers),
              </para></listitem>
              <listitem><para>legacy systems,</para></listitem>
              <listitem><para>
                infrastructure components for system integration including
                <itemizedlist>
                  <listitem><para>CORBA servers,</para></listitem>
                  <listitem><para>Web-services portals, ...</para></listitem>
                </itemizedlist>
              </para></listitem>
            </itemizedlist>
          </para>
        </formalpara></listitem>
      </orderedlist>
    </para>
    <figure id="resources.information.concepts.architecture.patterns.layering.fourTier_fig">
      <title>An example of a typical four-tier architecture</title>
      <graphic fileref="fourTier.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>Further layers</title>
    <para>
      One can introduce further layers and/or different layers to achieve cleaner and simpler
      architecture for particular domains. Even lower level systems often use a layered
      architecture. If we look at a web-services protocol stack then we may identify the
      following high-level layers:
      <orderedlist>
        <listitem><para>
          The SOAP layer containing the RPC protocol elements.  
        </para></listitem>
        <listitem><para>
          The XML layer specifying a tagged syntax on which SOAP is built.  
        </para></listitem>
        <listitem><para>
          The XML layer is hosted by a transport layer which may be HTTP or SMTP.  
        </para></listitem>
        <listitem><para>
          The HTTP layer itself is on top of a COMMS layer like TCP/IP.
        </para></listitem>
      </orderedlist>
      The latter is itself a layered protocol.
    </para>
  </section>
</section>
