<?xml version="1.0" encoding="UTF-8"?>

<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0b5/rng/docbookxi.rng" type="xml"?>
<section
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Java EE as a MVC architecture for internet deployment</title>
  <para>
    The Java Enterprise Edition architecture defines a Model-View-Controller
    architecture for enterprise systems with 
    <itemizedlist>
      <listitem><para>
        the <emphasis>view</emphasis> being hosted in a <emphasis>web container</emphasis> (or client
        application container) with a rich web-based presentation layer infrastructure
        (Servlets, Java Server Pages and Java Server Faces for web based presentation layers 
        and Swing, AWT and MIDP for application-based presentation layers),
      </para></listitem>
      <listitem><para>
        the business logic <emphasis>controller</emphasis> being the session- and 
        message-driven beans, and the presentation layer controllers being the servlets for web based
        presentation layers and the event listeners for application based clients
      </para></listitem>
      <listitem><para>
        the <emphasis>model</emphasis> which contains the business logic and data being hosted
        in standard Java classes with support for persistence via object-relational mappers through
        the Java Persistence API (JPA) and general persistence support via Java Data Objects (JDO).
        The application server still supports object pooling for entities (entity beans).
      </para></listitem>
    </itemizedlist>
  </para>
  <section>
    <title>Java Server Faces as view layer</title>
    <para>
      Though not a true <quote>view</quote> component that can be called
      at will from within the controller layer (because of the unidirectional
      nature of web-based interaction) the JSF framework provides a clean
      implementation of the <emphasis>Command</emphasis> design pattern,
      which, coupled with features such as dependency injection, allows
      for loose coupling together with rich interaction.
    </para>
  </section>
</section>
