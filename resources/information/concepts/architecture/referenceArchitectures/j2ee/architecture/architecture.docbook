<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Java EE architecture</title>
  <para>
    On the surface the Java EE architecture can be seen as a <emphasis>5-layered architecture</emphasis>
    with the layers being 
    <itemizedlist>
      <listitem><para>the presentation layer,</para></listitem>
      <listitem><para>a services layer,</para></listitem>
      <listitem><para>a domain objects layer, </para></listitem>
      <listitem><para>the infrastructure or middleware layer, and</para></listitem>
      <listitem><para>the back-end layer.</para></listitem>
    </itemizedlist>
  </para>  
   
  <figure>
    <title>The Java EE architecture</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="j2eeArchitecture.jpg"/>
      </imageobject>
    </mediaobject>
  </figure>
  
  
  <section>
    <title>Application-server generated layers</title>
    <para>
      In addition to the five layers used by client applications, the application server generates 
      some internal layers which host certain responsibilities.
    </para>
    
    <section>
      <title>The enterprise services layer</title>
      <para>
        The application server generates an <literal>EJBObject</literal> for
        every enterprise bean,
        which acts as an interception layer at which the following enterprise services are
        applied:
        <itemizedlist>
          <listitem><para>network enabling,</para></listitem>
          <listitem><para>mapping physical objects to virtual objects in order to support massive scalability,</para></listitem>
          <listitem><para>activation/deactivation of components at appropriate times,</para></listitem>
          <listitem><para>transaction- ,</para></listitem>
          <listitem><para>security- , and</para></listitem>
          <listitem><para>persistence support.</para></listitem>
        </itemizedlist>
      </para>
    </section>

    <section>
      <title>Database mapping layer</title>
      <para>
        The Java EE specification provides two standard APIs for database mapping layers, 
        <emphasis>Java data objects</emphasis> (JDO) and the <emphasis>Java Persistence
          API</emphasis> (JPA). Both are extremely easy to use and are structurally very similar. 
        JPA has been designed specifically with relational databases in mind while JDO is more
        general supporting also other persistence technologies like object databases.
      </para>
      <para>
        In addition Java EE provides a technology neutral, object oriented query language, EJB-QL
        (The EJB Query Language) which is mapped ultimately on queries in the chosen persistence
        technology (<abbrev>e.g.</abbrev> appropriate SQL queries for your choice of relational
        database).
      </para>
    </section>
  </section>
  
</section>