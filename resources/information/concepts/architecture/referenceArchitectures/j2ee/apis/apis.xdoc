<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.architecture.referenceArchitectures.j2ee.apis.apis"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>The Java EE APIs</title>
  <para>
    Java EE defines a range of standard APIs which aim to
    <itemizedlist>
      <listitem><para>
        simplify the development of distributed enterprise applications, and
      </para></listitem>
      <listitem><para>
         introduce standards which enable architects and developers to
         avoid vendor locking in the architecture, design and development of
         the system -- components which implement the standard APIs can be
         exchanged.
      </para></listitem>
    </itemizedlist>
    The standard JEE APIs are:
    <itemizedlist>
      <listitem><formalpara>
        <title>EJB</title>
        <para>
          Enterprise JavaBeans is the core Java EE specification for the business 
          logic layer. It supports component-based business objects which are managed
          by the EJB container.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>CORBA</title>
        <para>
          The non-proprietary CORBA API has been absorbed within the Java EE
          standard APIs. It provides the integration/middleware support
          basis for EJBs, enabling object-oriented messaging with other 
          (including non-Java) environments.
        </para>
      </formalpara></listitem>
      <listitem>
        <formalpara>
          <title>Java Persistence API</title>
          <para>
            The Java Persistence API is a general-purpose framework to persist the state
            of objects to an underlying (typically relational) data store. It draws on the
            experience gained from frameworks such as <emphasis>Hibernate</emphasis> to
            bridge the gap between object-oriented design, and relational storage. Typically used to
            completely abstract the developer from SQL-based storage for business domain objects, it
            consists of:
            <itemizedlist>
              <listitem>
                <para>The Java Persistence API</para>
              </listitem>
              <listitem>
                <para>The query language</para>
              </listitem>
              <listitem>
                <para>Object/relational mapping metadata</para>
              </listitem>
            </itemizedlist>
          </para>
        </formalpara>
      </listitem>
      <listitem><formalpara>
        <title>JDBC</title>
        <para>
          The <emphasis>Java Database Connectivity</emphasis> API has been around for much longer
          than the Java EE specification. It provides a standard, low-level API for SQL-based data 
          repository queries and statements. Historically the preferred mechanism for interaction with
          relational databases, the only reason why it should still be used directly (in the face
          of the Java Persistence API) is to cater for unsupported or non-standard operations, or
          as extreme performance tuning.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Web Presentation Layer</title>
        <para>
          The Java EE Presentation Layer consists of the Servlets API (encompassing <emphasis>Servlets</emphasis>, 
          <emphasis>Java Server Pages (JSP)</emphasis>, <emphasis>Filters</emphasis> and <emphasis>Event Listeners</emphasis>)
          and JSF (<emphasis>Java Server Faces</emphasis>), a Model-View-Controller and Data Binding framework. The many
          components of the presentation layer allows for the creation of maintainable
          and standards-compliant web interfaces.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>JNDI</title>
        <para>
          JNDI provides a standard API for name-based querying of object references.
          It provides the mechanism to decouple from specific implementations
          of naming and directory services like COSNaming, the RMI registry
          or LDAP.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>JAAS/JCE</title>
        <para>
          The <emphasis>Java Authentication and Authorization</emphasis> and the
          <emphasis>Java Cryptography Extension</emphasis> API's are standard APIs 
          for security related services supporting the standard security requirements including
          authentication, authorization, confidentiality, data integrity and non-repudiation.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>JTA</title>
        <para>
         Transaction support is central for enterprise systems. The <emphasis>Java Transaction
         API</emphasis> defines a standard API for transaction demarcation and transaction 
         control. It implements the Java mapping of the OMG's <emphasis>Object Transaction 
         Service</emphasis> (OTS). The <emphasis>Java Transaction Service</emphasis> is 
         an implementation of the JTA.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>JMS</title>
        <para>
          The <emphasis>Java Message Service</emphasis> provides a standard API for asynchronous
          messaging which decouples architects and developers from proprietary
          technologies like IBM and Microsoft MQ, Tuxedo and others.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>JCA</title>
        <para>
           The <emphasis>Java EE Connector Architecture</emphasis> specifies how application
           components can access connection-based resources in a standard way, by building adaptors
          that transform these external resources into <emphasis>managed resources</emphasis>.
          Typically used to interact with legacy systems.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>JMX</title>
        <para>
          The <emphasis>Java Management eXtension</emphasis> provides a standard
          API for managing deployed components and services including, starting,
          stopping and querying the status of a service provider.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>XML</title>
        <para>
          Most of the standard Java XML APIs play an important part in some or other
          aspect of the Java EE environment. All the functionality, from simple DOM and
          SAX parsing, to XSLT transformation, XML Schema-based data binding and
          SOAP web services are available throughout the environment. XML is
          viewed as the preferred protocol for exchanging and processing data.
          <itemizedlist>
            <listitem><formalpara>
              <title>JAXP</title>
              <para>
                The Java API for XML Processing provides a standard API for accessing
                parsing, validation and XSLT transformation engines.
              </para>
            </formalpara></listitem>
            <listitem><formalpara>
              <title>JAXB</title>
              <para>
                The <emphasis>Java API for XML Binding</emphasis> which provides a standard
                interface for mapping between Java objects and XML elements. Typically used
                in the context of web services (as a sub-component of <literal>JAX-WS</literal>)
                or stand-alone, to transfer object state to or from XML.
              </para>
            </formalpara></listitem>
            <listitem><formalpara>
              <title>JAX-WS</title>
              <para>
                The <emphasis>Java API for XML Web Services</emphasis> provide an intuitive
                mechanism to expose your services as SOAP web services, with a automatic data-binding,
                as well as WS-I compliance. JAX-WS replaces the previous JAX-RPC standard.
              </para>
            </formalpara></listitem>
            <listitem><formalpara> <!-- TODO: Is this still relevant? -->
              <title>JAXM</title>
              <para>
                The <emphasis>Java API for XML-based Messaging</emphasis> provides a
                standard API for libraries which marshall and demarshall SOAP messages. It
                is usually used in conjunction with JAXB.
              </para>
            </formalpara></listitem>
            <listitem><formalpara>
              <title>JAXR</title>
              <para>
                The <emphasis>Java API for XML Registries</emphasis> which is used to register or 
                discover web-services providers in a web-services registry like UDDI or ebXML.
              </para>
            </formalpara></listitem>
          </itemizedlist>
        </para>
      </formalpara></listitem>
    </itemizedlist>
  </para>
</section>