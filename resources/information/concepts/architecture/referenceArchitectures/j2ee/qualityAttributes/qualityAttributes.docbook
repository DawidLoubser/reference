<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.architecture.referenceArchitectures.j2ee.qualityAttributes.qualityAttributes">

  <title>Java EE and quality attributes</title>
  <para>
    To evaluate the Java EE architecture, we look at the realisation of several quality attributes.
  </para>
  
  <section>
      <title>Modifiability</title>
      <para>
      The clean layer and component-based approach with each component implementing
      an appropriate interface results in 
      <itemizedlist>
            <listitem>
               <para>encapsulation,</para>
            </listitem>
            <listitem>
               <para>decoupling,</para>
            </listitem>
            <listitem>
               <para>responsibility localisation,</para>
            </listitem>
            <listitem>
               <para>run-time deployment and registration, and</para>
            </listitem>
            <listitem>
               <para>the enforced use of a naming service</para>
            </listitem>
         </itemizedlist>
      results typically in a flexible system which can be modified cost-effectively.
    </para>
  </section>
  
  <section>
      <title>Reliability and availability</title>
      <para>
      Using clustering with state replication and the transactional support provides by J2EE
      can result in very reliable system with a high level of availability.
    </para>
  </section>
  
  
  <section>
      <title>Scalability</title>
      <para>
      The
      <itemizedlist>
            <listitem>
               <para>thread-pool based concurrency support,</para>
            </listitem>
            <listitem>
               <para>resource connection pooling, and</para>
            </listitem>
            <listitem>
               <para>clustering</para>
            </listitem>
         </itemizedlist>
      all contribute to make typical Java EE applications highly scalable.
    </para>
  </section>
  
  <section>
      <title>Manageability</title>
      <para>
      This domain is typically tool-vendor dependent. Nevertheless, with some application servers
      it is easy to hot-deploy enterprise beans and to manage performance via bean pool sizes and
      other measures. Application servers typically expose the entire environment via JMX, which allows
      for the usage of standard JMX tools to administer them.
    </para>
  </section>
  
  <section>
      <title>Security</title>
      <para>
      The front-end supports authentication, confidentiality and non-repudiation (typically via SSL),
      while the business logic layer supports role-based authorization with automatic forwarding
      of the security context across bean calls.
    </para>
  </section>
  
  <section>
      <title>Performance</title>
      <para>
      Performance is a two-sided sword in the Java EE architecture. Already by the nature of being
      a reference architecture for distributed enterprise systems, a performance issue is usually
      introduced due to the increased number of software layers present in the system.
    </para>
      <para>
      Furthermore, the layering and the decoupling with the requirement that object 
      references are obtained via JNDI from a naming service adds further performance
      preasures.
    </para>
      <para>
      On the other hand, the support for local interfaces, thread and resource connection pooling,
      the sophisticated database caching opportunities introduced with the Java Persistence API and of course the clustering can
      all contribute to achieving a high level of performance.
    </para>
  </section>
  
  <section>
      <title>Integrability</title>
      <para>
      Java EE scores very well on integrability, with native support for CORBA and web services, 
      and the possibility of plugging in JCA adapters for native integration to legacy or proprietary 
      systems.
    </para>
  </section>
  
  
  <section>
      <title>Time-to-market</title>
      <para>
      Time-to-market is supposed to be good for Java EE. One of the problems is, however, that
      designers and developers are typically faced with a steep learning curve in both, the technology
      and the tools supporting the technologies. Furthermore, many of the tools hide the underlying
      concepts making the understanding and consquent problem solving at times more difficult.
    </para>
  </section>
  
  
  
  
</section>