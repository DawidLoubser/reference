<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.architecture.referenceArchitectures.j2ee.enterpriseBeans.beanSpecies.entityBeans">

  <title>Entity Beans</title>
  <para>
      Entity beans (or simply <emphasis>entities</emphasis>, as of EJB version 3) represent 
      long-lived objects in the application domain, such as products, customers or orders. They
      present an object-oriented view to data in a relational or object database.
  </para>
  <para>
    The EJB developer manages entities by making use of the <acronym>JPA</acronym> (Java Persistence API),
    a framework which takes over the responsibilities of mapping objects to relational database tables and columns.
  </para>
  
  <section>
      <title>Life span of entities</title>
      <para>
      Entity are typically long-lived objects with persistant state. They live beyond
      the client application or server process and survive even if the EJB container is
      restarted. Each entity has a unique identifier, called it's <emphasis>key</emphasis>.
    </para>  
      <note>
         <para>
        From the client's perspective the entity bean object always exists, even if there is
        currently no physical instantiation of the entity bean object. The JPA is responsible
        for reconstructing entity objects on-demand.
      </para>
      </note>  
  </section>
  
  <section>
      <title>EJB-QL</title>
      <para>
      The <emphasis>EJB Query Language</emphasis>, EJB-QL, is a persistence technology neutral
      object-oriented query language which facilitates the writing of queries along object graphs.
    </para>
  </section>
  
  <section>
      <title>Bean relationships</title>
      <para>
      EJB supports the UML association, composition and specialization relationships,
      and is able to persist all 3 relaionships through to database level. The user can specify
      how these relationships should be mapped onto persistent storage. This allows for a very
      effective mapping of a UML-based design to an EJB-based system.
    </para>
  </section>
  
  <section>
      <title>Taking entities into and out of managed state</title>
      <para>
      The EB specification supports taking entity beans out of managed state
      to temporarily become simple value objects (perhaps sent over a network) 
      and to merge them back into managed state at some later stage.
    </para>
  </section>
  
  <section>
      <title>Entities and concurrency</title>
      <para>
        Entity beans provide a <emphasis>single access path to the data for all clients who may
        access the bean simultaneously. The state of an entity bean is thus shared
        and transactional. The container automatically provides support for concurrent
        access, often by simply delegating the concurrency control to the database
        itself.</emphasis>
        <note>
            <para>
            Entity beans can be used to improve database performance by providing 
            <emphasis>a cache between transactions</emphasis>.
         </para>
         </note>   
      </para>  
  </section>

    
</section>