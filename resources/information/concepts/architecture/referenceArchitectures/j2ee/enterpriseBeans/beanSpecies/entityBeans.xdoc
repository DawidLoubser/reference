<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.architecture.referenceArchitectures.j2ee.enterpriseBeans.beanSpecies.entityBeans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Entity Beans</title>
  <para>
      Entity beans are the entity objects in the analysis model. They typically represent 
      objects in the client (business) domain like products, customers or orders. They
      present an object view to data in a relational or object database, but the bean code
      is typically not directly coupled to a specific database. The coupling is done either
      via annotations or by providing a deployment descriptor.
  </para>
  <para>
    EJB provides direct support for the Java Persistence API which is a standard API for object
    relational mappers.
  </para>
  <section>
    <title>Entity beans and concurrency</title>
    <para>
        Entity beans provide a <emphasis>single access path to the data for all clients who may
        access the bean simultaneously. The state of an entity bean is thus shared
        and transactional. The container automatically provides support for concurrent
        access, often by simply delegating the concurrency control to the database
        itself.</emphasis>
        <note><para>
            Entity beans can be used to improve database performance by providing 
            <emphasis>a cache between transactions</emphasis>.
         </para></note>   
    </para>  
  </section>
  
  <section>
    <title>Life span of entity beans</title>
    <para>
        Entity beans are normally long-lived objects with persistant state. They live beyond
        the client application or server process and survive even if the EJB container is
        brought down.
        A primary key is used as a unique object identifier. This primary key may or 
        may not be the same key which identifies the data (<abbrev>e.g.</abbrev> a row 
        or an object) in the database.
    </para>  
    <note><para>
      From the client's perspective the entity bean instance always exists, even if there is
      currently no physical instation of the entity bean object.
    </para></note>  
  </section>  

  <section>
    <title>Taking data objects in and out of managed state</title>
    <para>
      The EB specification supports taking entity beans out of managed state
      to temporarily become simple value objects and to merge them back into managed 
      state at some later stage.
    </para>
  </section>
  
  
    <section>
      <title>Bean relationships</title>
      <para>
        EJB now supports association, composition and specialization and is able to persist
        all 3 relaionships through to database level. The user can specify through annotations
        how these relationships should be mapped onto persistent storage.
      </para>
    </section>
    
    <section>
      <title>EJB-QL</title>
      <para>
        The <emphasis>EJB Query Language</emphasis>, EJB-QL, is a persistence technology neutral
        object-oriented query language which facilitates the writing of queries along object graphs.
        EJB-QL statements are ultimately mapped onto queries in the chosen persistence technology
        (<abbrev>e.g.</abbrev> the SQL for a particular relational database product).
      </para>
    </section>
</section>
