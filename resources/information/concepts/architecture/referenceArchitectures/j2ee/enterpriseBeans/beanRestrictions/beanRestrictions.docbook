<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?><section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="resources.information.concepts.architecture.referenceArchitectures.j2ee.enterpriseBeans.beanRestrictions.beanRestrictions">

  <title>Enterprise bean restrictions</title>
  <para>
    The container takes over a lot of responsibilities which would otherwise
    have resided with the bean developer. Consequently the bean itself is
    prevented from doing certain things which interfere with the container
    operations.
  </para>
  
  <section>
      <title>Beans can't give clients direct access to the bean instance</title>
      <para>
      The client should never interface with the bean instance directly, but 
      should instead interface only with the EJB object which is generated by
      the container and acts as a portal to the bean. This architecture enables
      the container to intercept bean service requests and take over the 
      responsibility of container managed services like transactions, concurrency,
      security and persistence.
    </para>
      <para>
      Though you can't pass a handle of the bean instance to the client, you can,
      of course pass the handle to bean helper classes (which are, from the client's
      point of view part of the bean implementation).
    </para>
  </section>

  <section>
      <title>Enterprise beans may not accept network server connections</title>
      <para>
      Beans should not act as servers themselves. Once again, this is the
      prerogative of the EJB object. The bean can, however, open client
      connections to other network servers (<abbrev>e.g.</abbrev>
      CORBA servers or other enterprise beans).
    </para>
  </section>

  <section>
      <title>Enterprise beans should be single-threaded</title>
      <para>
      In order to be able to effectively handle concurrent service requests from a large number clients
      the application server uses thread pooling. For this reason the application classes should not
      create their own threads. If they do want to have a piece of work done in a separate thread,
      then they should submit the piece of work to the application server which will assign a thread
      from a thread pool for processing that piece of work in a managed way.
    </para>
      <para>
       The bean should also not use synchronization on your bean itself. This too will be handled by the
      application server within the transactions framework. 
    </para>
  </section>
 
  <section>
      <title>Enterprise beans should not have a user interface</title>
      <para>
      The whole idea behind Enterprise Java Beans is to separate the presentation
      layer from the business logic layer. No direct interaction via a GUI
      (AWT or Swing) or keyboard input is allowed for enterprise beans. Of course,
      the latter follows from the fact that enterprise beans may not use the 
      <literal>java.io</literal> package. Bean developers may also not assume that the bean
      host has any form of GUI support.
    </para>
  </section>
  
  <section>
      <title>Beans can't have persistent class fields</title>
      <para>
      The idea of maintaining persistent class information (static fields) for
      an EJB goes largely against OO concepts and warrants a redesign with perhaps
      introducing further entity beans. 
    </para>
      <para>
      There are several problems with maintaining class state for an EJB. Firstly,
      the container will not manage concurrent access to such fields and you as bean
      developer may not. Furthermore, the EJB service requests may be distributed by
      the container across Java Virtual Machines (JVMs) and the class state would
      not be available across these JVMs.
    </para>
      <para>
      Thus, you should only use constant (<literal>final</literal>) class attributes for EJBs.
    </para>
  </section>
  
  <section>
      <title>Enterprise beans may not use any native libraries</title>
      <para>
      The reasons for this are firstly security and secondly portability. If you
      really need to obtain access to native libraries you should wrap them as
      a CORBA component and use them via standard CORBA service requests.
    </para>
  </section>
</section>