<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.urdad.howDoesUrdadLeadToGoodDesign.howDoesUrdadLeadToGoodDesign"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  
  <title>How does URDAD lead to good design?</title>
  <para>
    URDAD aims to provide a design process which inheritantly leads to a design which adheres to 
    accepted requirements for a good design.
  </para>    
  
  <section>
    <title>Responsibility localization</title>
    <para>
      URDAD aims to achieve responsibility localization by
      <itemizedlist>
        <listitem><para>
          requiring responsibility identification should be done before identifying components or modules, and by
        </para></listitem>
        <listitem><para>
          requiring that each responsibility is assigned to a separate component or service provider.
        </para></listitem>
      </itemizedlist>
      In this way URDAD aims to generate a design with high cohesion where each object has only a single 
      responsibility (single responsibility principle).    
    </para>
  </section>
  
  <section>
    <title>Clean layers of granularity</title>
    <para>
      URDAD claims that it is important to be able to look at workflows at various levels of granularity. 
      For example, the driver of a car needs to understand the car at a high level of granularity. 
      A general service technician needs to understand the car at a lower level of granularity and a 
      gearbox specialist needs to understand a sub-domain of the car at an even lower level of granularity.
      Each role player only needs to understand their level of granularity. A general service technicion need 
      not be able to drive the car nor does he/she need to be able to service the gearbox.
    </para>
    <para>
      Similarly, different levels of management need to be able to look at a business process at their level 
      of granularity (the CEO does not want to see all the finer details). The same holds true for different 
      members of a software development team (architects, lead designers, module develelopers, ...).
    </para>
    <para>
      URDAD directly generates these different levels of granularity projecting out workflows as well as 
      static structures at various levels of granularity. Furthermore, URDAD requires that at each level of 
      granularity there is a workflow controller which takes ownership of the workflows at that level of 
      granularity.
    </para>
  </section>
  
  <section>
    <title>Decoupling via contracts</title>
    <para>
      URDAD requires that one should specify a contract for each responsibility. The contracts are interface 
      specifications with pre- and post conditions on services and quality requirements on service providers 
      as a whole (applicable across the various services offered) and potentially some service specific quality 
      requirements.
    </para>
    <para>
      These contracts provide requirements for the components and external service providers realizing the 
      contract and also form the basis for a testing framework. In the case of organizational modeling the 
      contacts are Service Level Agreement's.
    </para>
  </section>
  
  <section>
    <title>Simplicity</title>
    <para>
      In URDAD the workflow is specified before the structure supporting the workflow. The structure required 
      at a specific level of granularity is projected out automatically from the workflow specification for that 
      level of granularity. URDAD thus claims that the structure generated by the design process is a simple 
      structure which contains only those structural elements required to support the workflow realizing the 
      use case.
    </para>
    <para>
      Another aspect of design simplicity is that URDAD generates the different layers of granularity. URDAD 
      claims that such a layered design adds to the simplicity of the design.    </para>
  </section>
    
  <section>
    <title>Architecture/Technology neutral design</title>
    <para>
      URDAD generates the Platform Independent Model (PIM) in the spirit of the Model Driven Architecture 
      (MDA). This model thus survives changes in architecture and technologies. Note that the mapping of the 
      PIM onto MDA's Platform Specific Model (PSM) is not within the scope of URDAD. A separate process thus 
      needs to be followed for this mapping step.
    </para>
  </section>
</section>  