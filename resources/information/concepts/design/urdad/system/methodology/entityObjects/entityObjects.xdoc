<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.urdad.system.methodology.entityObjects.entityObjects"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Value objects</title>
  <para>
    One still needs to specify the structure of any object exchanged between system components or between system components and actors,
    the so called <quote>value objects</quote>.  If we look at our mail client, then we see that an instance of an <literal>EMail</literal> is 
    sent from the <literal>MailClientController</literal>
    to the <literal>MailSender</literal> and that the latter returns an instance of a <literal>SentConfirmation</literal>. We need to specify the
    structure of these value objects. This is naturally done using UML class diagrams.
  </para>
  
  <figure id="resources.information.concepts.design.urdad.system.methodology.entityObjects.eMail_fig">
    <title>Class diagram for the e-mail value object.</title>
    <graphic fileref="eMail.jpg"/>
  </figure>
  
  <para>
    <xref linkend="resources.information.concepts.design.urdad.system.methodology.entityObjects.eMail_fig"/> shows a simplified class
    diagram for the e-mail value object exchanged between the <literal>MailEditor</literal>, <literal>MailClientController</literal>
    and <literal>MailSender</literal>.
  </para>
</section>  