<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.urdad.system.methodology.collaborationContext.collaborationContext"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Projecting out the context of the collaboration</title>
  <para>
    The collaboration shows the services the role players request from each other in the context of realizing the use case
    as well as the message paths required between them. URDAD now generates the context of the collaboration by projecting 
    out the static structure required at the current level of granularity to realize the use case. This is a very simple step and the
    resultant class diagram is shown in
    <xref linkend="resources.information.concepts.design.urdad.system.methodology.collaborationContext.sendNewMailCollaborationContext_fig"/>.
  </para>
  <figure id="resources.information.concepts.design.urdad.system.methodology.collaborationContext.sendNewMailCollaborationContext_fig">
    <title>The context of the collaboration.</title>
    <graphic fileref="sendNewMailCollaborationContext.jpg"/>
  </figure>
  <para>
    The context of the collaboration is thus that subset of the static model which, at the current level of granularity, is required to
    realize the use case. The objects from that level of granularity are peers and hence the relationships between them will be associations
    (client-server) and not aggregation or composition relationships (otherwise the objects would not all be at the same level of granularity).
    However, some of these are components of the higher level context, filling in composition relationships between layers of granularity.
  </para>
  <para>
    Note that unlike many other design methodologies (see for example
    <xref linkend="Ben-Abdallah-et.al-2004"/>)
    which go from the use case model to the static model (often via an object dictionary),
    URDAD defines the dynamics realizing the use case first. Only then is the required static structure identified. URDAD thus  
    generates minimal structural complexity, <abbrev>i.e.</abbrev> only those structural features which are actually required to realize
    the use case.
  </para>
  <para>
    Note also that the objects and classes generated are all at the same level of granularity. They are all either components of the use case context or actors. 
    We have explicitly refrained from introducing any lower level classes at this stage. Instead URDAD provides a simple approach for
    going over to the next lower level of granularity.
  </para>
</section>  