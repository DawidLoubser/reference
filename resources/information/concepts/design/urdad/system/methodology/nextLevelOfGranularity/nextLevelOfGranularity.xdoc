<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.nextLevelOfGranularity"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Transition to the next level of granularity</title>
  <para>
    In order to go over to the next level of granularity, one selects one of the components from the current level of granularity as the 
    context for the next level of granularity. Its services at the current level of granularity will become the use cases of the next level
    of granularity. Those components which interface with that object at the current level of granularity will become the actors.
    For example, if we select the <literal>MailSender</literal> as our new context, the corresponding use case diagram would be
    given by    
    <xref linkend="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.mailSenderUseCase_fig"/>,
    <abbrev>i.e.</abbrev> the <literal>MailSender</literal> is used by the <literal>MailClientController</literal> to send e-mails.
  </para>
  
  <figure id="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.mailSenderUseCase_fig">
    <title>Use case diagram for a component at the next lower level of granularity.</title>
    <graphic fileref="mailSenderUseCase.jpg"/>
  </figure>
  
  <para>
    Of course the object may choose to realize the use case in a way which makes use of further actors. This should, however, be
    responsibility driven. We thus first identify the responsibilities at this new, lower level of granularity and before assigning them to
    components and/or actors of this lower level object as shown in figure
    <xref linkend="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.sendMailResponsibilityIdentification_fig"/>.
  </para>
  
  <figure id="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.sendMailResponsibilityIdentification_fig">
    <title>Responsibility identification at next lower level of granularity.</title>
    <graphic fileref="sendMailResponsibilityIdentification.jpg"/>
  </figure>
  
  <para>
    Each responsibility is, once again, assigned to either a component of this lower level component (this is where the composition relationships
    are identified) or an actor. This is shown in 
    <xref linkend="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.sendMailResponsibilityAllocation_fig"/>
  </para>
  
  <figure id="resources.information.concepts.design.urdad.system.methodology.nextLevelOfGranularity.sendMailResponsibilityAllocation_fig">
    <title>Responsibility allocation at next lower level of granularity.</title>
    <graphic fileref="sendMailResponsibilityAllocation.jpg"/>
  </figure>
  
  <para>
    Note that we have a workflow controller at each level of granularity taking over the responsibility of managing the workflow for the use case 
    at that level of granularity Similarly, if the user interfaces directly with the lower level object (as, for example, the <literal>MailEditor</literal> 
    would), then there would also be the responsibility of interfacing with the user. 
  </para>
  <para>
    URDAD is thus an iterative design process which projects out one level of granularity after another. Typically one will require between
    2 and 4 levels of granularity depending on the complexity of the system.
  </para>
</section>  