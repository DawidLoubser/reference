<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.developmentProcess.urdad.system.introduction.urdadDrivers"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>URDAD drivers</title>
    <para>
      URDAD aims to provide a simple design process which leads to good design. To this end it uses the
      requirements for a good design as direct drivers for the process. 
      <itemizedlist>
        <listitem><formalpara>
          <title>Use-Case driven</title>
          <para>
            Virtually all modern software development processes are iterative, use case driven processes. They deliver value
            incrementally to users and clients through iterative realization of use cases. Furthermore,
            use case driven approaches deliver iteratively testable deliverables.
            Suitable design methodologies must hence similarly be use case
            driven, realizing the functional requirements provided with the use case requirements.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Good responsibility localization by design</title>
          <para>
            At each level of granularity URDAD starts by identifying the responsibilities at that level
            of granularity before identifying objects. Each responsibility is then assigned to a separate object.
            This approach yields good responsibility localization by design.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Simplicity: minimized structural complexity</title>
          <para>
            In URDAD one does not start with the design with the static model (the class diagrams). Instead,
            after having identified (via the responsibilities) the core components which collaborate to realize
            the use case at that level of granularity, one first looks at how they collaborate (the dynamics). The static
            model required to support the dynamics realizing the use case is then projected out from the dynamic
            model. The only structural features thus generated are those  required to realize the use case.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Clean layers of granularity</title>
          <para>
             In URDAD a level of granularity is fixed by the responsibilities. The only components for a particular level
            of granularity will be those to which the core responsibilities were assigned. URDAD projects out the workflow
            as well as the static structure at a fixed level of granularity. Finally, URDAD provides a simple mechanism
            for stepping from the current to the next lower level of granularity.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Decoupling via contracts at all levels of granularity</title>
          <para>
            URDAD requires responsibility identification followed by responsibility allocation to core system components
            and core external service providers (actors). For each responsibility, irrespective of whether the responsibility
            is  by an internal component or an actor, URDAD requires a contract. Contract are specified
            along the guidelines provided by <emphasis>Design by Contract</emphasis>.
          </para>
        </formalpara></listitem>
      </itemizedlist>
      In URDAD re-usability is viewed as a consequence of responsibility localization and contract (interface) based
      decoupling.
    </para>  
</section>
