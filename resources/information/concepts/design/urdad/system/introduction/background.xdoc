<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.developmentProcess.urdad.system.overview.background"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Background</title> 
  <para>
    URDAD has grown out of Responsibility Driven Design (RDD) methodology pioneered by Rebecca Wirfs-Brock
    and Brian Wilkerson
    ( see <xref linkend="Wirfs-Brock-Wilkerson-1989"/>, <xref linkend="Wirfs-Brock-Wilkerson-Wiener-1990"/>
    and <xref linkend="Wirfs-Brock-McKean-2002"/>).  Like RDD, URDAD focuses during the early stages of the design 
    on identifying and assigning responsibilities. Also, like RDD, URDAD puts a lot of emphasis on client-server
    contracts. However, unlike RDD, URDAD critically requires that responsibilities should be identified before 
    one identifies the objects which will ultimately host the responsibilities. Furthermore, RDD does not
    provide a framework which generates the different layers of granularity naturally and cleanly. The ability to 
    look at use case realization at different levels of granularity is a major benefit of URDAD. Finally, URDAD
    provides a step-for-step algorithm for designing a system across its levels of granularity.
  </para>
  <para>
    Other methods like the <emphasis>ICONIX</emphasis> process from Doug Rosenberg discussed in
    <xref linkend="Rosenberg-Scott-1999"/> provide a structured process for evolving the static model from
    the collaboration requirements, but are not really responsibility driven, nor do they project out clean layers
    of granularity.
  </para>
</section>
