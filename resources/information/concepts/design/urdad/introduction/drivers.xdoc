<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.developmentProcess.urdad.introduction.drivers"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>URDAD drivers</title>
    <para>
      URDAD embeds the requirements for a good design directly into the design process in such a way
      that following the design process should yield a design which has the qualities of a good
      design discussed in <xref linkend="resources.information.concepts.design.guidelines.requirementsForGoodDesign"/>.
      <itemizedlist>
        <listitem><formalpara>
          <title>Use-Case driven</title>
          <para>
            Design has to realize the functional (use-case) requirements. 
            Use-case driven design processes deliver user
            testable units of functionality which provide value to the user.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Responsibility localization by design</title>
          <para>
            At each level of granularity URDAD starts by identifying the responsibilities at that level
            of granularity before identifying any objects. Each responsibility is then assigned to a separate object.
            This approach directly enforces the <emphasis>single responsibility
              principle</emphasis>.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Clean layers of granularity</title>
          <para>
            In URDAD a level of granularity is fixed during the responsibility identification step. 
            The only components for a particular level
            of granularity will be those to which the core responsibilities were assigned. URDAD projects out the workflow
            as well as the static structure at a fixed level of granularity. Finally, URDAD provides a simple mechanism
            for stepping from the current to the next lower level of granularity.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Simplicity: minimized structural complexity</title>
          <para>
            In URDAD one does not start with the design with the static model (the class diagrams). Instead,
            after having identified (via the responsibilities) the core components which collaborate to realize
            the use case at that level of granularity, one first looks at how they collaborate (the dynamics). The static
            model required to support the dynamics realizing the use case is then projected out from the dynamic
            model. The only structural features thus generated are those required to realize the use case.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Decoupling via contracts at all levels of granularity</title>
          <para>
            For each responsibility, irrespective of whether the responsibility
            is  by an internal component or an actor, URDAD requires a contract. Contract are specified
            along the guidelines provided by <emphasis>Design by Contract</emphasis>.
          </para>
        </formalpara></listitem>
      </itemizedlist>
    </para>  
</section>
