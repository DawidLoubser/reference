<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.creational.abstractFactory.consequences"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Consequences</title>
  <para>
  <itemizedlist>
    <listitem><para>
      The Abstract Factory pattern provides a simple mechanism to <emphasis>exchange one
      family</emphasis> of classes with another.
    </para></listitem>
    <listitem><para>
      Clients are <emphasis>decoupled from the concrete classes</emphasis> they are using.
    </para></listitem>
    <listitem><para>
       <emphasis>Consistency among different products</emphasis> supporting a particular 
       application domain is enforced.
    </para></listitem>
    <listitem><para>
      Changes to the way in which products are created (<abbrev>i.e.</abbrev> changes 
      to constructor arguments) have to be rippled through the abstract factory as well as 
      all concrete factory implementations.
    </para></listitem>
    <listitem><para>
       <emphasis>Extending the product range is cumbersome</emphasis> because the 
       product must be added to the abstract factory as well as to each concrete factory.
    </para></listitem>
    <listitem><para>
      The <emphasis>factories may become very complex</emphasis>.
    </para></listitem>
  </itemizedlist>
  </para>
</section>
