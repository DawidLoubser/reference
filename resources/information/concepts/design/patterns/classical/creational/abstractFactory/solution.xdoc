<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.creational.abstractFactory.solution"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Solution</title>
  <para>
    The solution involves encapsulating
    <itemizedlist>
      <listitem><para>
        the requirements specification for the products which are going to be
        produced in a collection of  <emphasis>abstract products</emphasis>, and
      </para></listitem>
      <listitem><para>
        the requirements specification around which objects the various concrete
        factories need to be able to produce and what information they will receive
        in order to construct them in an <emphasis>abstract factory</emphasis>.
      </para></listitem>
    </itemizedlist>
  </para>
  
  <section>
    <title>Responsibility allocation</title>
    <para>
      The abstract factory itself specifies the types of objects (<abbrev>i.e.</abbrev> 
      realizations of which abstract objects) the various concrete factories must be 
      able to create. Each family of classes has its own factory which produces classes 
      which realize the various abstract products. 
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.creational.abstractFactory.responsibilityAllocation_fig">
      <title>Responsibilities of the components of the abstract factory pattern</title>
      <graphic fileref="responsibilityAllocation.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>Structure</title>
    <para>
      The structure of the abstract factory pattern is specified in the UML class diagram shown
      in <xref linkend="resources.information.concepts.design.patterns.classical.creational.abstractFactory.structure_fig"/>.
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.creational.abstractFactory.structure_fig">
      <title>The structure of the abstract factory pattern</title>
      <graphic fileref="structure.jpg"/>
    </figure>
    
    <para>
      Often the various families of classes represent different realizations of the same framework.
      For example, they could represent different realizations of 
      <itemizedlist>
        <listitem><para>
          a user interface framework,
        </para></listitem>
        <listitem><para>
          a persistence framework, or  
        </para></listitem>
        <listitem><para>
          a pricing framework.
       </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
</section>
