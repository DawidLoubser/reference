<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.creational.factoryMethod.solution"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Solution</title>
  <para>
    The solution is simply that classes provide their own concrete realization of a factory method,
    <abbrev>i.e.</abbrev> we simply use method overloading.
  </para>
  
  <section>
    <title>Responsibility allocation</title>
    <para>
      In <xref linkend="resources.information.concepts.design.patterns.classical.creational.factoryMethod.responsibilityAllocation_fig"/>
      we show the responsibilities of the various components of the factory method pattern. 
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.creational.factoryMethod.responsibilityAllocation_fig">
      <title>Responsibilities of the components of the factory method pattern</title>
      <graphic fileref="responsibilityAllocation.jpg"/>
    </figure>
    
    <para>
      An abstract context decouples a client from specific realizations of that context and specifies
      factory methods to be realized by its concrete realizations. Similarly, an abstract product
      decouples clients from issues which are specific to concrete products for a specific context.
      The concrete contexts implement the factory method interface which returns the product
      appropriate for that specific context.
    </para>
    
  </section>
  
  <section>
    <title>Structure</title>
    <para>
      A context specifies the factory methods which the various concrete realizations of the
      context must provide.
      The structure of the factory method pattern is specified in the UML class diagram shown
      in <xref linkend="resources.information.concepts.design.patterns.classical.creational.factoryMethod.structure_fig"/>.
      Note that the client is completely decoupled from any specific concrete realization
      of a product. The client simply obtains the correct product for a specific context and uses it.
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.creational.factoryMethod.structure_fig">
      <title>The structure of the factory method pattern</title>
      <graphic fileref="structure.jpg"/>
    </figure>
    
  </section>
</section>
