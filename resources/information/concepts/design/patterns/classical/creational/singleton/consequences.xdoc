<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.creational.singleton.consequences"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Consequences</title>
  <para>
     <itemizedlist>
       <listitem><formalpara>
         <title>Provides controlled access to sole instance</title>
         <para>
           The singleton pattern provides a single access point through which the sole instance
           is created and through which access to the sole instance is obtained. It avoids using
           a global variable as access point to the instance and thus the associated name
           space pollution.
         </para>
       </formalpara></listitem>
       <listitem><formalpara>
         <title>May fail in a multi-threaded environment</title>
         <para>
           When multiple threads request handles to the instance of a singleton,
           it may happen that more than one instance is created. Combining the
           double locking pattern (see 
           <xref linkend="resources.information.concepts.design.patterns.concurrentSystems.doubleCheckedLocking.doubleCheckedLocking"/>)
           with the singleton pattern can solve this problem.
         </para>
       </formalpara></listitem>
       <listitem><formalpara>
         <title>Can be generalized to manage an object pool</title>
         <para>
           The singleton can be generalized to create further instances up to a specified maximum
           number of instances. In most such cases (for example a pool of database connections
           or a thread pool) users would want exclusive access to the 
           instance until they release it. The <literal>getInstance()</literal> would
           mark the instance returned as <emphasis>in use</emphasis> and you would have to 
           add a method which releases the instance (marking it as <literal>not in use</literal>.
           <note>
             <para>
               If one had used a public data field for the handle, then generalizing a singleton to
               an object pool would be more difficult as it would require maintenance on both,
               the server and the client side.
             </para>
           </note>
         </para>
       </formalpara></listitem>
       <listitem><formalpara>
         <title>Can create instance with information provided at run-time</title>
         <para>
           We can provide separate methods for instance creation and instance access. 
           The former may take initialization information as parameters which is used
           to create the instance. Both services would not be provided unconditionally --
           the former would through an <literal>InstanceExists</literal>
           exception if the constructor service is called iteratively and the second method
           would throw a <literal>NoInstanceInitialized</literal> exception if
           the instance is requested prior to having created it.
         </para>
       </formalpara></listitem>
       <listitem><formalpara>
         <title>In most cases you do not want to allow subclassing of the singleton class</title>
         <para>
            In many examples (<abbrev>e.g.</abbrev> that of continuous compounding), you
            would not want to allow the development of subclasses. Some languages like Java
            allow you to explicitly disallow subclassing.
         </para>
       </formalpara></listitem>  
       <listitem><formalpara>
         <title>Providing specialized instances</title>
         <para>
           A singleton could have subclasses and when requesting its instance, one of the 
           subclass instances would be returned -- a subclass instance is, after all, also
           an instance of the class itself. The actual class through which access to one of
           its specializations is obtained could even be abstract. 
         </para>
       </formalpara></listitem>
      
     </itemizedlist>
     
  </para>
</section>
