<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.behavioral.templateMethod.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example applications</title>
  <para>
    The template method is typically used when the individual steps required by an
    algorithm are known, but can be realized in very different ways.
  </para>

  <section>
    <title>High-level workflow management</title>
    <para>
      For example, consider the workflow for processing a vehicle accident claim. The individual
      process steps may include
      <orderedlist>
        <listitem><para>
          Capturing the claim.  
        </para></listitem>
        <listitem><para>
          Verifying that the policy is active.
        </para></listitem>
        <listitem><para>
          Verifying that the policy covers the claim.
        </para></listitem>
        <listitem><para>
          Determining who is accountible and to what extend.
        </para></listitem>
        <listitem><para>
          Determining the value of the claim.
        </para></listitem>
        <listitem><para>
          Compiling a settlement offer.
        </para></listitem>
        <listitem><para>
          Negotiating with the client.
        </para></listitem>
        <listitem><para>
          Paying out the settlement amount.  
        </para></listitem>
      </orderedlist>
      The requirements that steps must be performed in a certain order (with potential
      concurrencies) could be defined in a template method. The detailed algorithms
      realizing these individual steps could be varied without affecting the high-level
      workflow.
    </para>
  </section>  

  <section>
    <title>Skeleton models in MVC components</title>
    <para>
      The model-view controller is a classical architectural pattern which separates the
      business data/logic (the model) from the presentation of that information (the view)
      and the way user events control the workflow (the controller). Most modern presentation
      layers (even web-based presentation layers) make use of this factorization and Java's
      Swing is designed around the model-view-controller pattern.
    </para>
    <para>
      In Swing, the more complex GUI components like trees and tables provide
      a template method specifying a high-level algorithm used to interface with the model.
      These classes are called <literal>AbtractTableModel</literal> and
      <literal>AbstractTreeModel</literal> and you subclass them to provide concrete
      realizations for some of the methods which interface with your model.
      <note>
        <para>
          The subclasses of the abstract model classes of swing are typically not used to realize the
          model itself, but only define how the view and controller interact with your model.
        </para>
      </note>
    </para>
  </section>
  
    
    <section>
      <title>Genetic algorithms</title>
      <para>
        Genetic algorithms are widely used for global optimization.
        In a genetic algorithm there are 3 low-level steps performed within each iteration:
        <orderedlist>
          <listitem><formalpara>
            <title>Selection</title>
            <para>
              The members of a society which are going to reproduce are selected.
            </para>
          </formalpara></listitem>
          <listitem><formalpara>
            <title>Cross-over</title>
            <para>
              This step represents the exchange of genetic material between reproducing
              parents.
              <note><para>
                This step represents, in a way, a directional search.
              </para></note>  
            </para>
          </formalpara></listitem>
          <listitem><formalpara>
            <title>Mutation</title>
            <para>
              Mutations are random changes to the genetic material. This step introduces
              lateral (random, non-directional) exploration component.
            </para>
          </formalpara></listitem>
        </orderedlist>
        
      </para>
    </section>
  
    
</section>
