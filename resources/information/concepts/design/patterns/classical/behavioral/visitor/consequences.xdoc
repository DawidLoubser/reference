<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.behavioral.visitor.consequences"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Consequences</title>
  <para>
  <itemizedlist>
    <listitem><para>
       The Visitor pattern enables one to <emphasis>add polymorphic functionality</emphasis>
       to classes without modifying or sub-classing them.
    </para></listitem>
    <listitem><para>
       It can help <emphasis>preserve the focus of classes</emphasis> encapsulating 
       functionality which is not part of the core responsibility within separate visitors.
    </para></listitem>
    <listitem><para>
       You can define as <emphasis>many visitors</emphasis> as you like, each only adding
       services within a narrow responsibility focus. In this way one
       ensures that the design elements maintain a high cohesion level.
     </para></listitem>
     <listitem><para>
        Although our Visitor example only operates within a class hierarchy,
        the Visitor pattern can also be used at <emphasis>add functionality to classes
        across separate class hierarchies</emphasis>.      
      </para></listitem>
      <listitem><para>
         The visitor provides a mechanism to <emphasis>aggregate information across
         service requests</emphasis>.      
       </para></listitem>
       <listitem><para>
          <emphasis>Adding new concrete elements results in a lot of maintenance</emphasis> 
          across the entire Visitor hierarchy. You should only consider applying
          the visitor pattern to mature class hierarchies where modifications
          and additions are not expected.
        </para></listitem>
        <listitem><para>
          Visitors <emphasis>can only add functionality which uses the public interface
          of the elements</emphasis>. The temptation to sacrifice encapsulation may become
          overwhelming.
        </para></listitem>
        <listitem><para>
           The visitor pattern <emphasis>introduces cyclic dependencies</emphasis> which makes
           it difficult to maintain (see the <emphasis>acyclic visitor pattern</emphasis>).
         </para></listitem>
         <listitem><para>
            There is no clean way to add visitors which are meant to only visit
            a subset of the element hierarchy.
         </para></listitem>
  </itemizedlist>
  </para>
</section>
