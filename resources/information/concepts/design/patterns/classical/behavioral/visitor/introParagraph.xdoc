<?xml version="1.0" encoding="UTF-8"?>
 
<para id="resources.information.concepts.design.patterns.classical.behavioral.visitor.introParagraph"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
      xmlns:xi="http://www.w3.org/2001/XInclude">

  At times one has a compiled class library and one wants to
  add some polymorphic functionality to the classes without modifying the
  classes themselves. The reason for this may be that
  <itemizedlist>
    <listitem><formalpara>
      <title>Source code is not available</title>
      <para>
        The source code may not be available and hence one may not be able to modify the 
        classes to add the desired functionality.
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>Maintain ownership status of classes</title>
      <para>
        At other times the source may be available but the team who is responsible for maintaining
        the source is unwilling to modify it and you do not want to maintain your own branch of
        the source.
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>Protect the responsibility focus (cohesion level) of the classes</title>
      <para>
        The classes may be used
        across the organization and one has not got the primary responsibility
        of the classes. The development team may be hesitant to add the functionality
        because they feel that functionality is only useful to a specific 
        user group and they fear that their classes will bloat over time and loose 
        their cohesion -- that they will acquire over time a wide range of
        responsibilities which are not aligned with the primary responsibility
        of the classes.    
      </para>
    </formalpara></listitem>
  </itemizedlist>
  In such cases the Visitor pattern may be useful. It enables
  one to add polymorphic functionality to a class hierarchy without modifying 
  or sub-classing the classes. This is quite an ambitious task and the visitor pattern
  provides a novel solution to this problem.
</para>
