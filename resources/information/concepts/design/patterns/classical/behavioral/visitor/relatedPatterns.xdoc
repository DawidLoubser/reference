<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.behavioral.visitor.relatedPatterns"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Related patterns</title>
  <para>
  <itemizedlist>
    <listitem><formalpara>
      <title>Decorator pattern</title>
      <para>
        The visitor pattern enables you to add a polymorphic service externally to a class
        hierarchy. The decorator pattern enables you to add responsibilities externally
        for an existing service of a class hierarchy.
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>State pattern</title>
      <para>
        The state pattern enables you to externally specify state-specific ways of realizing
        an existing service.
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>Exposed state pattern</title>
      <para>
        While the visitor pattern enables you to add a polymorphic service without changing any of
        the classes in the class
        hierarchy, the exposed state pattern enables you to add state specific services to a context
        without changing the context itself.
      </para>
    </formalpara></listitem>  
    <listitem><formalpara>
      <title>Acyclic visitor pattern</title>
      <para>
        The acyclic visitor pattern addresses 3 of the core issues which may be raised against
        the classical visitor pattern:
        <itemizedlist>
          <listitem><para>
            The visitor pattern <emphasis>is not maintenance friendly</emphasis> since
            all visitors must be modified every time a new class is added to the class hierarchy
            to which a polymorphic functionality is added.
          </para></listitem>
          <listitem><para>
            There are circular dependencies between the elements of the class hierarchy and the
            visitors. The consequence of this is that the visitor pattern has <emphasis>
            considerable compilation overheads</emphasis>, requiring that all classes are
            recompiled when any of the classes are modified.
          </para></listitem>
          <listitem><para>
            The classical visitor pattern does not support <emphasis>partial visitations</emphasis>,
            <abbrev>i.e.</abbrev> that a visitor adds a service to only part of the class hierarchy.
          </para></listitem>
        </itemizedlist>
      </para>
    </formalpara></listitem>
  </itemizedlist>
  </para>
</section>
