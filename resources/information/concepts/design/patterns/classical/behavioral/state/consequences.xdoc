<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.behavioral.state.consequences"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Consequences</title>
  <para>
  <itemizedlist>
    <listitem><formalpara>
      <title>Localization of state-specific aspects of a class</title>
      <para>
        State-specific realizations of a service and state-specific attributes are
        encapsulated in a separate state object.
      </para>
    </formalpara></listitem>
    
    <listitem><formalpara>
      <title>Reduced complexity of the context.</title>
      <para>
         The context is now a lot simpler and does not contain state-specific
         information and logic. Neither does it contain the logic for selecting the
         correct service realization for its current state.
      </para>
    </formalpara></listitem>    
    
    <listitem><formalpara>
      <title>Scales  well with increasing number of states</title>
      <para>
        If the state-specific logic was contained in the context, the context
        would  become increasingly complex with increasing number of states.
        Encapsulating the state specific logic in a separate state object
        provides a solution which is much more scalable.
      </para>
    </formalpara></listitem>
    
    <listitem><formalpara>
      <title>Simplifies state transitions</title>
      <para>
        The state transition are now explicit and a lot more manageable since 
        a switch between object changes all relevant service realizations and
        provides a clean mechanism for switching between state variables.
      </para>
    </formalpara></listitem>
    
    <listitem><formalpara>
      <title>State objects may, at times, be shared</title>
      <para>
        Particularly if the state objects encapsulate only different behavior,
        the state object may be shared across instances of the same class
        and at times even across instances of different classes.
        <note>
          <para>
            This solution effectively combines the state pattern with the flyweight
            pattern which shares objects with no intrinsic state.
          </para>
        </note>
      </para>
    </formalpara></listitem>
  </itemizedlist>
    </para>
</section>
