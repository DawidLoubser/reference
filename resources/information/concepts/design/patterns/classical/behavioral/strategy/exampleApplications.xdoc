<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.behavioral.strategy.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example applications</title>
  <para>
    The exposed state pattern may be useful when different states offer different
    sets of services.
  </para>

  <section>
    <title>Pluggable optimization algorithms for compilers</title>
    <para>
      Compilers may use different optimization algorithms. A natural solution would be
      to decouple the optimization algorithms from the compiler via the strategy pattern.
    </para>
  </section>
  
  <section>
    <title>Pluggable pricing algorithms for financial contracts</title>
    <para>
      Pricing path dependent contracts (for example, interest rate or credit derivatives)
      usually results in a problem of solving coupled, non-linear, stochastic differential equations.
      Such problems are often very difficult and need to be solved with numerical algorithms
      which make some simplifying assumptions. 
    </para>
    <para>
      Usually one would want to be able to use different pricing algorithms to price a contract -- 
      <abbrev>i.e.</abbrev> one would want to decouple the pricing from the contract itself.
      This would be typically done using the strategy pattern.
    </para>
  </section>  
  
  <section>
    <title>Pluggable layout managers</title>
    <para>
      The Java GUI libraries, AWT and Swing, provide a nice example of a strategy pattern.
      One can insert components into containers and since the composite pattern is used,
      that can be done recursively (adding containers to containers).
    </para>
    <para>
      But you can use one of a number of strategies to position components within a container.
      To support pluggable layout algorithms, the strategy pattern is used (see
      <xref linkend="resources.information.concepts.design.patterns.classical.behavioral.strategy.layoutManagers_fig"/>.
    </para>

    <figure id="resources.information.concepts.design.patterns.classical.behavioral.strategy.layoutManagers_fig">
      <title>
         Containers delegate the laying out of components within the container to a layout 
         manager.
      </title>
      <graphic align="center" scalefit="0" fileref="layoutManagers.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>Input field validation</title>
    <para>
      Different strategies can be used to validate user input into, for example, a text field. For 
      example one can use separate validator algorithms for date and floating point entries.
    </para>
  </section>
  
  <section>
    <title>Drawing applications</title>
    <para>
      The strategy pattern can be used to allow users to select a filling algorithm for a graphics
      object. For example, users may select to fill a graphics object with a color, a pattern or 
      to use gradient filling.
    </para>
    <para>
      In a similar way, users can select a drawing strategy, using different pens of different
      colors or different line patterns.
    </para>
  </section>
  
  <section>
    <title>Importing/exporting data</title>
    <para>
      The strategy pattern is often used to support a number of different import and export
      algorithms. Note that a new strategy can be plugged in at run-time without bringing
      down the system.
    </para>
  </section>
  
  <section>
    <title>Using a sorter</title>
    <para>
      Your collection may make use of a sorter to realize the <literal>sort</literal>
      service it provides to its client, but decouples from any particular realization of a sorter.
    </para>  
    
    <figure>
      <title>Collections decouple from any specific sorting algorithms using the strategy pattern. </title>
      <mediaobject><imageobject>
        <imagedata fileref="sorter.jpg"/>
      </imageobject></mediaobject>
    </figure>        
  
</section>
