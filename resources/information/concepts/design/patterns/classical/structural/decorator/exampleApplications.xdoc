<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE para SYSTEM "/usr/share/sgml/docbook/xml-dtd-4.1.2/docbookx.dtd"-->
<section id="resources.information.concepts.design.patterns.classical.structural.decorator.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example applications</title>
  <para>
    It is common to use the decorator pattern for GUI class libraries where core components, supporting pluggable borders,
    scroll panes, and other
  </para>  
  
  <section>
    <title>GUI components</title>
    <para>
      The decorator pattern is used widely in GUI libraries where a GUI component may be
      decorated by potentially multiple decorators.
    </para>
    <figure id="resources.information.concepts.design.patterns.classical.structural.decorator.guiComponents_fig">
      <title>
         Any Gui component can be decorated with a border or a scroll pane.
      </title>
      <graphic align="center" scalefit="0" fileref="guiComponents.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>Account decorators</title>
    <para>
      The decorator pattern is, however, more widely applicable that simply GUI libraries. For
      example, in
      <xref linkend="resources.information.concepts.design.patterns.classical.structural.decorator.decoratedAccount_fig"/>
      we decorate accounts with voyager miles, service fees or any other pluggable functionality.
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.structural.decorator.decoratedAccount_fig">
      <title>
         The debit service of an account can be decorated by voyage miles, transaction fees and 
         potentially further decorators. 
      </title>
      <graphic align="center" scalefit="0" fileref="decoratedAccount.jpg"/>
    </figure>
  </section>
  
  <section>
    <title>I/O stream decorators</title>
    <para>
      Another very common application of the decorator pattern is that of I/O streams. The 
      decorators add additional responsibilities before the data is written to or read from a
      stream. These may include
      <itemizedlist>
        <listitem><para>buffering,</para></listitem>
        <listitem><para>compression/decompression of data,</para></listitem>
        <listitem><para>marshaling onto primitive data types or onto objects,</para></listitem>
        <listitem><para>encryption/decryption,</para></listitem>
        <listitem><para>accumulation of a hashing function value to verify data integrity and so on.</para></listitem>
      </itemizedlist>
    </para>
    <figure id="resources.information.concepts.design.patterns.classical.structural.decorator.inputStreams_fig">
      <title>
         The various concrete input streams can be decorated with a combination of input
         stream decorators.
      </title>
      <graphic align="center" scalefit="0" fileref="inputStreams.jpg"/>
    </figure>
    <para>
      Once again, we can plug the decorators one into another. For example, we can attach a
      <itemizedlist>
        <listitem><para>
          <literal>BufferedInputStream</literal> to a 
          <literal>FileInputStream</literal> to provide buffering,    
        </para></listitem>
        <listitem><para>
          then a <literal>DigestInputStream</literal> which accumulates the message
          digest (<abbrev>i.e.</abbrev> hashing function value) during reading and provides
          a mechanism for querying the message digest after the data has been read,
        </para></listitem>
        <listitem><para>
          and finally a <literal>ZipInputStream</literal>  onto the 
          <literal>BufferedInputStream</literal> which unzips
          the contents as it is read.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  

</section>
