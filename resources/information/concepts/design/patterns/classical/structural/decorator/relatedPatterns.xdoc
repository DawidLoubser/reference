<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.structural.decorator.relatedPatterns"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Related patterns</title>
  <para>
  <itemizedlist>
    <listitem><formalpara>
      <title>Associative composite pattern</title>
      <para>
        If the fact that an object changes its identity when an additional responsibility
        is added becomes an issue -- <abbrev>i.e.</abbrev> the maintenance of the
        references to the decorated object becomes a excessively complex, you may want
        to use the associative composite pattern instead. In the latter case the client 
        reference remains unchanged (<abbrev>i.e.</abbrev> the client continues
        to interface with the same object via the same message path -- the same
        reference).
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>State pattern</title>
      <para>
         If the decorations are state dependent and change frequently, you may want to
         use the state pattern either instead of the decorator pattern or in conjunction with
         the decorator pattern.
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>Strategy pattern</title>
      <para>
        Both, the decorator pattern and the associative composite pattern add additional
        responsibilities to a service on the fly. They do not change the core realization
        of the service -- both still deliver the original service before adding to it. If the
        core realization of the service needs to be altered, you may want to consider
        the strategy pattern.
      </para>
    </formalpara></listitem>
    <listitem><formalpara>
      <title>Chain of responsibilities</title>
      <para>
        This is another pattern often used when further responsibilities need to be added
        on the fly.
      </para>   
    </formalpara></listitem>
    <listitem><formalpara>
      <title>The Visitor pattern</title>
      <para>
        The visitor pattern is used if further polymorphic services are to be added externally 
        to a class hierarchy.
      </para>
    </formalpara></listitem>
  </itemizedlist>
  </para>
</section>
