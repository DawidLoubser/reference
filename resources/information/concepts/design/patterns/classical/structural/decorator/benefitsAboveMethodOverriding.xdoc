<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.structural.decorator.benefitsAboveMethodOverriding"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Benefits above method overriding</title>
  <para>
    You may ask yourself 
    <blockquote>
      <para>
        <quote><emphasis>
          Why have the decorator pattern at all if we can simply define a specialized class which
          decorates the superclass by delegating the realization of a service request to it before
          adding any additional responsibilities?
        </emphasis></quote>
      </para>
    </blockquote>
  </para>
  <para>
    The core benefits for using the decorator pattern instead of simple method overriding are that
    <itemizedlist>
      <listitem><para>
        you can add decorations to an object on the fly and that
      </para></listitem>
      <listitem><para>
        you can add different responsibilities to different instances of the same class.
      </para></listitem>
    </itemizedlist>
  </para>
</section>
