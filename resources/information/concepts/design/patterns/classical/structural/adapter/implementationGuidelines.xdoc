<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.structural.adapter.implementationGuidelines"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Implementation guidelines</title>
   <para>
     The implementation of the adapter pattern is a straight-forward is, in object-oriented
     languages a direct mapping of the UML diagrams onto code.
   </para>
   
   <section>
     <title>Dynamic adaption of service providers to client's needs</title>
     <para>
       When using the delegation model (via the association between the adapter
       and the service provider), a service provider can be dynamically adapted by
       assigning the appropriate adapter at run-time.
     </para>
   </section>
   
   <section>
     <title>Adapters subclassing adaptees</title>
     <para>
        If an adapter subclasses an adaptee it 
        <itemizedlist>
          <listitem><para>
            may fulfill the client requirements as well as  
          </para></listitem>
          <listitem><para>
            being substitutable for the concrete sevice providers.  
          </para></listitem>
        </itemizedlist>
        This solution is, however, less flexible (except when combining this with the
        <emphasis>decorator pattern</emphasis>), and the dynamic (run-time) adaption
        of a servicec provider to some client's needs is sacrificed.
     </para>
     <note><title>Warning</title>
       <para>
         The original gang-of-four book suggests that the adapter can 
         <emphasis>privately inherit</emphasis> from the
         adaptee. Private inheritance violates substitutibility directly and should not be used.
         Private inheritance is supported in C++, but not in UML or Java.
       </para>
     </note>
   </section>
   
</section>
