<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.structural.bridge.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example applications</title>
  <para>
    The bridge pattern is widely used to decouple abstractions of a windowing system from
    the various, more low-level realizations. It can, however, be used in many other domains
    where we want to introduce an abstraction layer which decouples clients from the
    various implementation layers for that domain.
  </para>  
  <para>
    The following are all example frameworks which are explicitly designed around the bridge 
    pattern.
    <note>
      <para>
         The bridge pattern is best leveraged as a design-time pattern which is consciously chosen
         when designing systems which interact with lower-level frameworks which may have
         different realizations.
      </para>
    </note>  
  </para>
  
  <section>
    <title>The virtual file system used by Linux</title>
    <para>
      Linux supports a very wide range of file systems. However, applications interact with 
      these various file systems in a generic, more abstract way. The <emphasis>virtual file 
      system</emphasis> used by client applications is an abstraction layer which bridges
      to the various concrete file system realizations (<abbrev>e.g.</abbrev> ext2fs, various
      journaling file systems, FAT, NFS, NTFS and so on).
    </para>
  </section>
  
  <section>
    <title>Java's AWT: the <emphasis>Abstract Window Toolkit</emphasis></title>
    <para>
      Java provides two user-interface class libraries for the J2SE (Java 2 Standard edition),
      <emphasis>Swing</emphasis> which is a pure Java user interface class libraries which
      requires only minimal support from the underlying operating system and the AWT which
      uses native peers.
    </para>
    <para>
      The AWT is designed around the bridge pattern. It provides an abstraction layer which
      maps onto the windowing support provided by the underlying system (<abbrev>e.g.</abbrev>
      X-Windows, Microsoft Windows or Apple Mac).
    </para>
  </section>
  
  <section>
    <title>Run-time environments</title>
    <para>
       Run-time environments explicitly decouple source or even compiled code from the
       underlying platform they are executing on. They provide and abstraction layer which
       maps the requests for generic operating system services onto the concrete realizations
       of these services as provided by the host platform.
    </para>
  </section>
  
  <section>
    <title>Chess game</title>
    <para>
      Many chess games allow you to plug out the games engine which evaluates positions 
      and suggests moves in order to replace it with another realization of a games engine.
    </para>
  </section>
  
  <section>
    <title>Hardware and device abstraction layers</title>
    <para>
      For example, VMware defines a hardware/device abstraction layer which enables one to
      run different virtual machines with potentially different operating systems on a single
      machine. For example, one can run a Windows session within Linux and vice versa.
    </para>
  </section>  

</section>
