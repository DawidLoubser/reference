<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.concepts.design.patterns.classical.structural.composite.consequences"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Consequences</title>
  <para>
  <itemizedlist>
    <listitem><para>
      Primitive and composite objects are interchangeable. Client applications may treat both,
      primitive and composite objects uniformly and often don't
      know or care whether they are working with a primitive or a complex object.
    </para></listitem>
    <listitem><para>
      You can support a wide range of custom made object, each with its own set
      of components.
    </para></listitem>
    <listitem><para>
      Services can be realized polymorphically across the recursive containment structure.
    </para></listitem>
    <listitem><para>
      The composite pattern can be realized for all 3 core OO relationships:
      <itemizedlist>
        <listitem><formalpara>
        <title>Composition</title>
        <para>
          In this case the components are fully owned by the container and may be accessed
          only through the container. In this case two containers cannot contain the same component
          in the sense of being the same object -- the same instance. They can at most contain each 
          their own copy of a component. Composite patterns using a composition relationship 
          between the container and its components are not used very often.
        </para>
        </formalpara></listitem>
        <listitem><formalpara>
        <title>Aggregation</title>
        <para>
          This is the most common form of the composite pattern. Here the components are part
          of the state of the container. This implies that if a component's state changes
          the state of the container changes (<abbrev>e.g.</abbrev> if the state of an asset in
          the portfolio changes, for example, its value, then the state of the portfolio itself
          changes -- it too changes its value). Here multiple containers can contain the same
          component.
        </para>
        </formalpara></listitem>
        <listitem><formalpara>
        <title>Association</title>
        <para>
           An association represents a client/server relationship. Thus, if a composite pattern uses
           an association relationship between the container and its components, then we have
           a potentially recursive client/server relationship. This structure provides facilities for
           adding responsibilities to a service on the fly. In that sense it would be similar to the
           decorator pattern except that 
           <itemizedlist>
             <listitem><para>
               lower level service providers are added to the other end of the structure -- the
               decorated component is the container itself,
             </para></listitem>
             <listitem><para>
               a whole range of extra deliverables to a service can be added at the same time,
             </para></listitem>
             <listitem><para>
               clients continue interfacing with the same object, <abbrev>i.e.</abbrev> the client
               reference along which the service requests are sent need not be modified
               to point to a decorator but continues to request the service from the
               original service provider.
             </para></listitem>
           </itemizedlist>
           In the case of an associative composite pattern the root component is usually an
           interface which is implemented by both, leaf components and containers.
        </para>
        </formalpara></listitem>
      </itemizedlist>
    </para></listitem>
  </itemizedlist>
    </para>
</section>  
