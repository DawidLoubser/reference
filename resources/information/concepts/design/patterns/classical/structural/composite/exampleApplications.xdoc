<?xml version="1.0" encoding="UTF-8"?>
 
<section id="resources.information.concepts.design.patterns.classical.structural.composite.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example applications</title>
  <para>
    The composite pattern can be applied to a wide spectrum of fundamentally
    different problem domains.
  </para>  
  
  <section>
    <title>File system</title>
    <para>
      Most file systems support a recursive container/component stucture where the containers
      are directories and components are files. A directory contains many files some of which
      are again directories. This structure is shown in
      <xref linkend="resources.information.concepts.design.patterns.classical.structural.composite.fileDirectory_fig"/>.
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.structural.composite.fileDirectory_fig">
      <title>
        A directory has files, but is itself a file.
      </title>
      <graphic align="center" scalefit="0" fileref="fileDirectory.jpg"/>
    </figure>
    
     <xi:include href="../../../../../../platforms/linux/fileSystem/virtualFileSystemDesign.xdoc" />
  </section>
    
  <section>
    <title>Portfolios and assets</title>
    <para>
      Assets are entities which have value. Portfolios are groupings of assets. But the portfolio
      itself can be viewed (and traded) as an asset and hence it is itself an asset. This very natural
      design for this is a direct application of the composite pattern (see
      <xref linkend="resources.information.concepts.design.patterns.classical.structural.composite.assets_fig"/>).
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.structural.composite.assets_fig">
      <title>
        A portfolio holds asset and can be itself viewed as an asset. 
      </title>
      <graphic align="center" scalefit="0" fileref="assets.jpg"/>
    </figure>
    
    <section>
      <title>Services realized polymorphically across the recursive structure</title>
      <para>
        The assets/portfolios example provides an ideal platform for demonstrating not only
        the direct structural benefits of the composite patterns, but also the benefit of being
        able to easily realize a service polymorphically across the recursive structure.
      </para>
      <para>
        Consider the <literal>getValue</literal> service. Each asset may
        calculate its value in its own way. The container, <abbrev>i.e.</abbrev> the 
        portfolio, will calculate its value by asking each of its components (<abbrev>i.e.</abbrev>
        assets) for their value and summing these values up. If any of the assets is a
        portfolio itself, it will automatically calculate the value by recursing to the next
        level in the hierarchy.
      </para>
    </section>
    
  </section>
  
  <section>
    <title>Java GUI libraries</title>
    <para>
      The composite pattern together with the concept of layout managers provide the foundation
      for Java's platform and resolution independent user-interface design. The idea is simply
      that there are containers which hold GUI components. The delegates the responsibility of 
      positioning its components within it to a separate class, a <literal>LayoutManager</literal>.
    </para>
    <para>
      These layout managers are typically very simple, stacking the components on top or next to
      each other or within grid positions on the screen. A sophisticated, slick panel design which
      is platform and resolution independent is then achieved by nesting containers. The result
      is usually a simpler presentation layer where screens are assembled from re-usable, simple
      panels. The design of the Java user-interface libraries are shown in
      <xref linkend="resources.information.concepts.design.patterns.classical.structural.composite.awtSwing_fig"/>.
    </para>  
    
    <figure id="resources.information.concepts.design.patterns.classical.structural.composite.awtSwing_fig">
      <title>
        Java's user interface libraries achieve resolution independence partially through
        the composite pattern.
      </title>
      <graphic align="center" scalefit="0" fileref="awtSwing.jpg"/>
    </figure>
  </section>
    
  <section>
    <title>Document structures</title>
    <para>
      Documents themselves may require recursive structures which are processed recursively.
      For example, <emphasis>DocBook</emphasis>, a public statndard for XML-based
      documentation which is also th source for the document you are currntly reading,
      supports a composite pattern for sections. Sections may contain further sections
      (the sub -sections) which in turn may recursively contain further sections.
    </para>
  </section>
  
    
</section>
