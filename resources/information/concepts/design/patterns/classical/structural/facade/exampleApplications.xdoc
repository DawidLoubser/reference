<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.classical.structural.facade.exampleApplications"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Example applications</title>
  <para>
    The facade pattern is often used to hide low-level implementation complexities from users.
    It provides a high-level client-oriented interface on a class library. 
  </para>
  
  <section>
    <title>A compiler facade</title>
    <para>
      In <xref linkend="resources.information.concepts.design.patterns.classical.structural.facade.compiler_fig"/>
      we show the classes used by the compiler sub-system. The sub-system provides a facade
      onto the compiler sub-system in the form of a <literal>Compiler</literal> class
      which provides the high-level <literal>compile</literal> service.
    </para>
    
    <figure id="resources.information.concepts.design.patterns.classical.structural.facade.compiler_fig">
      <title>The compiler sub-system publishes its services through a facade.</title>
      <graphic fileref="compiler.jpg"/>
    </figure>
    
  </section>
  
  <section>
    <title>Encapsulating legacy systems</title>
    <para>
      At times legacy systems become complex to use because of the non-intuitive interface
      they provide. In such cases one may want to provide a facade which publishes a clean,
      client-driven interface on what is potentially a mess.
    </para>
  </section>
  
  <section>
    <title>Risk-Watch</title>
    <para>
      The financial risk management system, <emphasis>RiskWatch</emphasis>, provides
      a Java facade onto a more low-level C++ class library.
    </para>
  </section>
  
  <section>
    <title>Security facade</title>
    <para>
       Depending on the security roles assigned to an authenticated principle, the principle may
      obtain access to a different subset of services, <abbrev>i.e.</abbrev> each user sees
      only that subset of the system through their security facade to which they have access to.
    </para>
  </section>  

</section>
