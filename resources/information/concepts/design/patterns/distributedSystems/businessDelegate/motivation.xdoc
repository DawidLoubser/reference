<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.concepts.design.patterns.distributedSystems.businessDelegate.motivation"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Motivation</title>
  <para>
    Below we discuss typical scenarios which may lead to using the business delegate pattern.
  </para>
  
  <section>
    <title>Concern around tight coupling to server technology</title>
    <para>
      You are worried about the sever side technology chosen and would like to decouple the client
      from it.
    </para>
  </section>
  
  <section>
    <title>Concern around tight coupling to an integration technology</title>
    <para>
      You may be concerned about locking the client into a specific integration technology like web
      services, Java RMI or CORBA and would like to protect your client from changes in the
      integration technology.
    </para>
  </section>
  
  
  <section>
    <title>Inefficient development process</title>
    <para>
      You have separate business logic and presentation layer developer teams and  dependencies
      cause inefficiencies in the development process due to synchronization problems. In
      particular, the client development team has to, at times, wait for ceratin server elements to
      be developed before they can complete the development and testing of the client.
    </para>
  </section>
  
  <section>
    <title>Incorrect calling semantics</title>
    <para>
      The server side does not provide support for the calling semantics your client requires. For
      example, the client wokflow may
      <itemizedlist>
        <listitem><para>
          have no further dependency on the response and, in order to
          provide an efficient user workflow,   or may
        </para></listitem>
        <listitem><para>
          be able to process the response at a later stage (<abbrev>i.e.</abbrev> the current
          client workflow can continue in the mean time) while  the server offers a service only
          synchronously.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
</section>
