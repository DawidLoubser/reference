<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.concepts.design.patterns.distributedSystems.remoteCommand.motivation"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Motivation</title>
  <para>
    The following are typical scenarios which would lead one to consider using the remote command
    pattern:
    <itemizedlist>
      <listitem><para>
        At times the <emphasis>object making the request on the client side need not know anything about the
          actual service requested</emphasis>. For example, the request may have been constructed by GUI event handlers who
        pass the request on to an object which delivers the request to the server side. The
        responsibility of that object is solely to deliver service requests and to receive responds
        without having to know what the request is and without having to process the response.
      </para></listitem>
      <listitem><para>
        You may want to <emphasis>support processing of requests at various levels of abstraction.</emphasis> 
        For example, you may have a standard workflow to process loan applications, but may have
        specilized workflows to process vehicle and home loan applications. If there is no
        specialized process for a specific loan request, the next, more generic loan request should
        be used. Also, the <emphasis>interface for the service provider should not change</emphasis> 
        as further specialized request handling is introduced.
        <note><para>
          Many object oriented programming languages including Java, C++, C# and Delphi, do not
          support polymorphism on message arguments. In such languages the mapping must be done
          in the generic request handler.
        </para></note>
      </para></listitem>
    </itemizedlist>
    
  </para>
  
</section>
