<?xml version="1.0" encoding="UTF-8"?>
<section
  id="resources.information.concepts.design.patterns.distributedSystems.remoteCommand.relatedPatterns"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Related patterns</title>
  <para>
  
  </para>
  
  <section>
    <title>Remote command patterns</title>
    <para>
      The remote command pattern (also known as EJB command) is effectvely a business delegate which
      processes command objects.
    </para>
  </section>
  
  <section>
    <title>Business delegate versus broker</title>
    <para>
      The business delegate pattern is closely related to the broker pattern in that it also decouples
      the client from the server technology. The business delegate could be seen as the client
      proxyfor the server. 
    </para>
    <para>
      However, the client proxy in the broker pattern addresses aspects like
      <itemizedlist>
        <listitem><para>
          establsihing and maintaining connections to service providers,
        </para></listitem>
        <listitem><para>
          marshalling of the request onto the message protocol, and
        </para></listitem>
        <listitem><para>
          demarshalling of the response onto the client implementation language.
        </para></listitem>
      </itemizedlist>
      Typically this mapping onto the client language introduces 
      request
      marshalling/demarshalling. The business delegate, on the other hand, will usually use a broker
      for the remote integration, but provides a further level of decoupling.
    </para>
  </section>
  
</section>
