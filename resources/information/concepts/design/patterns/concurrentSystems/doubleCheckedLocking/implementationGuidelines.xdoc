<?xml version="1.0" encoding="UTF-8"?>

<section id="resources.information.concepts.design.patterns.concurrentSystems.doubleCheckedLocking.implementationGuidelines"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Implementation guidelines</title>
  <para>
    The implementation of the doublechecked locking pattern is in many object-oriented 
    languages with concurrency and locking support straight-forward. The
    <literal>createInstance()</literal> service must be defined such that
    threads will acquire the lock for the meta-class upon entry into the service.
  </para>  
  <para>
    In languages like Java, C++, C# and Delphi which do not support the concept of a metaclass,
    the lock for the class must be aquired by the class (static) services. Below we show an example
    Java implementation:
    <programlisting>
      <xi:include parse="text" href="source/DBConnectionPool.java"/>    
    </programlisting>
  </para>
</section>
