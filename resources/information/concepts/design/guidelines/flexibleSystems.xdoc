<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE section SYSTEM "file:/opt/share/xml/Oxygen/samples/docbook/xml/docbookx.dtd">
-->
<section id="resources.information.concepts.design.guidelines.flexibleSystems"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Designing flexible systems</title>
  <para>
    Flexible systems are key to modern software systems which have evolve redularly
    and often rapidly with evolving business requirements. It is thus key that
    systems are designed with flexibility in mind. Here are some guidelines which
    may help to achieve this.
  </para>
  
  <section><title>Modular systems</title>
    <para>
      It is desirable that systems are assembled from weakly coupled modules or 
      components which have well-defined and non overlapping responsibility domains.
      Such systems are simpler and hence easier to modify. Furthermore, the components
      may be replaced and often even be re-used.
    </para>
  </section>

  <section><title>Cohesive objects</title>
    <para>
      Objects at all levels of granularrity should exhibit a high cohesion level, i.e.\
      have one core responsibility with any further responsibilities strongly alligned
      with that core responsibility. Objects which carry a range of unrelated 
      responsibilities are difficult to understand, difficult to maintain and
      difficult to re-use. Systems assembled from such components are typically very
      rigid and expensive to maintain.
    </para>
  </section>

  <section><title>Interface-driven design</title>
    <para>
      Interfaces provide decoupling from implementations and lay the foundation for
      plug-and-play software development. Interface driven designs are usually very
      flexible, particularly whe  the interfaces themselves display a high level of
      cohesion. 
    </para>
  </section>

  <section><title>Clean layers of well defined granularity</title>
    <para>
      Designing such that there is a smooth transition between layers of objects with
      similar granularities is one of the more difficult aspects of object-oriented
      analysis and design. Achieving this, however, reslts in designs which are
      conceptually clean and often complexity is managed easier. Consequently such
      systems are easier to modify and hence more flexible.
    </para>
  </section>
</section>
