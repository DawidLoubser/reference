<?xml version="1.0" encoding="UTF-8"?>
<section id="resources.information.concepts.design.guidelines.requirementsForGoodDesign"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.solms.co.za/schemas/doc/solmsDoc/solmsDoc.xsd" 
         xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Requirements for good design</title>
  <para>
    In order to be able to demonstrate that URDAD is a process which tends to lead to <quote><emphasis>good design</emphasis></quote>,
    we first have to understand the core qualities of good design. Most of these are accepted design principles:
    <itemizedlist>
      <listitem><formalpara>
        <title>Responsibility localization</title>
        <para>
          A design with good responsibility localization is often referred to as a design with a high level of cohesion.
          In such a design each component adheres to the <emphasis>single responsibility principle</emphasis>;
          <abbrev>i.e.</abbrev> each component thus has only a single responsibility at some level of granularity and all its
          attributes and services are narrowly aligned with its responsibility. 
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Clean layers of granularity</title>
        <para>
          This very important aspect of good design enables one to work effectively at various levels
          of granularity. The layers should adhere to the dependency inversion principle, <abbrev>i.e.</abbrev>
          components in a lower level of granularity should not have any dependency on higher-level
          components. Also, one should be able to understand a higher-level workflow without having to understand 
          the finer details. At any level of granularity the responsibilities should be well defined and the workflow
          should be self-contained and comprehensible.
          <note><para>
            To illustrate the benefit of being able to understand a system at different levels of granularity, let us have
            a look at a car. A non-technical person can learn to effectively
            drive a car. This is only possible because they do not have to understand the details of the lower level
            functioning of the car. A mechanic in the local service station will have to understand the car at a lower
            level of granularity, but does not need to understand the finer details of how the gearbox works.
            Again, it would be difficult (and expensive) to source a mechanic who would be able to understand 
            the functioning of the car at all levels of granularity.
            Finally a gearbox specialist will understand the system at an even lower level of granularity, without
            having to understand the higher-level workflows. The various levels of granularity facilitate that 
            different role players can all function effectively without anybody having to understand the entire system.
          </para></note>
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Decoupling</title>
        <para>
          Decoupling provides a high level of flexibility and improves maintainability. If one component uses another component
          we effectively have a client-server relationship. Generally clients would not want to lock into a particular
          service provider. Instead, the client defines the requirements in a contract (in business modeling this would
          be an SLA). The contract specifies the services which service providers need to provide (the interface), the
          pre- and post-conditions for those services and the non-functional requirements.
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Simplicity</title>
        <para>
          If everything else is equal, then the simpler solution is preferable. Complexity results in increased
          development costs, risk and maintenance costs. A design which is understandable and conceptually 
          intuitive is preferable above one which is difficult to explain and non-intuitive. 
        </para>
      </formalpara></listitem>
      <listitem><formalpara>
        <title>Architecture and technology neutral</title>
        <para>
          The design should remain valuable over a long period. To this end the design should be able to survive technologies,
          changes in access mechanisms and architectural changes. This is usually achieved by following the guidelines of OMG's
          <emphasis>Model Driven Architecture</emphasis>, (MDA), which suggests that the core design should be technology 
          and architecture neutral and that this core design should then be mapped onto one's choice of technologies and architecture.
        </para>
      </formalpara></listitem>
    </itemizedlist>
  </para>
  
  <section>
    <title>Benefits of adhering to these design principles</title>
    <para>
      Adhering to the above design principles provides a range of short and long-term benefits to organizations including
      <itemizedlist>
        <listitem><formalpara>
          <title>Understandability</title>
          <para>
            Understandability is promoted by simplicity, good responsibility localization, intuitive naming,
            and the ability to view workflows at various levels of granularity.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Reusability</title>
          <para>
            Reusability is really a direct consequence of good responsibility localization together with a component
            based approach where components realize well defined contracts. Classes which address a particular
            combination of responsibilities relevant for a particular problem are not generally re-usable. On the other
            hand, classes whose services address only a single domain of responsibility and whose behaviour is well
            defined in a contract are generally much more likely to be re-usable.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Testability</title>
          <para>
            This is facilitated through specifying a contract for each component at any level of granularity.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Maintainability</title>
          <para>
            Simplicity, responsibility localization which results in localized maintenance, the ability to effectively work at 
            different levels of granularity, decoupling,  testability and reusability all contribute to making a system maintainable.
          </para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>Longevity</title>
          <para>
            A design which is architecture and technology neutral can survive changes in technologies and architecture. 
            Furthermore, all the design principles which assist maintainability contribute also significantly to the longevity of the design.
          </para>
        </formalpara></listitem>
      </itemizedlist>
    </para>
  </section>  
</section>
  
  